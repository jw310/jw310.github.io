<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用 Node.js 設計 RESTful API 來串接 mongoDB</title>
      <link href="/2020/04/15/nodejs-mongodb-restfulapi/"/>
      <url>/2020/04/15/nodejs-mongodb-restfulapi/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Node-js-與-RESTful-API-架構來串接-mongoDB-並部署到-server"><a href="#使用-Node-js-與-RESTful-API-架構來串接-mongoDB-並部署到-server" class="headerlink" title="使用 Node.js 與 RESTful API 架構來串接 mongoDB 並部署到 server"></a>使用 Node.js 與 RESTful API 架構來串接 mongoDB 並部署到 server</h1><p>網站組成通常是前端加後端、資料庫，簡單來說，前端主要是畫面加上操作介面，包含了一些前端語言及框架，後端則處理使用者請求控制回應，例如登入，後台管理…等等，後端語言常見的有 PHP、Java、ASP.NET、Node.js、Python…等等。資料庫則有 MySQL、MSSQL、MongoDB…。</p><p>因前端不斷的演進，畫面處理需快速變化，傳送資料方式也大都改用 Web API 的方式來提供服務。所以後端(server)就負責建立 API，透過串接 API 處理資料。</p><p>這邊就要來使用 Node.js 搭配 express 架構 RESTful API，連接 MongoDB，並部署到 server。</p><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>是開源的 NoSQL 資料庫，不需先制定每張資料表的結構、畫出 ER Model，因此不管是用來做個人專案，還是用來處理較大量資料都可以。</p><p>MongoDB 是用 Key-value 的方式來儲存資料：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: &quot;john&quot;,</span><br><span class="line">    job: &quot;farmer&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>另外 MongoDB 不是 JSON 格式，而是 BSON。它的 key 和 value 是有區分大小寫。但 MongoDB 大都是用 JSON 格式來儲存資料。</p><p>ps.BSON(Binary JSON)，是 JSON 的擴充，因此可使用 Binary data 等。</p><p>MongoDB 跟傳統資料庫大致上對應的關係：</p><table><thead><tr><th>DB</th><th style="text-align:center">MongoDB</th><th style="text-align:center">MySQL</th></tr></thead><tbody><tr><td>資料名稱</td><td style="text-align:center">Document</td><td style="text-align:center">Row</td></tr><tr><td>資料存放區名稱</td><td style="text-align:center">Collection</td><td style="text-align:center">Table</td></tr><tr><td>資料庫名稱</td><td style="text-align:center">Database</td><td style="text-align:center">Database</td></tr></tbody></table><h2 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h2><p>REST(Resource Representational State Transfer 具象狀態變化傳輸)，API(Application Programming Interface 應用程式介面)。</p><p>RESTful API 可以理解成具有 Rest 架構的 Web API，是一種設計風格。意思大致上是，由發送的 HTTP 請求中所包含的資訊，就可以容易解讀出這請求會收到什麼類型的資料。用淺顯易懂的方式來解釋，就是只看 API 的格式就可以看得懂。</p><p>由於 API 設計方式跟 HTTP 請求及資料庫資料操作有關，因此就簡略說明一下：</p><p>常見的 HTTP 請求方式：<br>GET：取得資料<br>POST：新增一筆新的資料(如果存在會新增一筆新的)<br>PUT：更新一筆資料，如果存在這筆資就會覆蓋過去<br>PATCH：部分更新資料<br>DELETE：刪除資料  </p><p>資料庫基本操作 CRUD：<br>Create(新增)<br>Read(讀取)<br>Update(更新)<br>Delete(刪除)  </p><p>常見的 HTTP method 正好會對應到資料庫基本操作。</p><p>假設有一組待辦事項的 API，或許會用以下方式來設計：  </p><p>獲得資料GET    /getData<br>新增資料POST   /createData<br>刪除資料DELETE /deleteData/1  </p><p>以 REST 風格來開發 RESTful API：  </p><p>獲得資料GET     /data<br>新增資料POST    /data<br>刪除資料DELETE  /data/1  </p><p>兩者差異是在於 RESTful API 充分地使用了 HTTP Protocol Method，達到：</p><p>1.直觀簡潔的資源 URI<br>2.並且善用 HTTP Verb<br>3.達到對資源的操作<br>4.並使用 Web 所接受的資料類型: JSON, XML, YAML 等，最常見的是 JSON。</p><h2 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h2><p>1.建立 heroku 上的 mongoDB 資料庫</p><p>2.heroku 建立新 App </p><p>3.安裝 mlab 套件</p><p>要填寫信用卡資料(才能用 Add-ons)</p><p>首先到我們要安裝插件的應用程式頁面，點選「Configure Add-ons」</p><a href="/2020/04/15/nodejs-mongodb-restfulapi/p1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/04/15/nodejs-mongodb-restfulapi/p1.png" title="This is an image"></a><p>在搜尋列打上「mlab」，並安裝</p><a href="/2020/04/15/nodejs-mongodb-restfulapi/p2.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/04/15/nodejs-mongodb-restfulapi/p2.png" title="This is an image"></a><p>4.建立使用者</p><p>5.記得連線 URL</p><p>mlab 建立後，可在畫面上找到。</p><p>格式：<br><code>&quot;mongodb://dbuser:dbpass@host1:port1,host2:port2/dbname&quot;</code></p><p>6.</p><p>接下來就是程式處理方面。  </p><h2 id="建立-nodejs-server"><a href="#建立-nodejs-server" class="headerlink" title="建立 nodejs server"></a>建立 nodejs server</h2><p>先建立專案資料夾</p><p><code>npm init</code>  </p><p><code>npm install express --save</code>  </p><p>建立 index.js  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 引用 express</span><br><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const server = express();</span><br><span class="line"></span><br><span class="line">// 預設 port</span><br><span class="line">const port = process.env.PORT || 3000</span><br><span class="line"></span><br><span class="line">// 建立 get method 顯示 index.html 內容</span><br><span class="line">server.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    // __dirname 回傳被執行 js 檔所在資料夾的絕對路徑</span><br><span class="line">    res.sendFile(__dirname + &apos;/index.html&apos;)</span><br><span class="line">&#125;)</span><br><span class="line">// 監聽 port</span><br><span class="line">server.listen(port, () =&gt; console.log(`Listening on $&#123;port&#125;`))</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">建立 index.html</span><br></pre></td></tr></table></figure></div><p>&lt;!DOCTYPE html&gt;</p><p><html lang="en"></html></p><p><head><meta name="generator" content="Hexo 3.9.0"><br>  <meta charset="UTF-8"><br>  <meta name="viewport" content="width=device-width, initial-scale=1.0"><br>  <meta http-equiv="X-UA-Compatible" content="ie=edge"><br>  <title>Document</title><br></head></p><p><body><br>  <h1>Welcome</h1><br></body><br><br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package.json 加上</span><br></pre></td></tr></table></figure></div></p><p>“scripts”: {<br>    “start”: “node index.js” // 加此行<br>  },<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">測試一下，終端機下執行 `npm start`，在瀏覽器網址輸入 http://localhost:3000/  。看畫面是否成功出現 welcome 字樣。  </span><br><span class="line"></span><br><span class="line">## 連線 mongodb</span><br><span class="line"></span><br><span class="line">1.安裝 mongodb</span><br><span class="line"></span><br><span class="line">`npm install mongodb --save`</span><br><span class="line"></span><br><span class="line">index.js 加上以下內容：</span><br></pre></td></tr></table></figure></div></p><p>// 引用<br>const MongoClient = require(‘mongodb’).MongoClient;</p><p>// mongoDB 連線位置(可看 heroku 的 mlab 頁面有資訊)<br>const url = ‘mongodb://<username>:<password>@<host1>:<port1>/<dbname>‘;</dbname></port1></host1></password></username></p><p>// 連線 mongoDB<br>MongoClient.connect(url, function (err, db) {<br>    if (err) throw err;<br>    const dbo = db.db(“<dbname>“)<br>    console.log(‘mongoDB in running’)<br>    db.close()<br>});<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">測試一下，終端機下執行 `npm start`，終端機畫面上是否顯示 Listening on 3000 字樣。</span><br><span class="line"></span><br><span class="line">若產生以下字樣</span><br><span class="line"></span><br><span class="line">(node:39803) DeprecationWarning: current Server Discovery and Monitoring engine is deprecated, and will be removed in a future version. To use the new Server Discover and Monitoring engine, pass option &#123; useUnifiedTopology: true &#125; to the MongoClient constructor.</span><br><span class="line"></span><br><span class="line">修改連線內容</span><br></pre></td></tr></table></figure></div></dbname></p><p>// 連線 mongoDB<br>// 加上以下設定<br>//{ useNewUrlParser: true, useUnifiedTopology: true }<br>MongoClient.connect(url, { useNewUrlParser: true, useUnifiedTopology: true }, function (err, db) {<br>    // 連線資料庫<br>    const dbo = db.db(“<dbname>“)<br>    console.log(‘mongoDB in running’)<br>    // 關閉連線<br>    db.close()<br>});<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## MongoDB 加上一筆資料</span><br><span class="line"></span><br><span class="line">修改 index.js</span><br></pre></td></tr></table></figure></div></dbname></p><p>// 連線 mongoDB<br>MongoClient.connect(url, { useNewUrlParser: true, useUnifiedTopology: true }, function (err, db) {<br>    if (err) throw err;<br>    // 連線資料庫<br>    const dbo = db.db(“<dbname>“)<br>    // console.log(‘mongoDB in running’)<br>    // // 關閉連線<br>    // db.close()<br>    // 建立一筆資料<br>    const myobj = { name: “jw”, time: “2020/04/14/15:00”, content: “hello world” };<br>    // mongoDB 的操作方式<br>    dbo.collection(“comments”).insertOne(myobj, function (err, res) {<br>        if (err) throw err;<br>        console.log(“1 document inserted”);<br>        db.close();<br>    });<br>});<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">執行 `npm start`，畫面上會顯示 1 document inserted。</span><br><span class="line"></span><br><span class="line">&#123;% asset_img p7.png This is an image %&#125;</span><br><span class="line"></span><br><span class="line">heroku 的 mlab 頁面上會有新增的資料。</span><br><span class="line"></span><br><span class="line">&#123;% asset_img p5.png This is an image %&#125;</span><br><span class="line"></span><br><span class="line">## Get API-取得資料</span><br><span class="line"></span><br><span class="line">index.js</span><br></pre></td></tr></table></figure></div></dbname></p><p>//GET API  從 <a href="http://localhost:3000/comments" target="_blank" rel="noopener">http://localhost:3000/comments</a> 取得資料<br>server.get(‘/comments’, (req, res) =&gt; {<br>    // 回傳 comments 的所有資料<br>    db.collection(‘comments’).find().toArray((err, result) =&gt; {<br>        if (err) return console.log(err)<br>    // 顯示取得資料在頁面上<br>        res.send({ data: result })<br>    })<br>})<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">終端機輸入 `npm start`，打開瀏覽器 http://localhost:3000/comments，  可以看到畫面顯示資料。</span><br><span class="line"></span><br><span class="line">&#123;% asset_img p6.png This is an image %&#125;</span><br><span class="line"></span><br><span class="line">## POST API-新增資料</span><br><span class="line"></span><br><span class="line">下載 body-parser 套件，來處理資料格式，將其轉型別成 JSON。</span><br><span class="line"></span><br><span class="line">`npm install body-parser --save`</span><br><span class="line"></span><br><span class="line">index.js 加上</span><br></pre></td></tr></table></figure></div></p><p>const bodyParser = require(‘body-parser’);</p><p>app.use(bodyParser.json());</p><p>// POST API 路徑為/comments expressjs 取參數的方法之一 req.body<br>server.post(‘/comments’, (req, res) =&gt; {<br>    // 顯示 clinet 端傳送過來的 JSON<br>    console.log(req.body);<br>    db.collection(‘comments’).save(req.body, (err, result) =&gt; {<br>        if (err) return console.log(err)<br>        console.log(‘saved to database’)<br>        res.send(req.body);<br>    });<br>})</p><p>// modify server.listen(3000, () =&gt; {});<br>/<em> 將之前的監聽 server.listen(port, () =&gt; console.log(<code>Listening on ${port}</code>)) 註解掉，改寫至 MongoClient.connect() 裡 </em>/</p><p>MongoClient.connect(url, { useNewUrlParser: true, useUnifiedTopology: true }, (err, client) =&gt; {<br>    if (err) return console.log(err)<br>    db = client.db(‘<dbname>‘)<br>    server.listen(port, () =&gt; {<br>        console.log(‘listening on 3000’)<br>    })<br>})<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">執行 `npm start`，打開瀏覽器輸入網址 localhost:3000，在 console 輸入：</span><br><span class="line"></span><br><span class="line">JavaSript fetch post</span><br></pre></td></tr></table></figure></div></dbname></p><p>fetch(‘<a href="http://localhost:3000/comments&#39;" target="_blank" rel="noopener">http://localhost:3000/comments&#39;</a>, {<br>  method: ‘post’,<br>  headers: {<br>    ‘Accept’: ‘application/json, text/plain, <em>/</em>‘,<br>    ‘Content-Type’: ‘application/json’<br>  },<br>  // 傳給 server 的 JSON<br>  body: JSON.stringify({<br>    “name”: “jw”,<br>    “time”:”2020/04/13-15:10:01”,<br>    “content”: “Hello”<br>  })<br>}).then(res=&gt;res.json())<br>  .then(res =&gt; console.log(res))<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% asset_img p3.png This is an image %&#125;</span><br><span class="line"></span><br><span class="line">ps. 顯示 (node:3970) DeprecationWarning: collection.save is deprecated. Use insertOne, insertMany, updateOne, or updateMany instead.</span><br><span class="line"></span><br><span class="line">&#123;% asset_img p4.png This is an image %&#125;</span><br><span class="line"></span><br><span class="line">修改 save() 為提示中的函式 insertOne()...等等</span><br><span class="line"></span><br><span class="line">## DELETE API-刪除資料</span><br><span class="line"></span><br><span class="line">利用 網址`:id` 來帶參數，方便維運 API。若要使用 MongoDB 預設的 `_id` 當作查詢刪除，需要使用 ObjectID 處理來 value，但如果使用其他物件來作查詢，就不需使用 ObjectID。</span><br><span class="line"></span><br><span class="line">index.js</span><br></pre></td></tr></table></figure></div></p><p>const ObjectID = require(‘mongodb’).ObjectID;</p><p>// DELETE API<br>server.delete(‘/comments/:id’, (req, res) =&gt; {<br>    // use _id need use ObjectID(value)<br>    const obj = { _id: ObjectID(req.params.id) };<br>    // 顯示刪除 _id<br>    console.log(obj)<br>    if (!obj) {<br>        res.sendStatus(403);<br>    }<br>    db.collection(“comments”).deleteOne(obj, function (err, obj) {<br>        if (err) throw err;<br>        console.log(“1 document deleted”);<br>        // 回傳訊息<br>        res.send(‘delete success’);<br>    });<br>})<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ps. 顯示 (node:3826) DeprecationWarning: collection.remove is deprecated. Use deleteOne, deleteMany, or bulkWrite instead.</span><br><span class="line"></span><br><span class="line">修改 remove() 為提示中的函式 deleteOne()...等</span><br><span class="line"></span><br><span class="line">## PUT API-更新(UPDATE)資料</span><br><span class="line"></span><br><span class="line">用 `updateOne(obj, newvalues, function(err, obj)&#123;&#125;)` 來更新資料，前面兩個參數分別帶查詢條件及更新資料。</span><br><span class="line"></span><br><span class="line">index.js</span><br></pre></td></tr></table></figure></div></p><p>server.put(‘/comments/:id’, (req, res) =&gt; {<br>    // 顯示 id 及 修改內容<br>    console.log(req.params.id, req.body);<br>    if (!req.body) {<br>        res.sendStatus(403);<br>    }<br>    const newvalues = { $set: req.body };<br>    const obj = { _id: ObjectID(req.params.id) };<br>    db.collection(“comments”).updateOne(obj, newvalues, function (err, obj) {<br>        if (err) throw err;<br>        console.log(“1 document update”);<br>        res.send(‘update success’);<br>    });<br>})<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 建立 config.json</span><br><span class="line"></span><br><span class="line">可以將連線字串、帳密...環境變數等，放在這再引用，方便修改管理。</span><br><span class="line"></span><br><span class="line">config.json</span><br></pre></td></tr></table></figure></div></p><p>{<br>  “DB_URL” : “”mongodb://dbuser:dbpass@host1:port1,host2:port2/dbname””<br>}<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">index.js 加上</span><br><span class="line"></span><br><span class="line">`const &#123; DB_URL: url &#125; = require(&apos;./config.json&apos;);`</span><br><span class="line"></span><br><span class="line">## postman 測試</span><br><span class="line"></span><br><span class="line">處理完 RESTful API 部分後，可以使用 postman 來測試。</span><br><span class="line"></span><br><span class="line">GET</span><br><span class="line"> </span><br><span class="line">% asset_img postman_get.png This is an image %&#125;</span><br><span class="line"> </span><br><span class="line">POST(記得依照標頭輸入設定來調整)</span><br><span class="line"> </span><br><span class="line">&#123;% asset_img postman_post.png This is an image %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% asset_img postman_post2.png This is an image %&#125;</span><br><span class="line"> </span><br><span class="line">PUT(記得依照標頭輸入設定來調整)</span><br><span class="line"></span><br><span class="line">&#123;% asset_img postman_put.png This is an image %&#125;</span><br><span class="line"></span><br><span class="line">DELETE</span><br><span class="line"></span><br><span class="line">&#123;% asset_img postman_delete.png This is an image %&#125; </span><br><span class="line"></span><br><span class="line">## 部署到 Heroku</span><br><span class="line"></span><br><span class="line">部署到 server 上，可方便使用 API。</span><br><span class="line"></span><br><span class="line">終端機輸入：</span><br><span class="line"></span><br><span class="line">1. heroku config set</span><br></pre></td></tr></table></figure></div></p><p>$ heroku config:set PROD_MONGODB=mongodb://dbuser:dbpass@host1:port1,host2:port2/dbname<br><code>`</code></p><p>2.登入 heroku</p><p><code>heroku login</code></p><p>3.建立 GIT  </p><p><code>git init</code><br><code>git add .</code><br><code>git commit -m &quot;nodejs&quot;</code></p><p>4.設定連結的 heroku 遠端主機  </p><p> <code>heroku git:remote -a (Heroku 上 的 App 名稱)</code></p><p>5.push remote  </p><p><code>git push heroku master</code></p><p><code>heroku open</code></p><p>打開瀏覽器，輸入 heroku 的 app 路徑加上 /comments。</p><a href="/2020/04/15/nodejs-mongodb-restfulapi/p8.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/04/15/nodejs-mongodb-restfulapi/p8.png" title="This is an image"></a> <p>接著處理前端及畫面互動就可以做其他運用了。</p><p>參考：<br><a href="https://iandays.com/2018/10/11/nodejsapi/" target="_blank" rel="noopener">https://iandays.com/2018/10/11/nodejsapi/</a><br><a href="https://blog.johlmike.com/2016/08/05/heroku-cha-jian-mlab-mongodb-zi-liao-ku/" target="_blank" rel="noopener">https://blog.johlmike.com/2016/08/05/heroku-cha-jian-mlab-mongodb-zi-liao-ku/</a><br><a href="https://blog.johlmike.com/2016/07/12/mongoose-node-js-上連接-mongodb/#more-453" target="_blank" rel="noopener">https://blog.johlmike.com/2016/07/12/mongoose-node-js-上連接-mongodb/#more-453</a><br><a href="https://ithelp.ithome.com.tw/articles/10186483" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10186483</a><br><a href="https://dotblogs.com.tw/felixblog/2019/12/11/171324" target="_blank" rel="noopener">https://dotblogs.com.tw/felixblog/2019/12/11/171324</a><br><a href="https://medium.com/%E4%BC%81%E9%B5%9D%E4%B9%9F%E6%87%82%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/express-restfulapi%E8%B5%B7%E6%89%8B%E6%95%99%E5%AD%B83-77206cd64ebb" target="_blank" rel="noopener">https://medium.com/%E4%BC%81%E9%B5%9D%E4%B9%9F%E6%87%82%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/express-restfulapi%E8%B5%B7%E6%89%8B%E6%95%99%E5%AD%B83-77206cd64ebb</a><br><a href="https://i5ting.github.io/node-http/" target="_blank" rel="noopener">https://i5ting.github.io/node-http/</a><br><a href="https://progressbar.tw/posts/53" target="_blank" rel="noopener">https://progressbar.tw/posts/53</a><br><a href="https://medium.com/itsems-frontend/api-是什麼-restful-api-又是什麼-a001a85ab638" target="_blank" rel="noopener">https://medium.com/itsems-frontend/api-是什麼-restful-api-又是什麼-a001a85ab638</a><br><a href="https://ithelp.ithome.com.tw/articles/10157431" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10157431</a><br><a href="https://ithelp.ithome.com.tw/articles/10157674" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10157674</a><br><a href="https://noob.tw/mongodb/" target="_blank" rel="noopener">https://noob.tw/mongodb/</a></p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> MongoDB </tag>
            
            <tag> RESTful </tag>
            
            <tag> heroku </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postman 好用 API 測試工具</title>
      <link href="/2020/04/14/postman/"/>
      <url>/2020/04/14/postman/</url>
      
        <content type="html"><![CDATA[<h1 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h1><p>模擬 HTTP Request 來測試 API 的好用工具，包含幾種 HTTP 請求方式： GET 、POST、PUT、DELETE。</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>安裝版下載網址<br><a href="https://www.postman.com/downloads/" target="_blank" rel="noopener">https://www.postman.com/downloads/</a></p><p>Chrome 線上應用程式<br><a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=zh-TW" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=zh-TW</a></p><p>可以選擇註冊於否，皆可正常使用。</p><h2 id="畫面"><a href="#畫面" class="headerlink" title="畫面"></a>畫面</h2><p>基本使用欄位</p><a href="/2020/04/14/postman/p1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/04/14/postman/p1.png" title="This is an image"></a><h2 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h2><p>設定請求中的內容是使用何種編碼方式，包含了 Key 和 Value 两部分。</p><p>Key：大都使用 Content-Type<br>Value：<br>application/x-www-form-urlencoded：瀏覽器的 <code>form</code>，就是在 url 後面加上 key=val。</p><p>multipart/form-data：加上 enctype 屬性，送出訊息後會用 boundary 分割不同的字段，後面再接要送出的欄位與值。</p><p>application/json：JSON 格式。{ “name”: “john”}</p><h2 id="Method-使用"><a href="#Method-使用" class="headerlink" title="Method 使用"></a>Method 使用</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>取得資料</p><a href="/2020/04/14/postman/p4.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/04/14/postman/p4.png" title="This is an image"></a><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>新增資料（如果存在會再新增一筆新的，以資料庫來說，就是ID不一樣。)</p><p>headers 設定傳送資料編碼方式  </p><a href="/2020/04/14/postman/p2.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/04/14/postman/p2.png" title="This is an image"></a><a href="/2020/04/14/postman/p3.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/04/14/postman/p3.png" title="This is an image"></a><h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><p>更新一筆資料，如果資料存在就會覆蓋過去</p><p>使用方式，跟 POST 差不多。把 method 選擇 PUT ，Body 輸入資料即可。</p><a href="/2020/04/14/postman/p5.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/04/14/postman/p5.png" title="This is an image"></a><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>刪除資料</p><a href="/2020/04/14/postman/p6.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/04/14/postman/p6.png" title="This is an image"></a><h3 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h3><p>針對已經存在的資料欄位去做部分更新</p><p>參考：<br><a href="https://ithelp.ithome.com.tw/articles/10201503" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10201503</a><br><a href="https://ithelp.ithome.com.tw/articles/10201528" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10201528</a><br><a href="https://progressbar.tw/posts/53" target="_blank" rel="noopener">https://progressbar.tw/posts/53</a></p>]]></content>
      
      
      <categories>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postman </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket 介紹</title>
      <link href="/2020/04/09/WebSocket-base/"/>
      <url>/2020/04/09/WebSocket-base/</url>
      
        <content type="html"><![CDATA[<h1 id="WebSocket-介紹"><a href="#WebSocket-介紹" class="headerlink" title="WebSocket 介紹"></a>WebSocket 介紹</h1><p>WebSocket 是網路協定的一種，只需要連線一次。Client 與 Server 便能保持連線進行雙向傳輸溝通，不必一直發送 Request 保持溝通。</p><p>請求網址通常是：</p><p><code>ws://example.com</code></p><p>//SSL 加密後 </p><p><code>wss://example.com</code></p><p>以下開始建立 WebSocket 連線測試，分別建立 Server 跟 Client 端。</p><h2 id="Server-端"><a href="#Server-端" class="headerlink" title="Server 端"></a>Server 端</h2><h3 id="建立連接環境"><a href="#建立連接環境" class="headerlink" title="建立連接環境"></a>建立連接環境</h3><p>使用 node.js 來寫後端程式。安裝好 node.js 後，建立專案資料夾後執行：</p><p><code>npm init</code></p><p>然後下載兩個套件來使用:</p><p>// Web 框架  </p><p><code>npm install express --save</code></p><p>// 處理 WebSocket 協定  </p><p><code>npm install ws --save</code></p><p>新增一個 server.js 檔，內容如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//import express 和 ws 套件</span><br><span class="line">const express = require(&apos;express&apos;)</span><br><span class="line">const SocketServer = require(&apos;ws&apos;).Server</span><br><span class="line"></span><br><span class="line">//指定開啟的 port</span><br><span class="line">const PORT = process.env.PORT || 3000</span><br><span class="line"></span><br><span class="line">//建立 express 的物件，並監聽 3000 port ，開啟後在 console 中提示</span><br><span class="line">const server = express()</span><br><span class="line">    .listen(PORT, () =&gt; console.log(`Listening on $&#123;PORT&#125;`))</span><br><span class="line"></span><br><span class="line">//將 express 交給 SocketServer 開啟 WebSocket 的服務</span><br><span class="line">const wss = new SocketServer(&#123; server &#125;)</span><br><span class="line"></span><br><span class="line">//當 WebSocket 從外部連結時執行</span><br><span class="line">wss.on(&apos;connection&apos;, ws =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    //連結時執行此 console 提示</span><br><span class="line">    console.log(&apos;Client connected&apos;)</span><br><span class="line"></span><br><span class="line">    //當 WebSocket 的連線關閉時執行</span><br><span class="line">    ws.on(&apos;close&apos;, () =&gt; &#123;</span><br><span class="line">        console.log(&apos;Close connected&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>執行 server.js 檔。測試檔案是否 ok。cmd 環境專案資料夾下輸入：</p><p><code>node server.js</code></p><p>若成功開啟，console 會出現提示 Listening on 3000</p><p>ps. 注意 package.json 裡的 “main”: “server.js”,</p><h3 id="接收發送訊息-接收-Clinet-訊息處理後回傳"><a href="#接收發送訊息-接收-Clinet-訊息處理後回傳" class="headerlink" title="接收發送訊息(接收 Clinet 訊息處理後回傳)"></a>接收發送訊息(接收 Clinet 訊息處理後回傳)</h3><p>開啟 WebSocket 後， Server 端使用 send 發送訊息，接收則是如同在 connection 內監聽 close 一樣，只是加入對 message 設定監聽，並接收一個參數 data(Client 端發送的訊息)：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wss.on(&apos;connection&apos;, ws =&gt; &#123;</span><br><span class="line">    console.log(&apos;Client connected&apos;)</span><br><span class="line"></span><br><span class="line">    //對 message 設定監聽，接收從 Client 發送的訊息</span><br><span class="line">    ws.on(&apos;message&apos;, data =&gt; &#123;</span><br><span class="line">        //data 為 Client 發送的訊息，現在將訊息原封不動發送出去</span><br><span class="line">        ws.send(data)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    ws.on(&apos;close&apos;, () =&gt; &#123;</span><br><span class="line">        console.log(&apos;Close connected&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="Server-端直接發送資料給-Clinet-端-用-setInterval"><a href="#Server-端直接發送資料給-Clinet-端-用-setInterval" class="headerlink" title="Server 端直接發送資料給 Clinet 端(用 setInterval )"></a>Server 端直接發送資料給 Clinet 端(用 setInterval )</h3><p>// setInterval() 則是固定延遲了某段時間之後，才去執行對應的程式碼，然後 “不斷循環”。</p><p>發送訊息改寫：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">wss.on(&apos;connection&apos;, ws =&gt; &#123;</span><br><span class="line">    console.log(&apos;Client connected&apos;)</span><br><span class="line"></span><br><span class="line">    //固定送最新時間給 Client</span><br><span class="line">    const sendNowTime = setInterval(()=&gt;&#123;</span><br><span class="line">        ws.send(String(new Date()))</span><br><span class="line">    &#125;,1000)</span><br><span class="line"></span><br><span class="line">    ws.on(&apos;message&apos;, data =&gt; &#123;</span><br><span class="line">        ws.send(data)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    ws.on(&apos;close&apos;, () =&gt; &#123;</span><br><span class="line">        //連線中斷時停止 setInterval</span><br><span class="line">        clearInterval(sendNowTime)</span><br><span class="line">        console.log(&apos;Close connected&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="多人連線環境-ws-套件使用-clients"><a href="#多人連線環境-ws-套件使用-clients" class="headerlink" title="多人連線環境( ws 套件使用 clients )"></a>多人連線環境( ws 套件使用 clients )</h3><p>當某個 Client 發送訊息時，同時讓 Server 告知所有其他連接中的 Client，Server 所收到的訊息，也同時接收到 Server 回傳的資料。類似廣播功能。</p><p>改寫監聽 message 部分， 加入 Clients 發送的訊息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wss.on(&apos;connection&apos;, ws =&gt; &#123;</span><br><span class="line">    console.log(&apos;Client connected&apos;)</span><br><span class="line"></span><br><span class="line">    ws.on(&apos;message&apos;, data =&gt; &#123;</span><br><span class="line">        //取得所有連接中的 client</span><br><span class="line">        let clients = wss.clients</span><br><span class="line"></span><br><span class="line">        //做迴圈，發送訊息至每個 client</span><br><span class="line">        clients.forEach(client =&gt; &#123;</span><br><span class="line">            client.send(data)</span><br><span class="line">    //傳送時間 </span><br><span class="line">            //client.send(new Date().toTimeString());</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    ws.on(&apos;close&apos;, () =&gt; &#123;</span><br><span class="line">        console.log(&apos;Close connected&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h2 id="Client-端"><a href="#Client-端" class="headerlink" title="Client 端"></a>Client 端</h2><h3 id="建立連接環境-1"><a href="#建立連接環境-1" class="headerlink" title="建立連接環境"></a>建立連接環境</h3><p>新增一個專案資料夾，新增 index.js，內容如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//使用 WebSocket 網址連結 Server</span><br><span class="line">let ws = new WebSocket(&apos;ws://localhost:3000&apos;)</span><br><span class="line"></span><br><span class="line">//開啟後執行的動作，指定一個 function 會在連結 WebSocket 後執行</span><br><span class="line">ws.onopen = () =&gt; &#123;</span><br><span class="line">    console.log(&apos;open connection&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//關閉後執行的動作，指定一個 function 會在連結中斷後執行</span><br><span class="line">ws.onclose = () =&gt; &#123;</span><br><span class="line">    console.log(&apos;close connection&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>接著新增 index.html，內容如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 引用 index.js</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;script src=&apos;./index.js&apos;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div><h3 id="接收發送訊息-Client-發送訊息給-Server-處理後得到回傳資料"><a href="#接收發送訊息-Client-發送訊息給-Server-處理後得到回傳資料" class="headerlink" title="接收發送訊息( Client 發送訊息給 Server 處理後得到回傳資料)"></a>接收發送訊息( Client 發送訊息給 Server 處理後得到回傳資料)</h3><p>Client 端用 onmessage 處理接收，用 send 送出訊息： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let ws = new WebSocket(&apos;ws://localhost:3000&apos;)</span><br><span class="line"></span><br><span class="line">ws.onopen = () =&gt; &#123;</span><br><span class="line">    console.log(&apos;open connection&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ws.onclose = () =&gt; &#123;</span><br><span class="line">    console.log(&apos;close connection&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//接收 Server 發送的訊息，Server 回傳的資料會在 event 的 data 屬性</span><br><span class="line">ws.onmessage = event =&gt; &#123;</span><br><span class="line">    console.log(event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><h4 id="連結是否成功"><a href="#連結是否成功" class="headerlink" title="連結是否成功"></a>連結是否成功</h4><p>server 端訊息(cmd 環境下)</p><a href="/2020/04/09/WebSocket-base/w2.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/04/09/WebSocket-base/w2.png" title="This is an image"></a><p>用瀏覽器開啟 index.html，連結 server 端。打開 console，會顯示 open connection 字樣，輸入 ws 看訊息。</p><a href="/2020/04/09/WebSocket-base/w1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/04/09/WebSocket-base/w1.png" title="This is an image"></a><p>列出 WebSocket 的物件有哪些屬性， Client 是用 onmessage 屬性接收由 Server 發送的資料。</p><h4 id="server-端接收訊息後，是否回傳"><a href="#server-端接收訊息後，是否回傳" class="headerlink" title="server 端接收訊息後，是否回傳"></a>server 端接收訊息後，是否回傳</h4><p>雙向連線環境建立完後，開啟瀏覽器 index.html 。然後在 console 環境中，輸入 <code>ws.send(&#39;hello&#39;)</code>，來測試。Server 是否有接收到資料(console 環境內看)。</p><a href="/2020/04/09/WebSocket-base/w3.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/04/09/WebSocket-base/w3.png" title="This is an image"></a><h2 id="將-WebSocket-部署至-Heroku"><a href="#將-WebSocket-部署至-Heroku" class="headerlink" title="將 WebSocket 部署至 Heroku"></a>將 WebSocket 部署至 Heroku</h2><p>利用 Git 的方式上傳至 Heroku</p><h3 id="Heroku-註冊並開啟新-app"><a href="#Heroku-註冊並開啟新-app" class="headerlink" title="Heroku 註冊並開啟新 app"></a>Heroku 註冊並開啟新 app</h3><p><a href="https://signup.heroku.com/" target="_blank" rel="noopener">註冊網址</a></p><p>註冊後登入，從右上 New 選單中， Create new app 建立。</p><h3 id="安裝-Heroku-CLI"><a href="#安裝-Heroku-CLI" class="headerlink" title="安裝 Heroku CLI"></a>安裝 Heroku CLI</h3><p><a href="https://devcenter.heroku.com/articles/heroku-cli" target="_blank" rel="noopener">Heroku CLI</a></p><p>到上面網站，依照本身電腦系統下載後安裝。</p><h3 id="建立-Git-環境"><a href="#建立-Git-環境" class="headerlink" title="建立 Git 環境"></a>建立 Git 環境</h3><p>切換到要上傳的專案資料夾下，輸入以下指令：</p><p>// 初始化資料夾  </p><p><code>git init</code></p><p>// 打包檔案  </p><p><code>git add .</code></p><p>// 寫註解  </p><p><code>git commit -m &quot;upload&quot;</code></p><p>// 登入 Heroku，開啟登入頁面，輸入帳密  </p><p><code>heroku login</code></p><p>// 設定連結的 heroku 遠端主機<br><code>heroku git:remote -a (Heroku 上 的 App 名稱)</code></p><p>e.g.</p><p><code>heroku git:remote -a xxx</code></p><p>// 上傳至 heroku  </p><p><code>git push heroku master</code></p><h3 id="上傳前程式調整-上述的範例"><a href="#上傳前程式調整-上述的範例" class="headerlink" title="上傳前程式調整(上述的範例)"></a>上傳前程式調整(上述的範例)</h3><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">  // 加上此行，node 後面要對應 main 屬性的值</span><br><span class="line">  &quot;start&quot;: &quot;node server.js&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><h4 id="server-js"><a href="#server-js" class="headerlink" title="server.js"></a>server.js</h4><p>頁面加上 WebSocket test!! 字樣</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">加上</span><br><span class="line"></span><br><span class="line">//引用&apos;http&apos;模組</span><br><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">// 建立一個server並指定他的頁面資訊，並監聽 port ，開啟後在 console 中提示</span><br><span class="line">const server = http.createServer((req, res) =&gt; &#123;</span><br><span class="line">    // 進入網站首頁顯示 index</span><br><span class="line">    if (req.url == &apos;/&apos;) &#123;</span><br><span class="line">        // 設定 response header</span><br><span class="line">        res.writeHead(200, &#123;</span><br><span class="line">            &apos;Context-Type&apos;: &apos;text/html&apos;</span><br><span class="line">        &#125;);</span><br><span class="line">        // 回應內容</span><br><span class="line">        res.write(&apos;&lt;h1&gt;WebSocket test!!&lt;/h1&gt;&apos;);</span><br><span class="line">        // 送出 response</span><br><span class="line">        res.end();</span><br><span class="line">        // 不是的話顯示 404 例如 /abc/ </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        res.writeHead(200, &#123;</span><br><span class="line">            &apos;Context-Type&apos;: &apos;text/html&apos;</span><br><span class="line">        &#125;);</span><br><span class="line">        res.write(&apos;&lt;h1&gt;404&lt;/h1&gt;&apos;);</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(PORT, () =&gt; console.log(`Listening on $&#123;PORT&#125;`))</span><br><span class="line"></span><br><span class="line">// 註解以下程式</span><br><span class="line"></span><br><span class="line">// 建立 express 的物件，並監聽 port ，開啟後在 console 中提示</span><br><span class="line">// const server = express().listen(PORT, () =&gt; console.log(`Listening on $&#123;PORT&#125;`))</span><br></pre></td></tr></table></figure></div><h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><p>將原本連結的網址調整成 Heroku 給的網站</p><p><code>let ws = new WebSocket(&#39;ws://appname.herokuapp.com/&#39;)</code></p><p>然後在瀏覽器開啟 index.html，打開 console。看是否有 open connection 字樣，確認是否成功。</p><h3 id="ps"><a href="#ps" class="headerlink" title="ps:"></a>ps:</h3><p>因為 WebSocket 只連線一次就可以雙向傳輸，因此開發人員工具的 Network 看不到 Request 的資料，但是傳遞過程可以透過第一次要求連接時的 Request 中觀察。</p><p>關於 WebSocket 傳送資料時，除了字串外還可以使用 USVString、ArrayBuffer、Blod、ArrayBufferView …，另外傳送 JSON 時，記得在 send 中做 JSON.stringify ，接收到時再用 JSON.parse 轉成物件處理。</p><p>參考：<br><a href="https://medium.com/enjoy-life-enjoy-coding/heroku-%E6%90%AD%E9%85%8D-git-%E5%9C%A8-heroku-%E4%B8%8A%E9%83%A8%E7%BD%B2%E7%B6%B2%E7%AB%99%E7%9A%84%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E5%AD%B8-bf4fd6f998b8" target="_blank" rel="noopener">Heroku | 搭配 Git 在 Heroku 上部署網站的手把手教學</a><br><a href="https://medium.com/enjoy-life-enjoy-coding/javascript-websocket-%E8%AE%93%E5%89%8D%E5%BE%8C%E7%AB%AF%E6%B2%92%E6%9C%89%E8%B7%9D%E9%9B%A2-34536c333e1b" target="_blank" rel="noopener">JavaScript | WebSocket 讓前後端沒有距離</a><br><a href="https://www.npmjs.com/package/ws" target="_blank" rel="noopener">https://www.npmjs.com/package/ws</a><br>六角學院課程</p>]]></content>
      
      
      <categories>
          
          <category> WebSocket </category>
          
          <category> Heroku </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebSocket </tag>
            
            <tag> Heroku </tag>
            
            <tag> GIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hamburger_menu 介紹</title>
      <link href="/2020/03/26/hamburger-menu/"/>
      <url>/2020/03/26/hamburger-menu/</url>
      
        <content type="html"><![CDATA[<h1 id="hamburger-menu"><a href="#hamburger-menu" class="headerlink" title="hamburger_menu"></a>hamburger_menu</h1> <a href="/2020/03/26/hamburger-menu/hamburger_menu.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/03/26/hamburger-menu/hamburger_menu.png" title="This is an image"></a><p>漢堡式選單常運用在小尺寸螢幕的機器上，可以保持畫面簡單、選單設計彈性等等優點。</p><p>但有時會產生操作上的問題，例如不夠直覺、操作麻煩等問題。應該依照實際情況跟頁籤式選單交互或配合使用。</p><p>這裏介紹一下，如何實作漢堡式選單。這裡是將選單列或導覽列切換成漢堡式選單，固定在畫面左上角，可以依照情況調整。</p><p>首先處理  HTML 部分 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt; </span><br><span class="line">&lt;!--選單--&gt;</span><br><span class="line">&lt;ul class=&quot;menu-s&quot;&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#profile&quot;&gt;profile&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#resume&quot;&gt;resume&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#skill&quot;&gt;skills&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#portfolio&quot;&gt;portfolio&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#contact&quot;&gt;contact&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;!--圖示--&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;showmenu&quot;&gt;</span><br><span class="line">    menu</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></div><p>接著是 CSS  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">// 漢堡選單</span><br><span class="line">// 圖示，一開始隱藏 display: none;</span><br><span class="line">.showmenu &#123;</span><br><span class="line">    color: #69CA62;</span><br><span class="line">    display: none;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 30px;</span><br><span class="line">    left: 25px;</span><br><span class="line">    // 置於其他元素上</span><br><span class="line">    z-index: 9;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    .fa-bars &#123;</span><br><span class="line">        font-size: 35px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 選單</span><br><span class="line">.menu-s &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    // display: none;</span><br><span class="line">    width: 100%;</span><br><span class="line">    // border-bottom: 1px solid #777;</span><br><span class="line">    // padding: 10px 20px;</span><br><span class="line">    text-transform: uppercase;</span><br><span class="line">    // background-color: rgba(255, 255, 255, 0.8);</span><br><span class="line">    // 置於其他元素上</span><br><span class="line">    z-index: 9;</span><br><span class="line">    list-style-type: none;</span><br><span class="line">    li &#123;</span><br><span class="line">        line-height: 2em;</span><br><span class="line">    &#125;</span><br><span class="line">    a &#123;</span><br><span class="line">        color: #69CA62;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 當螢幕尺寸小於 768px 時</span><br><span class="line">@media (max-width: 768px) &#123;</span><br><span class="line">    .menu-s &#123;</span><br><span class="line">    /* 選單出現*/</span><br><span class="line">        display: block;</span><br><span class="line">    /*隱藏選單開始*/</span><br><span class="line">        max-height: 0px;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    /*隱藏選單結束*/</span><br><span class="line">        transition: max-height 2.3s;</span><br><span class="line">        margin-top: 1px;</span><br><span class="line">    /*絕對定位疊在網頁上*/</span><br><span class="line">        position: fixed;</span><br><span class="line">        z-index: 9;</span><br><span class="line">    /*header 80px+1px boder 線條*/</span><br><span class="line">        top: 81px;</span><br><span class="line">        left: 0;</span><br><span class="line">        right: 0;</span><br><span class="line">    // background: #69CA62;</span><br><span class="line">    &#125;</span><br><span class="line">    // .menu-s li&#123;</span><br><span class="line">    // border-bottom: 1px dashed #69CA62;</span><br><span class="line">    // &#125;</span><br><span class="line">    .menu-s li a&#123;</span><br><span class="line">        transition: all 0.2s;</span><br><span class="line">    &#125;</span><br><span class="line">    .menu-s li a:hover&#123;</span><br><span class="line">        background: gray;</span><br><span class="line">        color: #fff;</span><br><span class="line">    &#125;</span><br><span class="line">    // 顯示圖示</span><br><span class="line">    .showmenu&#123;</span><br><span class="line">        display: block;</span><br><span class="line">        float: right;</span><br><span class="line">        margin: 1em;</span><br><span class="line">    &#125;</span><br><span class="line">    /*jQ點擊後動態在 body 加上 class 影響選單高度*/</span><br><span class="line">    .menu-show .menu-s &#123;</span><br><span class="line">        max-height: 500px</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>最後是 jQuery</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function () &#123; </span><br><span class="line">  $(&apos;.showmenu&apos;).on(&apos;click&apos;, function (e) &#123;</span><br><span class="line">    // 讓原來 &lt;a&gt; 效果失效</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    $(&apos;body&apos;).toggleClass(&apos;menu-show&apos;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/* toggleClass()可以用來為匹配的元素進行新增或是刪除CSS類別。實際運作時有點類似開關一樣。如果某個類別存在，那就刪除他，若是不存在那就新增。 */</span><br></pre></td></tr></table></figure></div><p>以上是程式碼部分，下列網址是 demo。</p><p><a href="https://codepen.io/jw103/pen/xxGQPOZ?editors=1111" target="_blank" rel="noopener">https://codepen.io/jw103/pen/xxGQPOZ?editors=1111</a></p><p>另外也可以使用 Bootstrap 4 的模板來做。</p><p>參考：<br><a href="https://a-cart.com.tw/blog/blog_detail/204" target="_blank" rel="noopener">https://a-cart.com.tw/blog/blog_detail/204</a><br><a href="https://w3c.hexschool.com/blog/5054d6fe" target="_blank" rel="noopener">https://w3c.hexschool.com/blog/5054d6fe</a>  </p>]]></content>
      
      
      <categories>
          
          <category> JavaSricpt </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hamburger_menu </tag>
            
            <tag> JavaSricpt </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>base64 轉檔加快圖片載入</title>
      <link href="/2020/03/19/base64image/"/>
      <url>/2020/03/19/base64image/</url>
      
        <content type="html"><![CDATA[<h1 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h1><p>可將圖片轉成字串形式再引用，以加快網頁載入速度。適合容量較小的圖檔。</p><p>轉檔網站：</p><p><a href="https://www.base64-image.de" target="_blank" rel="noopener">https://www.base64-image.de</a></p><p>將圖片拖曳網頁上或是選取圖片檔案，轉檔後。按下 show code 按鈕，會顯示引用方式。即可引用。</p><p>參考：<br><a href="https://cythilya.github.io/2018/07/26/base64-images/" target="_blank" rel="noopener">https://cythilya.github.io/2018/07/26/base64-images/</a><br><a href="https://sofree.cc/base64-images/" target="_blank" rel="noopener">https://sofree.cc/base64-images/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> image </tag>
            
            <tag> efficacy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>簡單介紹 maskmap 查詢網站</title>
      <link href="/2020/02/21/maskmap/"/>
      <url>/2020/02/21/maskmap/</url>
      
        <content type="html"><![CDATA[<h1 id="簡單介紹口罩查詢地圖製作"><a href="#簡單介紹口罩查詢地圖製作" class="headerlink" title="簡單介紹口罩查詢地圖製作"></a>簡單介紹口罩查詢地圖製作</h1><p>因為看到網路上有相關網站製作的教學，就試著做了一個簡易的查詢網站。</p><h2 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h2><p>模板是使用教學提供的，沒有做什麼變動。<br>使用 vue create 來建立專案</p><h3 id="Vue-CLI-4-2"><a href="#Vue-CLI-4-2" class="headerlink" title="Vue CLI 4.2"></a>Vue CLI 4.2</h3><p>使用 vue create 來建立專案</p><h3 id="套件"><a href="#套件" class="headerlink" title="套件"></a>套件</h3><h4 id="leafletjs"><a href="#leafletjs" class="headerlink" title="leafletjs"></a>leafletjs</h4><p>用來建立免費地圖 OSM 的地標資訊</p><p><code>npm install --save leaflet</code></p><p>記得載入 css 樣式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&apos;stylesheet&apos; href=&apos;https://unpkg.com/leaflet@1.5.1/dist/leaflet.css&apos;&gt;</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.6.0/dist/leaflet.css&quot;</span><br><span class="line">  integrity=&quot;sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==&quot;</span><br><span class="line">  crossorigin=&quot;&quot;/&gt;</span><br></pre></td></tr></table></figure></div><p>載入套件</p><p>在要使用的檔案 <code>&lt;script&gt;&lt;/script&gt;</code> 標籤內</p><p><code>import L from &#39;leaflet&#39;</code></p><h4 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h4><p>處理 css 樣式</p><p><code>npm install --save bootstrap@4.0.0-beta.3</code> </p><p>安裝完後檔案路徑<br><code>node_modules/bootstrap/scss/bootstrap</code></p><p>載入套件</p><p>在要使用的檔案 <code>&lt;style lang=&quot;scss&quot;&gt;&lt;/style&gt;</code> 標籤內</p><p><code>@import &#39;bootstrap/scss/bootstrap&#39;;</code></p><h4 id="axios-vue-axios"><a href="#axios-vue-axios" class="headerlink" title="axios vue-axios"></a>axios vue-axios</h4><p>處理 ajax 及 API 資料部分</p><p><code>npm install --save axios vue-axios</code></p><p>載入</p><p>在 main.js 加入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">import VueAxios from &apos;vue-axios&apos;</span><br><span class="line"> </span><br><span class="line">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure></div><h4 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h4><p><code>npm install — save jquery popper.js</code></p><p>載入  </p><p>在要使用的檔案 <code>&lt;script&gt;&lt;/script&gt;</code> 標籤內</p><p><code>import $ from &quot;jquery&quot;;</code></p><p>webpack 中設定<br>必須要在 webpack 執行時就去載入 jQuery ，修改<br>./build/webpack.base.conf.js，加入以下程式碼：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var webpack = require(&apos;webpack&apos;)</span><br><span class="line">接著在同一份檔案當中加入plugin設定</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#123;&#125;,</span><br><span class="line">  output: &#123;&#125;,</span><br><span class="line">  resolve: &#123;&#125;,</span><br><span class="line">  module: &#123;&#125;,</span><br><span class="line">  plugins: [new webpack.ProvidePlugin(&#123;</span><br><span class="line">   jQuery: &apos;jquery&apos;,</span><br><span class="line">   $: &apos;jquery&apos;,  </span><br><span class="line">   jquery: &apos;jquery&apos;</span><br><span class="line">&#125;)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="台灣縣市鄉鎮-JSON"><a href="#台灣縣市鄉鎮-JSON" class="headerlink" title="台灣縣市鄉鎮 JSON"></a>台灣縣市鄉鎮 JSON</h4><p>以下網址可下載台灣縣市鄉鎮資訊</p><p><a href="https://github.com/donma/TaiwanAddressCityAreaRoadChineseEnglishJSON" target="_blank" rel="noopener">https://github.com/donma/TaiwanAddressCityAreaRoadChineseEnglishJSON</a></p><p>載入  </p><p>在檔案的 <code>&lt;style lang=&quot;scss&quot;&gt;&lt;/style&gt;</code> 標籤內，加上</p><p><code>import cityName from &#39;./assets/CityCountyData.json&#39;</code></p><h4 id="藥局資訊-API"><a href="#藥局資訊-API" class="headerlink" title="藥局資訊 API"></a>藥局資訊 API</h4><p><a href="https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json" target="_blank" rel="noopener">https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json</a></p><h2 id="leafletjs-基本操作"><a href="#leafletjs-基本操作" class="headerlink" title="leafletjs 基本操作"></a>leafletjs 基本操作</h2><h3 id="建立地圖、圖標、訊息…等等"><a href="#建立地圖、圖標、訊息…等等" class="headerlink" title="建立地圖、圖標、訊息…等等"></a>建立地圖、圖標、訊息…等等</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;col-sm-9&quot;&gt;</span><br><span class="line">      &lt;div id=&quot;map&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 載入 leaflet 套件</span><br><span class="line">import L from &apos;leaflet&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;home&apos;,</span><br><span class="line">  data: () =&gt; (&#123;</span><br><span class="line">    osmMap: &#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;),</span><br><span class="line">mounted () &#123;</span><br><span class="line">// 新增並顯示地圖</span><br><span class="line">this.osmMap = L.map(&apos;map&apos;, &#123;</span><br><span class="line">      center: [25.03, 121.55],</span><br><span class="line">      zoom: 15</span><br><span class="line">    &#125;)</span><br><span class="line">// 載入圖層到地圖(不然地圖會是空白)</span><br><span class="line"> L.tileLayer(urlTemplate, options).addTo(map)</span><br><span class="line">    L.tileLayer(&apos;https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png?&#123;foo&#125;&apos;, &#123;</span><br><span class="line">      foo: &apos;bar&apos;,</span><br><span class="line">      attribution: &apos;Map data &amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/&quot;&gt;OpenStreetMap&lt;/a&gt; contributors, &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/2.0/&quot;&gt;CC-BY-SA&lt;/a&gt;&apos;,</span><br><span class="line">      maxZoom: 18</span><br><span class="line">    &#125;).addTo(this.osmMap)</span><br><span class="line">    // 加上圖標</span><br><span class="line">    // L.marker([25.0085455, 121.4594333]).addTo(this.osmMap)</span><br><span class="line">    // 加上圖標與訊息</span><br><span class="line">    // L.marker([</span><br><span class="line">      //   geometry.coordinates[1],</span><br><span class="line">      //   geometry.coordinates[0]</span><br><span class="line">      // ]).addTo(this.osmMap).bindPopup(</span><br><span class="line">      //   `&lt;strong&gt;$&#123;properties.name&#125;&lt;/strong&gt; &lt;br&gt;</span><br><span class="line">      //   口罩剩餘：&lt;strong&gt;成人 - $&#123;properties.mask_adult ? `$&#123;properties.mask_adult&#125; 個` : &apos;未取得資料&apos;&#125;/ 兒童 - $&#123;properties.mask_child ? `$&#123;properties.mask_child&#125; 個` : &apos;未取得資料&apos;&#125;&lt;/strong&gt;&lt;br&gt;</span><br><span class="line">      //   地址: &lt;a href=&quot;https://www.google.com.tw/maps/place/$&#123;properties.address&#125;&quot; target=&quot;_blank&quot;&gt;$&#123;properties.address&#125;&lt;/a&gt;&lt;br&gt;</span><br><span class="line">      //   電話: $&#123;properties.phone&#125;&lt;br&gt;</span><br><span class="line">      //   &lt;small&gt;最後更新時間: $&#123;properties.updated&#125;&lt;/small&gt;`, &#123; closeOnClick: false &#125;).openPopup()</span><br><span class="line">    // 多邊形</span><br><span class="line">    // L.polygon([</span><br><span class="line">    //   [22.992, 120.289],</span><br><span class="line">    //   [22.982, 120.299],</span><br><span class="line">    //   [22.970, 120.267],</span><br><span class="line">    //   [22.990, 120.267]</span><br><span class="line">    // ]).addTo(this.osmMap)</span><br><span class="line">    // 圓形</span><br><span class="line">    // L.circle(</span><br><span class="line">    //   [22.988, 120.220], // 圓心座標</span><br><span class="line">    //   1000, // 半徑（公尺）</span><br><span class="line">    //   &#123;</span><br><span class="line">    //     color: &apos;red&apos;, // 線條顏色</span><br><span class="line">    //     fillColor: &apos;#f03&apos;, // 填充顏色</span><br><span class="line">    //     fillOpacity: 0.5 // 透明度</span><br><span class="line">    //   &#125;</span><br><span class="line">    // ).addTo(this.osmMap)</span><br><span class="line">    // 獨立訊息</span><br><span class="line">    // L.popup()</span><br><span class="line">    //   .setLatLng([23.010, 120.289])</span><br><span class="line">    //   .setContent(&apos;獨立的訊息方塊。&apos;)</span><br><span class="line">    //   .openOn(this.osmMap)</span><br><span class="line">    // 連接到指定點</span><br><span class="line">    //this.osmMap.panTo([geometry.coordinates[1],   geometry.coordinates[0]]);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div><h3 id="刪除地標"><a href="#刪除地標" class="headerlink" title="刪除地標"></a>刪除地標</h3><p>OSM 是以圖層的概念來組成，地標會以圖層類型累加，因此地標數量過多會影響效能。所以在切換查詢地點時，最好要清除其他不需要顯示的地標。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">removeMarker () &#123;</span><br><span class="line">      this.osmMap.eachLayer((layer) =&gt; &#123;</span><br><span class="line">        if (layer instanceof L.Marker) &#123;</span><br><span class="line">          this.osmMap.removeLayer(layer)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></div><h3 id="改變地標樣式"><a href="#改變地標樣式" class="headerlink" title="改變地標樣式"></a>改變地標樣式</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const greenIcon = L.icon(&#123;</span><br><span class="line">        iconUrl: &apos;https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png&apos;,</span><br><span class="line">        iconSize: [25, 41],</span><br><span class="line">        iconAnchor: [12, 41],</span><br><span class="line">        popupAnchor: [1, -34],</span><br><span class="line">        shadowUrl: &apos;https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png&apos;,</span><br><span class="line">        shadowSize: [41, 41],</span><br><span class="line">        shadowAnchor: [12, 41]</span><br><span class="line">      &#125;)</span><br><span class="line">      const &#123; properties, geometry &#125; = item</span><br><span class="line">      L.marker([</span><br><span class="line">        geometry.coordinates[1],</span><br><span class="line">        geometry.coordinates[0]</span><br><span class="line">      ], &#123; icon: greenIcon &#125;).addTo(this.osmMap)</span><br></pre></td></tr></table></figure></div><h2 id="其他程式"><a href="#其他程式" class="headerlink" title="其他程式"></a>其他程式</h2><h3 id="載入藥局資訊"><a href="#載入藥局資訊" class="headerlink" title="載入藥局資訊"></a>載入藥局資訊</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const api = &apos;https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json&apos;</span><br><span class="line">    this.$http.get(api).then((Response) =&gt; &#123;</span><br><span class="line">      // console.log(Response)</span><br><span class="line">      this.data = Response.data.features</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></div><p>其他程式碼部分可參考</p><p><a href="https://github.com/Wcc723/wheremask" target="_blank" rel="noopener">https://github.com/Wcc723/wheremask</a></p><p>個人實作網站(有做小地方調整)<br><a href="https://jw310.github.io/maskmap/#/">https://jw310.github.io/maskmap/#/</a></p><p>參考：<br><a href="https://www.openstreetmap.org/" target="_blank" rel="noopener">https://www.openstreetmap.org/</a><br><a href="https://leafletjs.com/" target="_blank" rel="noopener">https://leafletjs.com/</a><br><a href="https://leafletjs.com/examples/quick-start/" target="_blank" rel="noopener">https://leafletjs.com/examples/quick-start/</a><br><a href="https://blog.gtwang.org/web-development/leaflet-open-source-javascript-library-for-mobile-friendly-interactive-maps/" target="_blank" rel="noopener">https://blog.gtwang.org/web-development/leaflet-open-source-javascript-library-for-mobile-friendly-interactive-maps/</a><br><a href="https://www.youtube.com/watch?v=pUizu62dlnY" target="_blank" rel="noopener">https://www.youtube.com/watch?v=pUizu62dlnY</a><br><a href="https://www.youtube.com/watch?v=7CXnNMVMXeo&amp;t=2s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=7CXnNMVMXeo&amp;t=2s</a><br>六角學院  </p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> Leafletjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPM 介紹</title>
      <link href="/2020/02/03/NPM/"/>
      <url>/2020/02/03/NPM/</url>
      
        <content type="html"><![CDATA[<h1 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h1><p>npm（全稱 Node Package Manager，即「node包管理器」）是Node.js 預設的、以 JavaScript 編寫的軟體套件管理系統。</p><h2 id="專案使用-npm"><a href="#專案使用-npm" class="headerlink" title="專案使用 npm"></a>專案使用 npm</h2><p>到專案資料夾下，輸入以下指令</p><p><code>$npm init</code></p><p>會新增 package.json 檔案紀錄套件安裝情況。</p><p>安裝套件</p><p><code>$sudo npm install express —save</code></p><p>ps. mac 有時要加 sudo  </p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>npm -v ：觀看 NPM 版本</p><p>npm init ：新增 package.json</p><p>npm install [模組名稱][參數]：安裝 NPM 模組，會根據 package.json 去下載安裝套件，放在 node_modules 資料夾。</p><p>安裝位置常用屬性如下：</p><p>-g：全域安裝，安裝資料夾位置  /usr/local/lib/node_modules。</p><p>–save：安裝模組及紀錄在 package.json 的 “dependencies” 中，並產生 node_modules 資料夾。  </p><p>–save-dev：安裝模組並寫入 package.json 的<br>“devDependencies”。</p><p>npm start(npm run start)：執行 package.json 裡的 scripts 中的 start 指令(express)。</p><p>npm list：顯示安裝的 NPM 列表。</p><p>npm uninstall [模組名稱]：刪除專案裡的 NPM。</p><p>版本號編碼</p><p>1.12.0     -1 主要版本號   -12 次要版本號  -0 bug 修正</p><h2 id="推薦套件"><a href="#推薦套件" class="headerlink" title="推薦套件"></a>推薦套件</h2><p>nodemon 套件：它會監視你的程式碼有無的任何更改並自動重新啟動服務，這時只要刷新你的瀏覽器就能看到改動，此外 nodemon 使用 npm 進行安裝，只需使用 nodemon 取代 node 執行你的程式碼，就能輕鬆的開發 node.js。</p><p><code>npm install nodemon -g</code></p><p>安裝於專案資料夾中  </p><p><code>npm install --save-dev nodemon</code></p><p>// 執行，網頁重新整理就會立即看出結果  </p><p><code>nodemon index.js</code></p><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><p>clone 別人的專案後，發現 package.json 有dependencies  NPM 列表，但沒有 node_modules 資料夾時，該下什麼指令來安裝該專案的 NPM 列表？</p><p><code>npm install</code></p><p>參考：<br><a href="https://medium.com/az-下筆記/webpack-前端打包工具-1-前置-c9380f688c1b" target="_blank" rel="noopener">https://medium.com/az-下筆記/webpack-前端打包工具-1-前置-c9380f688c1b</a><br><a href="https://tw.alphacamp.co/blog/npm-node-package-manager" target="_blank" rel="noopener">https://tw.alphacamp.co/blog/npm-node-package-manager</a><br><a href="https://medium.com/@hugh_Program_learning_diary_Js/javascript-進階-npm-abf96671c915" target="_blank" rel="noopener">https://medium.com/@hugh_Program_learning_diary_Js/javascript-進階-npm-abf96671c915</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs 簡單介紹</title>
      <link href="/2020/01/21/nodejs-base/"/>
      <url>/2020/01/21/nodejs-base/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js-簡單介紹"><a href="#Node-js-簡單介紹" class="headerlink" title="Node.js 簡單介紹"></a>Node.js 簡單介紹</h1><p>能夠在伺服器端運行 JavaScript 的開放原始碼、跨平台 JavaScript 執行環境。用 Google 的 v8 引擎開發。</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>到以下網站按照自己的作業系統下載，安裝  </p><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a>  </p><p>要確認是否安裝成功的話，到終端機或命令提示字元下<br>輸入 <code>node –version</code><br>看是否有顯示安裝版本。</p><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>module 是一些由 Javascript 編寫而成的功能集合, 它分別放在不同的 Javascript 檔案，可被匯入、應用。</p><p>分為三大類</p><p>1.Core Modules (原生模組)<br>2.Local Modules (自建模組)<br>3.Third Party Modules (第三方模組)</p><h3 id="常用原生模組有："><a href="#常用原生模組有：" class="headerlink" title="常用原生模組有："></a>常用原生模組有：</h3><p><a href="https://nodejs.org/api/http.html" target="_blank" rel="noopener">http</a>：建立並使用 http server 的一些類別，方法，及事件。<br><a href="https://nodejs.org/api/url.html" target="_blank" rel="noopener">url</a>：解析 url 的方法。<br><a href="https://nodejs.org/api/querystring.html" target="_blank" rel="noopener">querystring</a>：處理由 client 端傳來 querystring 的方法。<br><a href="https://nodejs.org/api/path.html" target="_blank" rel="noopener">path</a>：處理檔案或資料夾路徑的方法。<br><a href="https://nodejs.org/api/fs.html" target="_blank" rel="noopener">fs</a>：檔案的存取及操作的類別，方法及事件。<br><a href="https://nodejs.org/api/util.html" target="_blank" rel="noopener">util</a>：提供程序者使用的效能函式。  </p><h3 id="自建模組"><a href="#自建模組" class="headerlink" title="自建模組"></a>自建模組</h3><p>基本上一個 Javascript 檔就是一個模組。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let data = 2;</span><br><span class="line"></span><br><span class="line">module.exports = data;     // 要載入的資料</span><br><span class="line">// 也可提供物件型態</span><br><span class="line">module.exports = &#123;</span><br><span class="line">     a: 2;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><h3 id="如何載入"><a href="#如何載入" class="headerlink" title="如何載入"></a>如何載入</h3><p><code>const module = require(&#39;module_name&#39;);</code></p><p>e.g.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line"> </span><br><span class="line">let server = http.createServer(function(req, res)&#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;); </span><br><span class="line">server.listen(8080);</span><br></pre></td></tr></table></figure></div><p>載入其他自建模組</p><p>有兩個 js 檔，分別為 app 及 data。由 app.js 載入 data.js 的 data。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.js</span><br><span class="line"></span><br><span class="line">const content = require(&apos;./data&apos;)  // 載入模組同層下的 js</span><br><span class="line">let a = 1;</span><br><span class="line">console.log(a);</span><br><span class="line">console.log(content);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data.js</span><br><span class="line"></span><br><span class="line">let data = 2;</span><br><span class="line"></span><br><span class="line">module.exports = data;    // 要載入的資料</span><br></pre></td></tr></table></figure></div><p>另一種模組呼叫方式(不能跟 module.exports 混用，module.exports 會覆寫 exports 的東西)。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.js</span><br><span class="line"></span><br><span class="line">var content = require(&apos;./data&apos;)  // 載入模組同層下的 js</span><br><span class="line">var a = 1;</span><br><span class="line">console.log(a);</span><br><span class="line">console.log(content);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data.js</span><br><span class="line"></span><br><span class="line">exports.data = 2;</span><br><span class="line">exports.bark = function() &#123;</span><br><span class="line">    return &apos;bark!!&apos;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><h2 id="node-js-核心模組-http-使用"><a href="#node-js-核心模組-http-使用" class="headerlink" title="node.js 核心模組 http 使用"></a>node.js 核心模組 http 使用</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line">http.createServer(function (request, response) &#123;  // 開啟 web 伺服器</span><br><span class="line">      response.writeHead(200, &#123; &quot;context-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">      response.write(&apos;hello&apos;);</span><br><span class="line">      response.end();</span><br><span class="line">      console.log(request.url)  // 可以撈到使用者造訪的網站的網址</span><br><span class="line">&#125;).listen(8080);</span><br></pre></td></tr></table></figure></div><h2 id="node-js-核心模組-path-使用"><a href="#node-js-核心模組-path-使用" class="headerlink" title="node.js 核心模組 path 使用"></a>node.js 核心模組 path 使用</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">// 抓目錄路徑</span><br><span class="line">console.log(path.dirname(&apos;xx/yy/zz.js&apos;))  // xx/yy</span><br><span class="line">// 路徑合併</span><br><span class="line">console.log(path.join(__driname,’/xx’));  // 將檔案路徑跟 /xx 合併</span><br><span class="line">// 抓檔名</span><br><span class="line">console.log(path.basename(&apos;xx/yy/zz.js&apos;));  // zz.js</span><br><span class="line">// 抓副檔名</span><br><span class="line">console.log(path.extname(&apos;xx/yy/zz.js&apos;));   // .js</span><br><span class="line">// 分析路徑</span><br><span class="line">console.log(path.parse(&apos;xx/yy/zz.js&apos;));   //   &#123; root: &apos;/&apos;, dir: &apos;/xx/yy&apos;, base: &apos;zz.js&apos; ext: &apos;.js&apos; name: &apos;zz&apos;&#125;</span><br><span class="line"></span><br><span class="line">__dirname  // 取得當下資料夾的目錄</span><br><span class="line">__filename  //  取得當下資料的檔名</span><br></pre></td></tr></table></figure></div><h2 id="node-js-核心模組-fs-使用"><a href="#node-js-核心模組-fs-使用" class="headerlink" title="node.js 核心模組 fs 使用"></a>node.js 核心模組 fs 使用</h2><h3 id="非同步讀取"><a href="#非同步讀取" class="headerlink" title="非同步讀取"></a>非同步讀取</h3><p><code>fs.readFile(fileName [,options], callback)</code></p><p>fileName: 檔案的完整路徑及檔名，格式字串。<br>options: options 可能是一個物件或字串，包含”編碼”及”flag”。這裡預設的編碼是 utf8 , flag 是 “r”。可不加。<br>call back: 是帶兩個參數的 function，err 及 file data，當我們執行 readFile 完成時, 要做的事, 例如: 回傳 file data。  </p><p>e.g.</p><p>test.txt</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello!</span><br></pre></td></tr></table></figure></div><p>app.js</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line"> </span><br><span class="line">fs.readFile(&apos;test.txt&apos;, function (err, data) &#123;</span><br><span class="line">    if (err) throw err; </span><br><span class="line">    console.log(data.toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="同步讀取檔案"><a href="#同步讀取檔案" class="headerlink" title="同步讀取檔案"></a>同步讀取檔案</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;); </span><br><span class="line">let data = fs.readFileSync(&apos;test.txt&apos;, &apos;utf8&apos;);</span><br><span class="line">console.log(data);</span><br></pre></td></tr></table></figure></div><h3 id="寫入檔案"><a href="#寫入檔案" class="headerlink" title="寫入檔案"></a>寫入檔案</h3><p>如果檔案存在，會覆寫原本檔案資料；否則會自動新增檔案並寫入資料。</p><p><code>fs.writeFile(filename, data[, options], callback)</code></p><p>fileName: 檔案的完整路徑及檔名，格式字串。<br>data: 要寫入的檔案內容。<br>options: options 可能是一個物件或字串，包含”編碼”及”flag”。這裡預設的編碼是 utf8 , flag是 “w”。<br>call back: 只帶一個錯誤參數err的function，當我們執行writeFile完成時, 要做的事。例如: 寫入成功的訊息顯示；失敗時，丟出err。  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line"> </span><br><span class="line">fs.writeFile(&apos;test.txt&apos;, &apos;您好嗎?&apos;, function (err) &#123;</span><br><span class="line">    if (err)</span><br><span class="line">        console.log(err);</span><br><span class="line">    else</span><br><span class="line">        console.log(&apos;Write operation complete.&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="新增內容"><a href="#新增內容" class="headerlink" title="新增內容"></a>新增內容</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line"> </span><br><span class="line">fs.appendFile(&apos;test.txt&apos;, &apos;我很好！&apos;, function (err) &#123;</span><br><span class="line">    if (err)</span><br><span class="line">        console.log(err);</span><br><span class="line">    else</span><br><span class="line">        console.log(&apos;Append operation complete.&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="開啟檔案"><a href="#開啟檔案" class="headerlink" title="開啟檔案"></a>開啟檔案</h3><p><code>fs.open(path, flags[, mode], callback)</code></p><p>path: 檔案的完整路徑及檔名，格式字串。<br>flag: 用 flag 代表操作行為。<br>mode: mode 代表文件的權限，預設為 0666 代表可讀可寫。<br>call back: 是帶兩個參數的function，err及file data，當我們執行open完成時, 要做的事, 例如: 打開成功的訊息顯示；失敗時，丟出err。  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line"> </span><br><span class="line">fs.open(&apos;test.txt&apos;, &apos;r+&apos;, function (err,fd) &#123;</span><br><span class="line">    if (err) throw err;</span><br><span class="line">   console.log(&apos;success!&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="開啟時讀取"><a href="#開啟時讀取" class="headerlink" title="開啟時讀取"></a>開啟時讀取</h3><p><code>fs.read(fd, buffer, offset, length, position, callback)</code></p><p>fd: 透過 fs.open() 方法返回的文件描述符。<br>buffer: 數據寫入的緩衝區。<br>offset: 緩衝區寫入的寫入偏移量。<br>length: 要從文件中讀取的字元數。<br>position: 文件讀取的起始位置，如果 position 的值為null，則會從當前文件游標的位置讀取。<br>callback: 回呼函式，有三個參數err, bytesRead, buffer。<br>err 為錯誤訊息， bytesRead 表示讀取的字元數，buffer 為緩衝區對象。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line"> </span><br><span class="line">fs.open(&apos;test.txt&apos;, &apos;r&apos;, function (err, fd) &#123;</span><br><span class="line"> </span><br><span class="line">    if (err) &#123;</span><br><span class="line">        return console.error(err);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    let buffr = new Buffer(1024);</span><br><span class="line"> </span><br><span class="line">    fs.read(fd, buffr, 0, buffr.length, 0, function (err, bytes) &#123;</span><br><span class="line"> </span><br><span class="line">        if (err) throw err;</span><br><span class="line"> </span><br><span class="line">        // Print only read bytes to avoid junk.</span><br><span class="line">        if (bytes &gt; 0) &#123;</span><br><span class="line">            console.log(bytes+&quot; 字元被讀取&quot;);</span><br><span class="line">            console.log(buffr.slice(0, bytes).toString());</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        // Close the opened file.</span><br><span class="line">        fs.close(fd, function (err) &#123;</span><br><span class="line">            if (err) throw err;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="刪除檔案"><a href="#刪除檔案" class="headerlink" title="刪除檔案"></a>刪除檔案</h3><p><code>fs.unlink(path, callback);</code></p><p>path: 檔案路徑。<br>callback: 只帶一個錯誤參數err的function，當我們執行unlink完成時, 要做的事。例如: 刪除成功的訊息顯示；失敗時，丟出err。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line"> </span><br><span class="line">fs.unlink(&apos;test.txt&apos;, function () &#123;</span><br><span class="line">    console.log(&apos;已經刪除檔案!&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h2 id="網址規則"><a href="#網址規則" class="headerlink" title="網址規則"></a>網址規則</h2><a href="/2020/01/21/nodejs-base/nodejs.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/01/21/nodejs-base/nodejs.png" title="This is an image"></a>  <a href="/2020/01/21/nodejs-base/nodejs2.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/01/21/nodejs-base/nodejs2.png" title="This is an image"></a><h3 id="router-路由"><a href="#router-路由" class="headerlink" title="router 路由"></a>router 路由</h3><p><a href="https://www.google.com/search?q=google&amp;oq=google&amp;aqs=chrome..69i57j0l2j69i60l3.6463j0j7&amp;sourceid=chrome&amp;ie=UTF-8" target="_blank" rel="noopener">https://www.google.com/search?q=google&amp;oq=google&amp;aqs=chrome..69i57j0l2j69i60l3.6463j0j7&amp;sourceid=chrome&amp;ie=UTF-8</a></p><p>http：網路協定、https 加密協定<br>www(子網域):根據服務不同來設定不同的。例 mail、cloud 之類。<br>domain(主網域)：google.com<br>路徑：/search，用「/」作為層級或不同目錄的區隔，可能包含目錄、頁面或檔案名稱<br>?：以「?」為開頭與前面的部分分開，後面的內容稱為參數。彼此之間不具階層關係。<br>參數(query)：q，參數之間以「&amp;」分隔，參數名稱與值之間再以「=」分開。</p><h2 id="Web-應用框架-處理底層問題-express"><a href="#Web-應用框架-處理底層問題-express" class="headerlink" title="Web 應用框架(處理底層問題): express"></a>Web 應用框架(處理底層問題): express</h2><p>整合 資料庫<br>—firebase<br>—mongo<br>—mysql  </p><h3 id="安裝-1"><a href="#安裝-1" class="headerlink" title="安裝"></a>安裝</h3><p><code>npm init</code><br><code>npm install express —save</code>  </p><h3 id="開啟-Web-伺服器"><a href="#開啟-Web-伺服器" class="headerlink" title="開啟 Web 伺服器"></a>開啟 Web 伺服器</h3><p>建立一個 app.js 檔</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cosnt express = require(&apos;express&apos;);  // 載入模組</span><br><span class="line">const app = express();     // 取得功能</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;,function(req, res)&#123;    // 首頁</span><br><span class="line">  //res.send(&apos;1234&apos;);</span><br><span class="line">  res.send(&apos;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;hi!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&apos;/user&apos;,function(req, res)&#123;    // user 頁面</span><br><span class="line">  //res.send(&apos;1234&apos;);</span><br><span class="line">  res.send(&apos;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;2&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 監聽</span><br><span class="line">var port = process.env.PORT || 3000;   </span><br><span class="line">app.listen(port);</span><br></pre></td></tr></table></figure></div><h3 id="路由設計"><a href="#路由設計" class="headerlink" title="路由設計"></a>路由設計</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/user/edit-profile&apos;,function(req,res)&#123;</span><br><span class="line">    // res.send(&apos;1234&apos;);</span><br><span class="line">    res.send(&apos;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;profile&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&apos;/user/edit-photo&apos;,function(req,res)&#123;</span><br><span class="line">    // res.send(&apos;1234&apos;);</span><br><span class="line">    res.send(&apos;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;photo&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="取得指定路徑-params-物件資料"><a href="#取得指定路徑-params-物件資料" class="headerlink" title="取得指定路徑 params (物件資料)"></a>取得指定路徑 params (物件資料)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">app.get(&apos;/user/:name/&apos;,function(req,res)&#123;    // :name 取得 name 資料(隨機輸入)</span><br><span class="line">    var myName = req.params.name;</span><br><span class="line">//app.get(&apos;/user/:name/:data&apos;,function(req,res)&#123;   //  輸入 user/tom/1081024 </span><br><span class="line">                                                                     //   回傳 &#123;name: &apos;1234&apos;, data: ’1081024&apos;&#125;</span><br><span class="line">//var myName = req.params;</span><br><span class="line">    console.log(myName);</span><br><span class="line">    if(myName !== &apos;tom&apos;)&#123;</span><br><span class="line">        res.send(&apos;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;&apos;+&apos;查無此人&apos;+&apos;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&apos;) // 網頁輸出</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        res.send(&apos;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;&apos;+myName+&apos;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&apos;/user/edit-photo&apos;,function(req,res)&#123;</span><br><span class="line">    // res.send(&apos;1234&apos;);</span><br><span class="line">    res.send(&apos;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;photo&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 監聽 port</span><br><span class="line">var port = process.env.PORT || 3000;</span><br><span class="line">app.listen(port);</span><br></pre></td></tr></table></figure></div><p>參考：<br><a href="https://ithelp.ithome.com.tw/articles/10184550" target="_blank" rel="noopener">Node.JS - 30 天入門學習筆記系列</a><br><a href="https://www.hexschool.com/courses/nodejs.html" target="_blank" rel="noopener">六角學院課程</a></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 介紹</title>
      <link href="/2020/01/16/webpack-base/"/>
      <url>/2020/01/16/webpack-base/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><p>webpack 在處理整個專案時，它會在內部建立一個依賴的關係圖，<br>裡面記錄著每個頁面所需要用到的模組，並將每個模組綑綁成一個或多個來使用。簡單來說就是可以幫我們打包所有用到的 JavaScript 、SASS … 等檔案，編譯後讓瀏覽器可讀取。另一個工具 gulp 跟 webpack 的差異在一個是協助自動化，另外一個是協助前端打包的。<br>gulp 比較偏向命令式的編寫設定，也就是說所有的編譯動作的邏輯都要自己編寫，webpack 就偏向設定。</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>首先需要用 npm 安裝 webpack 與 webpack-dev-server, 如果你第一次裝，可以用 -g 安裝，以便在任何地方都可以使用該指令：</p><p>webpack //打包工具<br>webpack-dev-server //即時產生一個 server 看執行結果  </p><p><code>npm install -g webpack webpack-dev-server</code>  </p><p>接著安裝指令包 </p><p><code>npm install webpack-cli -g</code></p><h2 id="專案使用"><a href="#專案使用" class="headerlink" title="專案使用"></a>專案使用</h2><p>1.建立專案資料夾 </p><p>2.建立 NPM (參照 NPM 文件，記得移動到專案資料夾的目錄)</p><p> <code>npm init</code></p><p> 按照資訊設定，產生 package.json 內容會像以下</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;name&quot;: &quot;my-project&quot;,</span><br><span class="line"> &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line"> &quot;description&quot;: &quot;this is my project&quot;,</span><br><span class="line"> &quot;main&quot;: &quot;app.js&quot;,</span><br><span class="line"> &quot;repository&quot;: &#123;</span><br><span class="line">   &quot;type&quot;: &quot;git&quot;</span><br><span class="line">   &quot;url&quot;: &quot;http://github.com/npm/npm.git&quot;</span><br><span class="line"> &#125;,</span><br><span class="line"> &quot;scripts&quot;: &#123;</span><br><span class="line">   &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line"> &#125;,</span><br><span class="line"> &quot;author&quot;: &quot;&quot;,</span><br><span class="line"> &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>若想快速設定可用 <code>npm init -y</code>。設定結束後，會產生  package.json(設定紀錄檔)。</p><p> scripts 屬性可以自訂指令名稱及執行指令，設定完後，輸入<br> <code>npm run 指令名稱</code> 就可以執行了。</p><p>建議可在 package.json 加入以下  webpack-dev-server   scripts</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;webpack-dev-server --devtool eval --progress --colors --content-base build&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></div><p>–devtool eval: 將把 source 加到我的 code<br>–progress 與 –colors： 反應現今程序執行狀況<br>–content-base build： 將 build 裡的 index.html 作為啟始頁</p><p>安裝 webpack 套件在專案資料夾裡：<br><code>npm install webpack webpack-cli --save-dev</code></p><p>3.用 NPM 安裝要使用的套件。安裝後的套件資訊，也會記錄在package.json 內。 </p><p>紀錄的訊息會像是：</p><p>開發的時候會用到的套件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line"> &quot;webpack&quot;: &quot;^4.18.0&quot;</span><br><span class="line"> &quot;babel-eslint&quot;: &quot;^10.0.1&quot;,</span><br><span class="line"> &quot;eslint&quot;: &quot;^5.16.0&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><p>上線發佈後依然需要用到的套件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line"> &quot;axios&quot;: &quot;^0.19.0&quot;,</span><br><span class="line"> &quot;bootstrap&quot;: &quot;^4.3.1&quot;,</span><br><span class="line"> &quot;jquery&quot;: &quot;^3.4.1&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><p>package.json 可以手動加入也可自動加入。<br>要自動加入的指令是 <code>--save-dev</code> ，在套件安裝時加上。  </p><p>e.g.<br><code>npm install webpack webpack-cli --save-dev</code> </p><p>4.建立 webpack.config.js 檔案，用來當作 webpack 的設定檔，檔名也不能亂取。  </p><p>檔案內容：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    //webpack打包的路徑及對象， index.js</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index: &apos;./index.js&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        //這裡是打包後的檔案名稱</span><br><span class="line">        filename: &apos;bundle.js&apos;,</span><br><span class="line">        //打包後的路徑，這裡使用 path 模組的 resolve() 取得絕對位置，也就是目前專案的根目錄</span><br><span class="line">        path: path.resolve(&apos;./&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></div><h2 id="使用-loader"><a href="#使用-loader" class="headerlink" title="使用 loader"></a>使用 loader</h2><p>告訴 webpack，該如何處理匯入的檔案(編譯打包)，通常是 Javascript 但 webpack 不限於處理 Javascript，其他像是 Sass，圖片等也可處理，只要提供可處理的 loader。loader 的設定會寫在 module 的 rules 中。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    //如果有一個以上的檔案需要打包，可以傳陣列給entry</span><br><span class="line">    entry: [&apos;./index.js&apos;, &apos;./app.jsx&apos;],</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &apos;bundle.js&apos;,</span><br><span class="line">        path: path.resolve(__dirname, &apos;./&apos;),</span><br><span class="line">    &#125;,</span><br><span class="line">    //將loader的設定寫在module的rules屬性中</span><br><span class="line">    module: &#123;</span><br><span class="line">        //rules的值是一個陣列可以存放多個loader物件</span><br><span class="line">        rules: [</span><br><span class="line">            &#123; test: /.jsx$/, exclude: /node_modules/, use: &#123; loader: &apos;babel-loader&apos;, options: &#123; presets: [&apos;@babel/preset-react&apos;] &#125; &#125; &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>loader 物件屬性  </p><blockquote><p>test：指定編譯檔案的副檔名為何，用正規表達式來尋找結尾處為.jsx的檔案。  </p></blockquote><blockquote><p>exclude：指定不編譯的路徑。</p></blockquote><blockquote><p>use：指定用來編譯符合副檔名條件的loader，這個物件裡面還有兩個屬性：</p><blockquote><p>loader：指定進行編譯的套件<br>option：指定 loader 套件中的 presets 是什麼</p></blockquote></blockquote><h3 id="其他-loader-對應："><a href="#其他-loader-對應：" class="headerlink" title="其他 loader 對應："></a>其他 loader 對應：</h3><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><p>CSS：style-loader、css-loader<br>SASS：sass-loader、node-sass</p><p>安裝：<br><code>npm install --save-dev autoprefixer css-loader node-sass postcss-loader precss sass-loader style-loader</code></p><p>設定</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// webpack.config.js</span><br><span class="line"></span><br><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /\.scss$/,</span><br><span class="line">      use: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;sass-loader&apos;]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// ./src/index.js</span><br><span class="line">import &apos;./styles/style.scss&apos;</span><br></pre></td></tr></table></figure></div><h4 id="PIC"><a href="#PIC" class="headerlink" title="PIC"></a>PIC</h4><p>file-loader、url-loader  </p><p><code>npm install --save-dev url-loader</code></p><p>設定</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// webpack.config.js</span><br><span class="line"></span><br><span class="line">module:&#123;</span><br><span class="line">  rules:[</span><br><span class="line">    // url loader (for image)</span><br><span class="line">    &#123;</span><br><span class="line">      test: /\.(jpe?g|png|gif|svg)$/,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: &apos;url-loader&apos;,</span><br><span class="line">          options: &#123;</span><br><span class="line">            limit: 40000  /* 小於 40kB 的圖片轉成 base64 */</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ], </span><br><span class="line">  [</span><br><span class="line">  // file-loader</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(woff|woff2|eot|ttf|otf)$/,</span><br><span class="line">        use: [</span><br><span class="line">          &apos;file-loader&apos;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// ./src/image-viewer.js</span><br><span class="line">import midImgUrl from &apos;./../assets/mid.jpeg&apos;</span><br><span class="line">import minImgUrl from &apos;./../assets/min.jpeg&apos;</span><br><span class="line"></span><br><span class="line">// midImg 會是被壓縮過的檔案名稱</span><br><span class="line">const midImg = document.createElement(&apos;img&apos;)</span><br><span class="line">midImg.src = midImgUrl</span><br><span class="line">document.body.appendChild(midImg)</span><br><span class="line"></span><br><span class="line">// minImg 是被注入在 bundle.js 中，可以直接使用</span><br><span class="line">const minImg = document.createElement(&apos;img&apos;)</span><br><span class="line">minImg.src = minImgUrl</span><br><span class="line">document.body.appendChild(minImg)</span><br><span class="line"></span><br><span class="line">export &#123;midImg, minImg&#125;</span><br></pre></td></tr></table></figure></div><h4 id="ES6-轉譯-ES5"><a href="#ES6-轉譯-ES5" class="headerlink" title="ES6 轉譯 ES5"></a>ES6 轉譯 ES5</h4><p>babel-loader、babel-core、babel-preset-env</p><p><code>npm install --save-dev @babel/core @babel/preset-env @babel/preset-react babel-loader</code></p><p>設定</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// webpack.config.js</span><br><span class="line"></span><br><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    // babel-loader</span><br><span class="line">    &#123;</span><br><span class="line">      test: /\.js$/,</span><br><span class="line">      exclude: /(node_modules|bower_components)/,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: &apos;babel-loader&apos;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              &apos;@babel/preset-env&apos;,</span><br><span class="line">              &#123;</span><br><span class="line">                useBuiltIns: &apos;entry&apos;,</span><br><span class="line">                // targets: &quot;&gt; 0.25%, not dead&quot;</span><br><span class="line">                targets: &#123;</span><br><span class="line">                  chrome: &apos;69&apos;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          ] // End of presets</span><br><span class="line">        &#125; // End of options</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; // End of Babel</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="開啟本機伺服器"><a href="#開啟本機伺服器" class="headerlink" title="開啟本機伺服器"></a>開啟本機伺服器</h2><p>在 webpack.config.js 中增加 devserver 的一些設定，例如要開啟的 port，如果沒有特別設定的話，port 的預設值為 8080，以下為了區隔所以設定 9000</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: [&apos;./index.js&apos;, &apos;./app.jsx&apos;],</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &apos;bundle.js&apos;,</span><br><span class="line">        path: path.resolve(__dirname, &apos;./&apos;),</span><br><span class="line">    &#125;,</span><br><span class="line">    //將loader的設定寫在module的rules屬性中</span><br><span class="line">    module: &#123;</span><br><span class="line">        //rules的值是一個陣列可以存放多個loader物件</span><br><span class="line">        rules: [</span><br><span class="line">            &#123; test: /.jsx$/, exclude: /node_modules/, use: &#123; loader: &apos;babel-loader&apos;, options: &#123; presets: [&apos;@babel/preset-react&apos;, &apos;@babel/preset-env&apos;] &#125; &#125; &#125;,</span><br><span class="line">            &#123; test: /.js$/, exclude: /node_modules/, use: &#123; loader: &apos;babel-loader&apos;, options: &#123; presets: [&apos;@babel/preset-env&apos;] &#125; &#125; &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    //增加一個給devserver的設定</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        //指定開啟port為9000</span><br><span class="line">        port: 9000</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><p>透過 <code>clean-webpack-plugin</code> 可以每次打包前都清除特定資料夾。</p><p>安裝</p><p><code>$ npm install clean-webpack-plugin --save-dev</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// webpack.config.js</span><br><span class="line"></span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  plugins: [</span><br><span class="line">    new CleanWebpackPlugin([&apos;dist&apos;]),</span><br><span class="line">    // ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="指令-命令提示字元下-or-終端機輸入"><a href="#指令-命令提示字元下-or-終端機輸入" class="headerlink" title="指令(命令提示字元下 or 終端機輸入)"></a>指令(命令提示字元下 or 終端機輸入)</h2><h3 id="看版本"><a href="#看版本" class="headerlink" title="看版本"></a>看版本</h3><p><code>webpack -v</code></p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p><code>webpack -p</code></p><p>or</p><p><code>npm run start</code></p><h3 id="開啟本機伺服器-1"><a href="#開啟本機伺服器-1" class="headerlink" title="開啟本機伺服器"></a>開啟本機伺服器</h3><p><code>webpack-dev-server</code></p><p>執行完後，打開瀏覽器輸入 <a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a> ，關閉 <code>webpack-dev-server</code> 開啟的 port，在命令提示字元的畫面上輸入 Ctrl+C。</p><p>參考：<br><a href="https://webpack.js.org/concepts/#entry" target="_blank" rel="noopener">https://webpack.js.org/concepts/#entry</a><br><a href="https://ithelp.ithome.com.tw/articles/10200329" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10200329</a><br><a href="https://ithelp.ithome.com.tw/articles/10200459?sc=pt" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10200459?sc=pt</a><br><a href="https://pjchender.github.io/2018/05/17/webpack-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%EF%BC%88webpack-note%EF%BC%89/" target="_blank" rel="noopener">Webpack 學習筆記（Webpack Note）</a></p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery 簡單介紹</title>
      <link href="/2020/01/16/jQuery-base/"/>
      <url>/2020/01/16/jQuery-base/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery-簡單介紹"><a href="#jQuery-簡單介紹" class="headerlink" title="jQuery 簡單介紹"></a>jQuery 簡單介紹</h1><p>JavaScript 的 Library，jQuery 主要是用在 DOM 文件操作，包含快速選取元素(Element)與執行事件，例如隱藏元素、顯示元素等等。此外 jQuery 的核心程式還加強了非同步傳輸(AJAX)以及事件(Event)的功能。</p><h2 id="使用-jQuery"><a href="#使用-jQuery" class="headerlink" title="使用 jQuery"></a>使用 jQuery</h2><p>jQuery 用 <code>$(selector).action()</code> 格式，指派元素到指定的事件。詳細來說， <code>$(selector)</code> 會呼叫 jQuery 選取 selector 元素，並指派它到稱作 <code>.action()</code> 事件。回傳值是 Array。可以直接用 for 或是 foreach 迴圈去處理。</p><p>e.g.</p><p><code>$(&quot;div&quot;).addClass(&quot;special&quot;);</code>  </p><p>範例是將先前所選取到的 <code>&lt;div&gt;</code> 元素都加上一個名為 “special” 的 class。</p><p>記號 <code>$</code> 是被當成 jQuery 的縮寫。等同，</p><p><code>jQuery(&quot;div&quot;).addClass(&quot;special&quot;);</code></p><p>另一個例子</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function()&#123;  </span><br><span class="line">   // 等所有的 HTML 都載入，且 DOM 都以建構完成執行 &#123; &#125; 內容，將所有 function();</span><br><span class="line">   // 放入裡面是常見做法</span><br><span class="line">  alert(&quot;Hello World!&quot;);         </span><br><span class="line">  $(&quot;#blackBox&quot;).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>上面這段 jQuery 程式碼，會執行與這段原生 JavaScript 程式碼相同的事情：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">window.onload = function() &#123;</span><br><span class="line">  alert( &quot;Hello World!&quot; );</span><br><span class="line">  document.getElementById(&quot;blackBox&quot;).style.display = &quot;none&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h3 id="選取元素"><a href="#選取元素" class="headerlink" title="選取元素"></a>選取元素</h3><h4 id="選取所有-lt-div-gt-元素"><a href="#選取所有-lt-div-gt-元素" class="headerlink" title="選取所有 &lt;div&gt; 元素"></a>選取所有 <code>&lt;div&gt;</code> 元素</h4><p><code>$(&quot;div&quot;)</code></p><h4 id="選取-id-為-menu-的元素"><a href="#選取-id-為-menu-的元素" class="headerlink" title="選取 id 為 menu 的元素"></a>選取 id 為 menu 的元素</h4><p><code>$(&quot;#menu&quot;)</code></p><h4 id="選取-class-為-content-的元素"><a href="#選取-class-為-content-的元素" class="headerlink" title="選取 class 為 content 的元素"></a>選取 class 為 content 的元素</h4><p><code>$(&quot;.content&quot;)</code></p><h4 id="選取-id-為-body-的-lt-div-gt"><a href="#選取-id-為-body-的-lt-div-gt" class="headerlink" title="選取 id 為 body 的 &lt;div&gt;"></a>選取 id 為 body 的 <code>&lt;div&gt;</code></h4><p><code>$(&quot;div#body&quot;)</code></p><h4 id="選取-class-為-content-的-lt-div-gt-所包住的所有內層的-lt-p-gt"><a href="#選取-class-為-content-的-lt-div-gt-所包住的所有內層的-lt-p-gt" class="headerlink" title="選取 class 為 content 的 &lt;div&gt; 所包住的所有內層的 &lt;p&gt;"></a>選取 class 為 content 的 <code>&lt;div&gt;</code> 所包住的所有內層的 <code>&lt;p&gt;</code></h4><p><code>$(&quot;div.content p&quot;)</code></p><h4 id="取得第index個子節點-eq-index"><a href="#取得第index個子節點-eq-index" class="headerlink" title="取得第index個子節點: eq(index)"></a>取得第index個子節點: eq(index)</h4><p><code>$(&#39;ul&#39;).children.eq(3).text();</code>  //取得第三個子節點</p><h4 id="利用屬性內容找節點"><a href="#利用屬性內容找節點" class="headerlink" title="利用屬性內容找節點"></a>利用屬性內容找節點</h4><p><code>$(&quot;input[name=&#39;A&#39;]&quot;);</code> //找出 name 屬性為 ‘A’ 的 input</p><h3 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h3><h4 id="讀取和修改一個元素的HTML內容-html"><a href="#讀取和修改一個元素的HTML內容-html" class="headerlink" title="讀取和修改一個元素的HTML內容: html()"></a>讀取和修改一個元素的HTML內容: html()</h4><p>若是多個元素，只能讀取第一個元素的內容</p><p>讀取 <code>&lt;p&gt;</code> 元素的內容</p><p><code>$(&quot;p&quot;).html();</code></p><p>修改 <code>&lt;p&gt;</code> 元素的內容</p><p><code>$(&quot;p&quot;).html(&quot;Hello &lt;b&gt;world&lt;/b&gt;!&quot;);</code></p><h4 id="讀取和修改一個元素的純文本內容-text"><a href="#讀取和修改一個元素的純文本內容-text" class="headerlink" title="讀取和修改一個元素的純文本內容: text()"></a>讀取和修改一個元素的純文本內容: text()</h4><p>讀取 Element 的文本內容</p><p><code>$(&quot;Element&quot;).text();</code></p><p>修改 Element 的文本內容，Element 的 content 是 <code>Hello &lt;b&gt;world&lt;/b&gt;!</code> 是文字格式，不是標籤元素</p><p><code>$(&quot;Element&quot;).text(&quot;Hello &lt;b&gt;world&lt;/b&gt;!&quot;);</code></p><h4 id="讀取和修改一個表單元素的-value-值-val"><a href="#讀取和修改一個表單元素的-value-值-val" class="headerlink" title="讀取和修改一個表單元素的 value 值: val()"></a>讀取和修改一個表單元素的 value 值: val()</h4><p>若是多個元素，只能讀取第一個元素的內容。要使用 for 或 each 來讀取多個。</p><p>讀取  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//  讀取每一個被 checked 的值</span><br><span class="line">$(&apos;input:checkbox[name=size]:checked&apos;).each(function()</span><br><span class="line">  &#123;</span><br><span class="line">   alert($(this).val());</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></div><p>修改</p><p><code>$(&quot;Element&quot;).val(value);</code></p><h4 id="元素節點末端加入純文字或-HTML-語法-增加元素-append"><a href="#元素節點末端加入純文字或-HTML-語法-增加元素-append" class="headerlink" title="元素節點末端加入純文字或 HTML 語法(增加元素): append"></a>元素節點末端加入純文字或 HTML 語法(增加元素): append</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 選取所有有 target 屬性的 `&lt;a&gt;`，並且在其節點下加入一段文字。</span><br><span class="line">$(&quot;a[target]&quot;).append(&quot;(Opens in New Window)&quot;);</span><br></pre></td></tr></table></figure></div><h4 id="元素節點前端加上純文字或-HTML-語法-增加元素-prepend"><a href="#元素節點前端加上純文字或-HTML-語法-增加元素-prepend" class="headerlink" title="元素節點前端加上純文字或 HTML 語法(增加元素): prepend()"></a>元素節點前端加上純文字或 HTML 語法(增加元素): prepend()</h4><p><code>$(div).prepend(&quot;first&quot;);</code></p><h4 id="修改-css-屬性-css"><a href="#修改-css-屬性-css" class="headerlink" title="修改 css 屬性: css"></a>修改 css 屬性: css</h4><p><code>.css(&#39;border&#39;,&#39;3px solid red&#39;)</code></p><p>or</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#body&quot;).css(&#123;  </span><br><span class="line">  border: &quot;1px solid green&quot;,  </span><br><span class="line">  height: &quot;40px&quot;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h4 id="class的新增-addClass"><a href="#class的新增-addClass" class="headerlink" title="class的新增: addClass()"></a>class的新增: addClass()</h4><p><code>$(&quot;#test&quot;).addClass(&quot;aaa&quot;);</code></p><h4 id="class的移除-removeClass"><a href="#class的移除-removeClass" class="headerlink" title="class的移除: removeClass()"></a>class的移除: removeClass()</h4><p><code>$(&quot;#test&quot;).removeClass(&quot;aaa&quot;);</code></p><p>移除多個</p><p><code>$(&quot;#test&quot;).removeClass(&quot;aaa bbb&quot;);</code></p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件寫法有兩種 </p><p><code>$(selector).click(function(){})</code></p><p>or</p><p><code>$(selector).on(&#39;click&#39;, function(){})</code></p><p>or</p><p>// 動態綁定<br><code>$(selector).on(&#39;click&#39;, selector, function(){})</code></p><p>ps. 補充有說明兩種的不同</p><h4 id="點選元素-click"><a href="#點選元素-click" class="headerlink" title="點選元素: click"></a>點選元素: click</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//當 user 點選 id 為 open 的連結時，顯示 id 為 menu 的區塊，並回傳 false 避免瀏覽器真的換頁。</span><br><span class="line">$(&quot;a#open&quot;).click(function() &#123;  </span><br><span class="line">  $(&quot;#menu&quot;).show();  </span><br><span class="line">  return false;  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">html</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;  </span><br><span class="line">  #menu &#123;display: none&#125;  </span><br><span class="line">&lt;/style&gt;  </span><br><span class="line">&lt;a id=&quot;open&quot; href=&quot;#&quot;&gt;menu&lt;/a&gt;  </span><br><span class="line">&lt;ul id=&quot;menu&quot;&gt;  </span><br><span class="line">  &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;a&lt;/a&gt;&lt;/li&gt;  </span><br><span class="line">  &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;b&lt;/a&gt;&lt;/li&gt;  </span><br><span class="line">  &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;c&lt;/a&gt;&lt;/li&gt;  </span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></div><h4 id="失焦並且內容改變-change"><a href="#失焦並且內容改變-change" class="headerlink" title="失焦並且內容改變: change()"></a>失焦並且內容改變: change()</h4><p><code></code></p><h4 id="聚焦-focus"><a href="#聚焦-focus" class="headerlink" title="聚焦: focus()"></a>聚焦: focus()</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;input&quot;).focus(function()&#123;</span><br><span class="line">  $(&quot;input&quot;).css(&quot;background-color&quot;,&quot;#FFFFCC&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h4 id="失焦-滑鼠游標移開-blur"><a href="#失焦-滑鼠游標移開-blur" class="headerlink" title="失焦(滑鼠游標移開): blur()"></a>失焦(滑鼠游標移開): blur()</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;input&quot;).blur(function()&#123;</span><br><span class="line">  $(&quot;input&quot;).css(&quot;background-color&quot;,&quot;#D6D6FF&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h4 id="加上鍵值-keyup"><a href="#加上鍵值-keyup" class="headerlink" title="加上鍵值: keyup()"></a>加上鍵值: keyup()</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(&apos;#target&apos;).keyup(function(event) &#123;</span><br><span class="line">if (event.keyCode == &apos;13&apos;) &#123;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h4 id="表單送出-submit"><a href="#表單送出-submit" class="headerlink" title="表單送出: submit"></a>表單送出: submit</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//在網頁上的表單送出時加入一個判斷，如果 username 這個欄位是空值的話，就顯示 help 這個區塊內的文字。</span><br><span class="line">$(&quot;form&quot;).submit(function() &#123;  </span><br><span class="line">  if ($(&quot;input#username&quot;).val() == &quot;&quot;)  </span><br><span class="line">    $(&quot;span.help&quot;).show();  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">html</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;  </span><br><span class="line">  .help &#123;display: none&#125;  </span><br><span class="line">&lt;/style&gt;  </span><br><span class="line">&lt;form&gt;  </span><br><span class="line">  &lt;label for=&quot;username&quot;&gt;請輸入姓名&lt;/label&gt;  </span><br><span class="line">  &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; /&gt;  </span><br><span class="line">  &lt;span class=&quot;help&quot;&gt;此欄位為必填&lt;/span&gt;  </span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></div><h4 id="布幕動態效果-slideDown"><a href="#布幕動態效果-slideDown" class="headerlink" title="布幕動態效果: slideDown"></a>布幕動態效果: slideDown</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#menu&quot;).slideDown(&quot;fast&quot;);</span><br><span class="line"></span><br><span class="line">html</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;  </span><br><span class="line">  #menu &#123;display: none&#125;  </span><br><span class="line">&lt;/style&gt;  </span><br><span class="line">&lt;ul id=&quot;menu&quot;&gt;  </span><br><span class="line">  &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;a&lt;/a&gt;&lt;/li&gt;  </span><br><span class="line">  &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;b&lt;/a&gt;&lt;/li&gt;  </span><br><span class="line">  &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;c&lt;/a&gt;&lt;/li&gt;  </span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></div><h4 id="animate-函數"><a href="#animate-函數" class="headerlink" title="animate 函數"></a>animate 函數</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//將所有的 &lt;div&gt; 漸變為寬 300px、文字與邊界寬 20px</span><br><span class="line">$(&quot;div&quot;).animate(&#123;  </span><br><span class="line">    width: &apos;300px&apos;,  </span><br><span class="line">    padding: &apos;20px&apos;  </span><br><span class="line">  &#125;, &apos;slow&apos;);  </span><br><span class="line"></span><br><span class="line">HTML</span><br><span class="line"></span><br><span class="line">&lt;div style=&quot;width: 100px; border: solid 1px red;&quot;&gt;  </span><br><span class="line">  Hello world!  </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div><h4 id="顯示-show"><a href="#顯示-show" class="headerlink" title="顯示: show()"></a>顯示: show()</h4><p><code>$(&#39;.target&#39;).show(); //顯示target</code></p><h4 id="隱藏-hide"><a href="#隱藏-hide" class="headerlink" title="隱藏: hide()"></a>隱藏: hide()</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/*所有的 &lt;div&gt; 以 0.5 秒的動態效果隱藏後，再以 0.5 秒的動態效果顯示。hide() 的第二個參數就是一個 callback 函數，其中 $(this) 是原本程式所處理的各個元素。*/</span><br><span class="line">$(&quot;div&quot;).hide(500, function()&#123;  </span><br><span class="line">  // $(this) 是每一個別的 &lt;div&gt;  </span><br><span class="line">  $(this).show(500);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">HTML</span><br><span class="line"></span><br><span class="line">&lt;div style=&quot;width: 100px; border: solid 1px red;&quot;&gt;  </span><br><span class="line">  Hello world!  </span><br><span class="line">&lt;/div&gt;  </span><br><span class="line">&lt;div style=&quot;width: 100px; border: solid 1px red;&quot;&gt;  </span><br><span class="line">  jsGears.com!  </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div><h4 id="切換-toggle"><a href="#切換-toggle" class="headerlink" title="切換: toggle()"></a>切換: toggle()</h4><p>toggle() 方法用於綁定兩個或多個事件處理器函式，以響應被選元素的輪流的 click 事件。該方法也可用於切換被選元素的 hide() 與 show() 方法。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 切換背景色</span><br><span class="line">$(&quot;p&quot;).toggle(</span><br><span class="line">  function()&#123;</span><br><span class="line">  $(&quot;body&quot;).css(&quot;background-color&quot;,&quot;green&quot;);&#125;,</span><br><span class="line">  function()&#123;</span><br><span class="line">  $(&quot;body&quot;).css(&quot;background-color&quot;,&quot;red&quot;);&#125;,</span><br><span class="line">  function()&#123;</span><br><span class="line">  $(&quot;body&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;);&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 按下 Hello 元素第一次會文字會是綠，第二次會是藍色</span><br><span class="line">$(&apos;#mydiv&apos;).toggle(</span><br><span class="line">function()&#123;</span><br><span class="line">  $(this).css(&#123;&quot;color&quot;: &quot;green&quot;&#125;);</span><br><span class="line">&#125;,</span><br><span class="line">function()&#123;</span><br><span class="line">  $(this).css(&#123;&quot;color&quot;: &quot;blue&quot;&#125;);</span><br><span class="line">&#125;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">html </span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;mydiv&quot;&gt;Hello&lt;/div&gt;</span><br></pre></td></tr></table></figure></div><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><h4 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">type: &quot;GET&quot;, //指定method</span><br><span class="line"> url: &apos;ajax/test.html&apos;,</span><br><span class="line"> success: function(data) &#123;</span><br><span class="line">  $(&apos;.result&apos;).html(data);</span><br><span class="line">  alert(&apos;Load was performed.&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h4 id="取得-HTML-load"><a href="#取得-HTML-load" class="headerlink" title="取得 HTML: load()"></a>取得 HTML: load()</h4><p><code>$(&quot;#htmDoc&quot;).load(&quot;test.html&quot;);</code></p><h4 id="取得-XML-格式的資料"><a href="#取得-XML-格式的資料" class="headerlink" title="取得 XML 格式的資料"></a>取得 XML 格式的資料</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.get(&quot;test.xml&quot;,function(xml)&#123;</span><br><span class="line">var text = $(&quot;title&quot;,xml).text();</span><br><span class="line">$(&quot;#xmlDoc&quot;).html(text);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h4 id="取得-TXT-格式的資料"><a href="#取得-TXT-格式的資料" class="headerlink" title="取得 TXT 格式的資料"></a>取得 TXT 格式的資料</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.get(&quot;test.txt&quot;,function(txt)&#123;</span><br><span class="line">alert(txt);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h4 id="取得-JSON-格式的資料-getJSON"><a href="#取得-JSON-格式的資料-getJSON" class="headerlink" title="取得 JSON 格式的資料: getJSON()"></a>取得 JSON 格式的資料: getJSON()</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$.getJSON(&quot;test.json&quot;, function(data)&#123;  </span><br><span class="line">  for (var idx in data)  </span><br><span class="line">    $(&quot;#menu&quot;).append(&quot;&lt;li&gt;&quot; + data[idx] + &quot;&lt;/li&gt;&quot;);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">HTML</span><br><span class="line"></span><br><span class="line">&lt;ul id=&quot;menu&quot;&gt;  </span><br><span class="line">  &lt;li&gt;a&lt;/li&gt;  </span><br><span class="line">&lt;/ul&gt;  </span><br><span class="line"></span><br><span class="line">test.json</span><br><span class="line"></span><br><span class="line">[  </span><br><span class="line">  &quot;Hello world!&quot;,   </span><br><span class="line">  &quot;jsGears.com!&quot;  </span><br><span class="line">]</span><br></pre></td></tr></table></figure></div><h3 id="連續使用函數"><a href="#連續使用函數" class="headerlink" title="連續使用函數"></a>連續使用函數</h3><p>如果想將所有的 <code>&lt;div&gt;</code> 隱藏，並修改文字顏色，再用布幕動態效果顯示出來的話，可用下方程式碼處理：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;div&quot;).hide();  </span><br><span class="line">$(&quot;div&quot;).css(&quot;color&quot;, &quot;green&quot;);  </span><br><span class="line">$(&quot;div&quot;).slideDown();</span><br></pre></td></tr></table></figure></div><p>上方三行程式碼可簡化成  </p><p><code>$(&quot;div&quot;).hide().css(&quot;color&quot;, &quot;blue&quot;).slideDown();</code></p><p>另一個範例：</p><p>選取第三個 <code>&lt;li&gt;</code> 加上 5px 的紅色邊框，並在 <code>&lt;li&gt;</code> 裡面加上文字 A<br><code>$(&#39;li:nth-child(3)&#39;).css(&#39;border&#39;,&#39;5px solid red&#39;).append(&#39;A&#39;);</code></p><h3 id="jQuery-plugin-應用"><a href="#jQuery-plugin-應用" class="headerlink" title="jQuery plugin 應用"></a>jQuery plugin 應用</h3><ol><li><p>下載 jQuery 的 js 和要使用的 plugin</p></li><li><p>打開 HTML 檔，在 <code>&lt;header&gt;</code> 加上 <code>&lt;link&gt;</code>，分別為套件的 <code>*.css</code> 與自己的 <code>*.css</code> 檔</p><p>e.g. </p><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css/flexslider.css&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;</code></p><p>在 body 加上官網上給的使用語法</p><p>在 <code>&lt;/body&gt;</code> 之前 加上 <code>jquery.min.js</code>、套件的<code>*.js</code>檔與套件使用的 js 語法。</p><p>e.g.</p><p><code>&lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.slim.min.js&quot; integrity=&quot;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</code></p></li></ol><p>依照套件的教學及範例，基本上就可以使用了。</p><h2 id="document-ready-事件"><a href="#document-ready-事件" class="headerlink" title="document ready 事件"></a>document ready 事件</h2><p>有時，在網頁下載完成後，要立即執行一些程式的話。可以用 window.onload 來處理，或是直接在 <code>&lt;body&gt;</code> 標籤上加入 onload 的事件處理函式。 jQuery 提供了 .ready() 來處理這類情況。</p><p>e.g. </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 網頁下載完成後立即執行 alert()</span><br><span class="line">$(document).ready(function() &#123;  </span><br><span class="line">  alert(&apos;Hello&apos;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>jQuery 的 document ready 事件是模擬 W3C DOM 標準的 DOMContentLoaded 事件，DOMContentLoaded 和 window.onlad 的差異在於前者是在 DOM 文件下載完成後觸發，而後者是文件和所有文件內的元件，包含圖檔等等全部下載完成後才會觸發。因此通常 window.onload 的發生時間要比 DOMContentLoaded 晚一點。  </p><p>而 DOMContentLoaded 和 window.onload 的另一個差異在於 window.onload 並沒有辦法多次指定不同的函數來執行，最後指定的那個函數會複寫掉先前的。但 jQuery 的 document ready 函數並不會有覆寫的情況發生。</p><p>document ready 函數也有更精簡的寫法，如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;  </span><br><span class="line">  alert(&apos;Hello&apos;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>可改寫成</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(function() &#123;  </span><br><span class="line">  alert(&apos;Hello&apos;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h2 id="別名"><a href="#別名" class="headerlink" title="別名"></a>別名</h2><p>jQuery 本身提供一個函式來避免 <code>$()</code> 的衝突，使用 jQuery 函式前，加上 <code>jQuery.noConflict();</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jQuery.noConflict();</span><br><span class="line">$(document).ready(function() &#123;  </span><br><span class="line">  alert(&apos;Hello&apos;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>或是另外設定名稱</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const $j = jQuery.noConflict();</span><br><span class="line">$j(document).ready(function() &#123;  </span><br><span class="line">  alert(&apos;Hello&apos;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><h3 id="click-function-及-on-‘clcik’-function-，這兩者間到底有什麼不一樣？"><a href="#click-function-及-on-‘clcik’-function-，這兩者間到底有什麼不一樣？" class="headerlink" title=".click(function()) 及.on(‘clcik’,function())，這兩者間到底有什麼不一樣？"></a>.click(function()) 及.on(‘clcik’,function())，這兩者間到底有什麼不一樣？</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">   &lt;li&gt;&lt;span&gt;click me&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">   &lt;li&gt;&lt;span&gt;click me&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">   &lt;li&gt;&lt;span&gt;click me&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></div><p><strong><em>.click(function())<br>若是使用<code>$(&#39;li span&#39;).click(function(){alert(&#39;hi&#39;)});</code>的話，它只對於你現在 HTML 上所指定的全部元素進行事件綁定，<br>如果你在後來透過 jQuery 或其他方式所增加的元素都不會出現在這個事件所綁定的範圍裡，所以 .click 是沒有辦法幫助你做到動態的事件綁定。</em></strong>  </p><p><strong><em>.on<br>基本上 .click 能做到的事情，透過.on(‘click’)的方式一樣都能做到，但是 .on() 能做到動態事件綁定，以上述的例子而言，我們可能會寫 <code>$(&#39;li span&#39;).on(&#39;click&#39;,function(){alert(&#39;hi&#39;)});</code><br>這時你會發現，在動態事件這種方式會跟上述的.click事件處理方式一樣沒反應，那到底 .on() 要怎麼做到動態事件綁定？.on()方法有提供第二個參數「childSelector」<br><code>$(&#39;li&#39;).on(&#39;click&#39;,&#39;span&#39;,function(){alert(&#39;hi&#39;)});</code> childSelector 的原理就是事件冒泡 event bubbling ，在你點擊子元素 span 時，子元素 span 一樣是在父元素 li 裡面，所以你樣是有點擊到父元素 li，而事件的傳遞會從子元素先發生接著向父元素傳遞，但是實際上我們這邊事件一樣是綁定在父元素 li 上，所以它會再去而找到相對應的子元素，來進行事件處理。這兩者間最大的差異，大概就在動態事件處理上，當然還有像是一些小差異像是</em></strong>    </p><p><strong><em>.on() 所佔用的記憶體會比.click還少<br>.on() 為Namespaced Events，可以做到事件命名的管理。</em></strong>  </p><p><strong><em>一般來說，如果不會用到 append … 等這些插入元件控制用的語法。使用第三個程式寫法就行了，不需要用到 on 處理。在某些情況下，on 最好還是少用。不得已非要用到的情況才去使用它會比較好。</em></strong></p><hr><h3 id="blur-事件會觸發兩次"><a href="#blur-事件會觸發兩次" class="headerlink" title="blur 事件會觸發兩次"></a>blur 事件會觸發兩次</h3><p><strong><em>jQuery 解決使用 blur 事件時，會觸發兩次的問題 (好像用 focus 事件也會)。因為在綁定 onblur 事件的時候都會被觸發兩次，原因不明…..網路上有找到解法，但好像不是用 on 來綁，是用一般的 blur(無法動態綁定)，若是 dom 都是動態產生的，這個沒法用。</em></strong></p><p><strong><em>可用此方式試試</em></strong></p><p>e.g.</p><p><strong><em><code>$(&#39;#gradeUpdate&#39;).blur()</code></em></strong></p><p><strong><em>改成這樣就可以了</em></strong></p><p><strong><em><code>$(&#39;#gradeUpdate&#39;)[0].blur()</code></em></strong></p><p>參考：<br><a href="https://jquery.com/" target="_blank" rel="noopener">https://jquery.com/</a><br><a href="https://www.j2h.tw/bbs/bbs16/511.html" target="_blank" rel="noopener">https://www.j2h.tw/bbs/bbs16/511.html</a><br><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/jQuery" target="_blank" rel="noopener">https://developer.mozilla.org/zh-TW/docs/Glossary/jQuery</a><br><a href="https://ithelp.ithome.com.tw/articles/10197512" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10197512</a><br><a href="http://greenkm.blogspot.com/2016/03/jquery_8.html" target="_blank" rel="noopener">http://greenkm.blogspot.com/2016/03/jquery_8.html</a><br><a href="https://jjnnykimo.pixnet.net/blog/post/21585448" target="_blank" rel="noopener">https://jjnnykimo.pixnet.net/blog/post/21585448</a><br><a href="https://felixx.pixnet.net/blog/post/36966403" target="_blank" rel="noopener">https://felixx.pixnet.net/blog/post/36966403</a><br><a href="http://shioulo.eu5.org/node/256" target="_blank" rel="noopener">http://shioulo.eu5.org/node/256</a><br><a href="https://sweeteason.pixnet.net/blog/post/42677633-jquery-%E8%A7%A3%E6%B1%BA%E4%BD%BF%E7%94%A8-blur-%E4%BA%8B%E4%BB%B6%E6%99%82%EF%BC%8C%E6%9C%83%E8%A7%B8%E7%99%BC%E5%85%A9%E6%AC%A1%E7%9A%84%E5%95%8F" target="_blank" rel="noopener">https://sweeteason.pixnet.net/blog/post/42677633-jquery-%E8%A7%A3%E6%B1%BA%E4%BD%BF%E7%94%A8-blur-%E4%BA%8B%E4%BB%B6%E6%99%82%EF%BC%8C%E6%9C%83%E8%A7%B8%E7%99%BC%E5%85%A9%E6%AC%A1%E7%9A%84%E5%95%8F</a><br><a href="http://skaih.logdown.com/posts/712464-jquery-click-on-the-where-different" target="_blank" rel="noopener">http://skaih.logdown.com/posts/712464-jquery-click-on-the-where-different</a><br><a href="https://ithelp.ithome.com.tw/questions/10191601" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/questions/10191601</a><br><a href="https://www.w3cplus.com/blog/134.html" target="_blank" rel="noopener">https://www.w3cplus.com/blog/134.html</a></p>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sass 基本介紹</title>
      <link href="/2020/01/16/Sass-base/"/>
      <url>/2020/01/16/Sass-base/</url>
      
        <content type="html"><![CDATA[<h2 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h2><p>Sass(Syntactically Awesome StyleSheets) 是種 CSS 的擴充，經過編譯(compiled) 成 CSS 檔，讓瀏覽器可讀取。解決了專案 CSS 遇到的重複、可維護性差等問題。bootstrap 也有使用 Sass。</p><h2 id="格式寫法"><a href="#格式寫法" class="headerlink" title="格式寫法"></a>格式寫法</h2><a href="/2020/01/16/Sass-base/Sass.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/01/16/Sass-base/Sass.png" title="This is an image"></a>  <h3 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS"></a>SCSS</h3><p>用大括號跟分號來區分段落，多數人使用，與 CSS 語法相近。</p><p>e.g.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=menu&gt; </span><br><span class="line">&lt;li&gt;&lt;a href=&apos;#&apos;&gt;1234&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">.menu &#123;</span><br><span class="line">  li &#123;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">    a &#123;</span><br><span class="line">    color: red; </span><br><span class="line">     &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compiler:</span><br><span class="line"></span><br><span class="line">.menu li &#123;</span><br><span class="line">  font-size: 30px;</span><br><span class="line">&#125;</span><br><span class="line">.menu li a &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h3><p>使用排縮跟斷行來區分。</p><p>e.g.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=menu&gt; </span><br><span class="line">&lt;li&gt;&lt;a href=&apos;#&apos;&gt;1234&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">.menu</span><br><span class="line">  li </span><br><span class="line">    font-size: 30px</span><br><span class="line">    a</span><br><span class="line">    color: red</span><br></pre></td></tr></table></figure></div><h2 id="Sass-轉成-CSS-方式-透過編譯"><a href="#Sass-轉成-CSS-方式-透過編譯" class="headerlink" title="Sass 轉成 CSS 方式(透過編譯)"></a>Sass 轉成 CSS 方式(透過編譯)</h2><p>編譯順序是從上到下</p><h3 id="軟體編譯"><a href="#軟體編譯" class="headerlink" title="軟體編譯"></a>軟體編譯</h3><ol><li><p><a href="https://sass-lang.com/install" target="_blank" rel="noopener">https://sass-lang.com/install</a> 安裝 Sass  </p></li><li><p>Prepros：免再安裝其它軟體即可編譯 Jade/SASS<br>1.下載：<a href="https://prepros.io" target="_blank" rel="noopener">https://prepros.io</a><br>2.安裝好之後就拖曳網站資料夾(根目錄)到 prepros 拖曳後產生兩個欄位，左邊是網站資料夾，右邊是 檔案清單、Log、FTP、軟體設置，最重要的就是 Log，他會顯示SASS紀錄，當SASS無法轉成CSS時，他會有紀錄，方便看程式是否哪邊有問題?<br>3.而且他會在資料夾產生一個 prepros-6.config，如後續沒有要用到 SASS，網站完成後可以刪掉，如果要再用 SASS 輸出成 CSS 要再重新拖曳檔案到 prepros 讓他讀取該資料夾繼續編譯 SASS。<br>4.新增 Scss 和 css 資料夾：開始寫 SCSS 之前，先在網站資料夾新增 Scss 和 CSS 資料夾，SCSS檔案存在同名資料夾，SCSS 檔案儲存時，電腦桌面會出現編譯成功的小視窗，CSS 資料夾會出現一個 CSS的檔案。</p></li></ol><h3 id="打包：gulp-webpack"><a href="#打包：gulp-webpack" class="headerlink" title="打包：gulp / webpack"></a>打包：gulp / webpack</h3><h3 id="編輯器內建插件編譯"><a href="#編輯器內建插件編譯" class="headerlink" title="編輯器內建插件編譯"></a>編輯器內建插件編譯</h3><p>VSCode 套件：Live Sass compiler </p><ol><li>在 vscode 安裝  Live Sass compiler 插件。</li><li>產生專案資料夾，在專案資料夾內新增 Scss 資料夾。新增一個 all.scss 文件。程式視窗下方，會啟用 Live Sass compiler 程式。有 Watch Sass 字樣。寫完 Scss 後，點擊  Watch Sass 字樣，會產生 all.css 跟 all.css.map 至預設的資料夾內，且每一次儲存檔案都會自動編譯一次。想要停止即時編譯的狀態，點擊視窗下方的「Watching…」即可停止。</li></ol><p>預設的情況編譯產生的 CSS 將會被放置在與 SCSS 檔案同層的資料夾內，要指定 CSS 輸出路徑或輸出形式，可依照以下的步驟來設定。</p><h4 id="指定輸出CSS的路徑"><a href="#指定輸出CSS的路徑" class="headerlink" title="指定輸出CSS的路徑"></a>指定輸出CSS的路徑</h4><p>於檔案總管內另外新增一層名為 css 的資料夾，接著進入 VSCode 的喜好設定 -&gt; 設定，可直接將以下的程式碼複製並貼到區塊存檔：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;liveSassCompile.settings.formats&quot;:[</span><br><span class="line">    &#123;</span><br><span class="line">&quot;savePath&quot;: &quot;/css&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></div><p>LiveSassCompile.settings.formats：可用於調整 Live Sass Compiler 外掛相關的屬性設定。<br>savePath：輸出後的 CSS 檔存放資料夾。</p><h4 id="更改輸出樣式"><a href="#更改輸出樣式" class="headerlink" title="更改輸出樣式"></a>更改輸出樣式</h4><p>Live Sass Compiler 支援以下四種輸出樣式：  </p><ol><li>expanded(預設)  </li><li>compact  </li><li>compressed (去除檔案所有空格及縮排) // 常見</li><li>nested<br>將以下的程式碼貼入設定檔，並存檔。</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;liveSassCompile.settings.formats&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;format&quot;: &quot;compressed&quot;,</span><br><span class="line">            &quot;savePath&quot;: &quot;/css&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Sass-使用"><a href="#Sass-使用" class="headerlink" title="Sass 使用"></a>Sass 使用</h2><h3 id="巢狀-nesting"><a href="#巢狀-nesting" class="headerlink" title="巢狀(nesting)"></a>巢狀(nesting)</h3><p>透過巢狀式的結構也可以清楚的知道元素上下層的關聯性。</p><p>e.g.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  .title&#123;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    p&#123;</span><br><span class="line">      color: rgba(255, 0, 0, 1);;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>編譯成 CSS 就會變成</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line">.box .title&#123;</span><br><span class="line">  padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.box .title p&#123;</span><br><span class="line">  color: rgba(255, 0, 0, 1);;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>還有一個方便的功能是使用 &amp; 符號來代替父層(上層)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  color: rgba(0, 0, 0, 1);</span><br><span class="line">  &amp;:hover&#123;</span><br><span class="line">      color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>編譯後</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  color: rgba(0, 0, 0, 1);</span><br><span class="line">&#125;</span><br><span class="line">.box:hover&#123;</span><br><span class="line">  color: rgba(255, 0, 0, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="變數-Variable"><a href="#變數-Variable" class="headerlink" title="變數(Variable)"></a>變數(Variable)</h3><p><code>$</code> 來表示變數，變數可以用來儲存值，方便重複利用。時常需要設定的 CSS 可設為變數。  </p><p>$變數名: 樣式;</p><p>e.g.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$box-shadow: 10px 10px 5px rgba(0, 0, 0, 1);</span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">  box-shadow: $box-shadow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>變數也能拿來做運算，格式有</p><blockquote><p>數字：10、1px、3em<br>字串：’test’、”../images/big/“<br>顏色：red、#000000、rgba(255,255,255,0.9)<br>布林：true、false<br>空值：null  </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$num:5px;</span><br><span class="line">.container&#123;</span><br><span class="line">  margin:$num*2 $num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>集合變數</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$themes: (</span><br><span class="line">   //key, value</span><br><span class="line">   &apos;primary&apos;: blue;</span><br><span class="line">   &apos;danger&apos;: red;</span><br><span class="line">   &apos;secondary&apos;: orange;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">.box-primary &#123;</span><br><span class="line">   background-color: map-get($themes, &apos;primary&apos;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="混合-mixin"><a href="#混合-mixin" class="headerlink" title="混合(mixin)"></a>混合(mixin)</h2><p>函式可以使用在重複多行的樣式上面，像是 CSS 的一些新屬性就可能需要加上瀏覽器前綴，這個部分就可以透過函式來完成，要特別注意的是：<br><code>@mixin</code>需要配合 <code>@include</code> 來使用<br><code>@mixin</code>來設定要使用的樣式、<code>@include</code>則是套用樣式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@mixin css3-border-radius() &#123; </span><br><span class="line">  -ms-border-radius: 5px;</span><br><span class="line">  -moz-border-radius: 5px; </span><br><span class="line">  -webkit-border-radius: 5px; </span><br><span class="line">  -o-border-radius: 5px; </span><br><span class="line">  border-radius: 5px; </span><br><span class="line">&#125;</span><br><span class="line">.box &#123;</span><br><span class="line">@include css3-border-radius();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>編譯後</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  -ms-border-radius: 5px;</span><br><span class="line">  -moz-border-radius: 5px;</span><br><span class="line">  -webkit-border-radius: 5px;</span><br><span class="line">  -o-border-radius: 5px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>函式也可以搭配參數使用讓使用上更加靈活。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@mixin css3-border-radius($i) &#123; </span><br><span class="line">  -ms-border-radius: $i;</span><br><span class="line">  -moz-border-radius: $i; </span><br><span class="line">  -webkit-border-radius: $i; </span><br><span class="line">  -o-border-radius: $i; </span><br><span class="line">  border-radius: $i; </span><br><span class="line">&#125;</span><br><span class="line">.box &#123;</span><br><span class="line">@include css3-border-radius(3px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="導入-import"><a href="#導入-import" class="headerlink" title="導入(import)"></a>導入(import)</h3><p>在檔案中加入其他SCSS或CSS檔案，最後編譯時會一併編譯。假如我想在某個SCSS檔案裡面匯入 head、main、footer 等 SCSS 的檔案就可以使用下面這段程式碼</p><p><code>@import &quot;head.scss&quot;;</code><br><code>@import &quot;main.scss&quot;;</code><br><code>@import &quot;footer.scss&quot;;</code>    </p><h3 id="繼承-Extend"><a href="#繼承-Extend" class="headerlink" title="繼承(Extend)"></a>繼承(Extend)</h3><p><code>@extend</code> 主要是用在合併相同程式碼，假如有很多段相同的程式碼就可以使用 <code>@extend</code> 進行合併，只要加上站位符號 <code>%</code> 就能讓被繼承的 CSS 類消失。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%box &#123;</span><br><span class="line">  border: 1px solid rgba(0, 0, 0, 1);</span><br><span class="line">  padding: 10px;</span><br><span class="line">  color: rgba(0, 0, 0, 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.success &#123;</span><br><span class="line">  @extend %box;</span><br><span class="line">  border-color: rbga(0, 128, 0, 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.danger &#123;</span><br><span class="line">  @extend %box;</span><br><span class="line">  border-color: rgba(255, 0, 0, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>編譯後</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.success, .danger&#123;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  color: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.success&#123;</span><br><span class="line">  border-color: rgba(0, 128, 0, 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.danger&#123;</span><br><span class="line">  border-color: rgba(255, 0, 0, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="函式-Functions"><a href="#函式-Functions" class="headerlink" title="函式(Functions)"></a>函式(Functions)</h3><p>SCSS 中也有 <code>@function</code> 可以使用，像是 <code>@if</code>、<code>@for</code>，可以查看內建函式的清單</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">     background-color: $i;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@for $i from 1 through 5 &#123;     // 包含 5 有 1-5</span><br><span class="line">   .box-#($i) &#123;</span><br><span class="line">     background-color: $i;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="for"><a href="#for" class="headerlink" title="@for"></a>@for</h4><p><code>@for $i from 1 to 5{}</code><br><code>@for $i from 1 through 5{}</code></p><p>先用 <code>@for</code> 啟用此功能，再來用 <code>$</code> 設立一個變數i(可自訂但通常慣用 i )，再來 from 1 to 5 的意思是，<code>$i</code> 這個變數，從 1 開始逐步替換到 4(不包含 5 )，若要需要包含 5，用 through，所以就會寫成 <code>@for $i from 1 through 5{}</code>，這樣才 <code>$i</code> 才是從 1逐步的替換到 5，然後在 <code>@for</code> 最後面的大括弧內寫上要替換的對象(選擇器)以及條件(語法)，如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@for $i from 1 through 5&#123;</span><br><span class="line">  .box#&#123;$i&#125;&#123;</span><br><span class="line">    background:darken(red,$i*5%);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>假設這個簡單的案例是有五個 <code>.box</code>，從 <code>.box1</code> ~ <code>.box5</code>，然後分別用 darken 來加深他們的 background 顏色，首先先在 <code>.box</code> 後面緊接著 <code>#{$i}</code>，讓他變成 <code>.box#{$i}</code>，變數 <code>$i</code>一定要先用 <code>{}</code> 包起來，然後在前面再加一個 <code>#</code> 字，這樣 <code>.box</code> 就會被逐步的迭代成  <code>.box1</code>、<code>.box2</code>到 <code>.box5</code> 了。</p><p>一個簡單的 <code>@for</code> 就可以一次給五個 class 效果，接著看後面的 background，我們給它的值是利用 darken 功能，再來後面接條件 <code>(red,$i*5%)</code>，寫成<code>background:darken(red,$i*5%);</code>，利用 <code>@for</code> 的迭代功能，就可以把 background 分別改成 <code>darken(red,$5%、10%、15%、20%、25%);</code>。</p><h4 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h4><p>迭代變數內容</p><p>e.g.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$list: (orange, purple, melon);</span><br><span class="line"></span><br><span class="line">@each $item in $list &#123;</span><br><span class="line">.#&#123;$item&#125; &#123;</span><br><span class="line">  background: $item;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@each $key, $value in $themes &#123;</span><br><span class="line">   .box-#($key) &#123;</span><br><span class="line">    background-color: $value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="註解-Comment"><a href="#註解-Comment" class="headerlink" title="註解(Comment)"></a>註解(Comment)</h3><p>只要在程式碼開頭加上兩條斜線 <code>//</code> 就可以加入註解。</p><h3 id="mixin-整理-CSS-應用"><a href="#mixin-整理-CSS-應用" class="headerlink" title="@mixin 整理 CSS 應用"></a>@mixin 整理 CSS 應用</h3><p>將 CSS 功能寫成 @mixin 再 @include 到使用該功能的標籤元素。</p><p>e.g.</p><h4 id="圖片取代文字"><a href="#圖片取代文字" class="headerlink" title="圖片取代文字"></a>圖片取代文字</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@mixin hide-text&#123;</span><br><span class="line">   text-indent: 110%;</span><br><span class="line">   white-space: nowrap;</span><br><span class="line">   overflow:hidden;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="用-CSS-畫各方向的三角形"><a href="#用-CSS-畫各方向的三角形" class="headerlink" title="用 CSS 畫各方向的三角形"></a>用 CSS 畫各方向的三角形</h4><h5 id="用-CSS-畫圓"><a href="#用-CSS-畫圓" class="headerlink" title="用 CSS 畫圓"></a>用 CSS 畫圓</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@mixin circle($size,$bgcolor) &#123;</span><br><span class="line">   border-radiu: 50%;</span><br><span class="line">   height: $size;</span><br><span class="line">   width: $size;</span><br><span class="line">   font-size: $size/3;</span><br><span class="line">   background: $bgcolor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">  @include circle(30px,#fff)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="mixin-import-應用"><a href="#mixin-import-應用" class="headerlink" title="@mixin + import 應用"></a>@mixin + import 應用</h4><h5 id="CSS-分類、整合"><a href="#CSS-分類、整合" class="headerlink" title="CSS 分類、整合"></a>CSS 分類、整合</h5><p>_variable.SCSS  //變數整理<br>_reset.SCSS     //樣式清空，bootstrap 用 normalize.css(會保有瀏覽器預設樣式)<br>_mixin.SCSS     CSS 功能<br>_main.SCSS        </p><p>合成  all.scss (內容 @import 上述 .SCSS 檔)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;variable&quot;;</span><br><span class="line">@import &quot;normalize&quot;;</span><br><span class="line">@import &quot;mixin&quot;;  //or  @import &quot;mixin/mixin&quot;;</span><br><span class="line">// 主要CSS</span><br><span class="line">@import &quot;main&quot;;</span><br></pre></td></tr></table></figure></div><h4 id="mixin-RWD"><a href="#mixin-RWD" class="headerlink" title="@mixin + RWD"></a>@mixin + RWD</h4><p>響應式處理 @media RWD @mixin + content </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@mixin desktop-below&#123;</span><br><span class="line">   @media (max-width: 1023px)&#123;</span><br><span class="line">      @content</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@mixin pad&#123;</span><br><span class="line">   @media (max-width: 768px)&#123;</span><br><span class="line">      @content</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  @include pad&#123;</span><br><span class="line">     width: 13px;       // pad&#123;content 內容)&#125;    </span><br><span class="line">     font-size: 20px; </span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@mixin mobile&#123;</span><br><span class="line">   @media (max-width: 568px)&#123;</span><br><span class="line">      @content</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  @include pad&#123;</span><br><span class="line">     width: 13px;       // pad&#123;content 內容)&#125;    </span><br><span class="line">     font-size: 20px; </span><br><span class="line">   &#125;;</span><br><span class="line">  @include mobile&#123;</span><br><span class="line">     font-size: 8px;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="SASS-設計模式簡單介紹"><a href="#SASS-設計模式簡單介紹" class="headerlink" title="SASS 設計模式簡單介紹"></a>SASS 設計模式簡單介紹</h2><h3 id="SMACSS"><a href="#SMACSS" class="headerlink" title="SMACSS"></a>SMACSS</h3><p>結構分類：Base、Layout、Module、State、Theme。<br>命名規則：id 與 class 受限制地使用、名稱使用 dash 分隔。<br>結構的分類存在模糊界線。</p><h3 id="OOCSS"><a href="#OOCSS" class="headerlink" title="OOCSS"></a>OOCSS</h3><p>Object Oriented CSS，範例是 Bootstrap。</p><ol><li>結構(header)與樣式(header-shadow)分離</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;header header-shadow&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">css</span><br><span class="line">.header &#123;</span><br><span class="line"> width: 200px;</span><br><span class="line"> height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.header-shadow &#123;</span><br><span class="line">  box-shadow: 10px 10px 10px #000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button class=&quot;pure-button pure-button-primary&quot;&gt;btn&lt;/button&gt;</span><br></pre></td></tr></table></figure></div><ol start="2"><li>容器與內容分離</li></ol><a href="/2020/01/16/Sass-base/SASS2.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/01/16/Sass-base/SASS2.png" title="This is an image"></a>  <h3 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h3><p>由 Yandex 團隊提出來命名 Class 名稱的設計模式，<br>BEM 的意思是區塊(Block)、元素(Element)、修飾符(Modifier)。<br>以元件觀念進行開發，具有重用性。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;menu&quot;&gt;</span><br><span class="line">    &lt;li class=&quot;item active&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></div><p>變成</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;product&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;menu&quot;&gt;</span><br><span class="line">        &lt;li class=&quot;menu__item menu__item--active&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li class=&quot;menu__item&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div><p><code>.block{}</code> //區塊 (Block)<br><code>.block__element{}</code> //元素(Element)<br><code>.block--modifier{}</code> //修飾符(Modifier)  </p><h4 id="區塊-Block"><a href="#區塊-Block" class="headerlink" title="區塊 (Block)"></a>區塊 (Block)</h4><p>我們在設計網站時，一定會設計幾個區塊(Block)出來，如下圖表頭裡面有 LOGO 、選單、搜尋框、登入視窗等等，這樣才能方便移動整個區塊到對應位置，這時候我們就會用 class 命名他們區塊對應的語意，例如<code>.menu</code>、<code>.logo</code>、<code>.search</code>、<code>.auth</code>。 </p><a href="/2020/01/16/Sass-base/Sass3.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/01/16/Sass-base/Sass3.png" title="This is an image"></a>  <h4 id="元素-Element"><a href="#元素-Element" class="headerlink" title="元素 (Element)"></a>元素 (Element)</h4><p>再來我們深入 menu 的區塊，你可以看到下圖選單內有四個元素，如果這些元素設定是會綁定在這個區塊上時，就可以在區塊的 class 後面加上雙下底線 <code>__</code> 來辨識他是該區塊底下的元素，class 就會設計為 <code>.menu__item{}</code>。<br>PS：除了HTML tag外，如果是一個 CSS 組件也可把它視為元素 (Element) 。</p><a href="/2020/01/16/Sass-base/Sass4.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/01/16/Sass-base/Sass4.png" title="This is an image"></a>  <h4 id="修飾符（Modifier）"><a href="#修飾符（Modifier）" class="headerlink" title="修飾符（Modifier）"></a>修飾符（Modifier）</h4><p>修飾符（Modifier）的觀念和 SMACSS 的 State Rules 很相似。當區塊或元素因為狀態而改變時，就在後面加上雙中線–來辨識它是修飾符，像是下圖選單的部份，當被點選時為了要讓使用者了解該元素有被點選，所以就會用 javascript 動態加入 class 為 <code>.menu__item--active</code>，所以如果我們要判斷這個 class 是屬於元素還是修飾符的設定，就只要看 class 最後面是雙中線 <code>--</code> 還是雙下底線 <code>__</code> 就知道他是屬於哪一種了。</p><a href="/2020/01/16/Sass-base/Sass5.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/01/16/Sass-base/Sass5.png" title="This is an image"></a>  <h4 id="BEM-Sass"><a href="#BEM-Sass" class="headerlink" title="BEM + Sass"></a>BEM + Sass</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.list&#123;&#125;</span><br><span class="line">.list__title&#123;&#125;</span><br><span class="line">.list__img&#123;&#125;</span><br><span class="line">.list__img—changebg&#123;&#125;</span><br><span class="line"></span><br><span class="line">.list &#123;</span><br><span class="line">   &amp;__title &#123;</span><br><span class="line">  &#125;</span><br><span class="line">   &amp;__img &#123;</span><br><span class="line">      height: 50px;</span><br><span class="line">      &amp;—changing &#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><h2 id="CSS-命名"><a href="#CSS-命名" class="headerlink" title="CSS 命名"></a>CSS 命名</h2><p><code>.bookList { }</code> 比較好懂<br><code>.bookList-title { }</code>  //bookList 下的 title<br><code>.bookList_title { }</code>  //跟 <code>.bookList-title {}</code> 一樣，保持一致就好。</p><p>拋棄語意命名方式，改以工具性質來命名。容易重複利用<br><code>.list{}</code><br><code>.list_title{}</code><br>顏色，不要直接用顏色來命名<br><code>.textcolor {color: green;}</code><br>利用格線系統來命名<br><code>.col_3 {}</code></p><p><strong><em>ps.<br>Sass的檔名如果在最前面加上 <code>_</code> 就不會被轉譯工具輸出成CSS檔案(例如：_base.scss)，可用時單純匯入、整合 Sass 檔</em></strong></p><p><strong><em>reset.css<br><a href="https://meyerweb.com/eric/tools/css/reset/" target="_blank" rel="noopener">https://meyerweb.com/eric/tools/css/reset/</a><br>CSS 前掛上這一段「Reset CSS」的語法，樣式會全部清空，處理各大瀏覽器的差異。用 @import 來引用 reset.css。</em></strong></p><p><strong><em>normalize.css 會保有瀏覽器預設樣式。</em></strong></p><p>參考：<br><a href="https://blog.techbridge.cc/2017/06/30/sass-scss-tutorial-introduction/" target="_blank" rel="noopener">https://blog.techbridge.cc/2017/06/30/sass-scss-tutorial-introduction/</a><br><a href="https://ithelp.ithome.com.tw/articles/10132821" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10132821</a><br><a href="https://ithelp.ithome.com.tw/articles/10203396?sc=iThelpR" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10203396?sc=iThelpR</a><br><a href="https://medium.com/@enshenghuang/%E4%BD%BF%E7%94%A8vscode%E5%A4%96%E6%8E%9B%E8%87%AA%E5%8B%95%E7%B7%A8%E8%AD%AFsass-scss-9ff768d23b48" target="_blank" rel="noopener">https://medium.com/@enshenghuang/%E4%BD%BF%E7%94%A8vscode%E5%A4%96%E6%8E%9B%E8%87%AA%E5%8B%95%E7%B7%A8%E8%AD%AFsass-scss-9ff768d23b48</a><br><a href="https://www.hexschool.com/courses/sass.html" target="_blank" rel="noopener">https://www.hexschool.com/courses/sass.html</a><br><a href="https://cythilya.github.io/2018/06/05/css-methodologies/" target="_blank" rel="noopener">https://cythilya.github.io/2018/06/05/css-methodologies/</a><br><a href="https://cythilya.github.io/2018/05/22/bem/" target="_blank" rel="noopener">https://cythilya.github.io/2018/05/22/bem/</a></p>]]></content>
      
      
      <categories>
          
          <category> Sass </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sass </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 基本介紹</title>
      <link href="/2020/01/15/HTML-base/"/>
      <url>/2020/01/15/HTML-base/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-基本介紹"><a href="#HTML-基本介紹" class="headerlink" title="HTML 基本介紹"></a>HTML 基本介紹</h2><h5 id="超文本標記語言（英語：HyperText-Markup-Language，簡稱：HTML）是一種用於建立網頁的標準標記語言。HTML是一種基礎技術，常與CSS、JavaScript一起被眾多網站用於設計網頁、網頁應用程式以及行動應用程式的使用者介面-3-。網頁瀏覽器可以讀取HTML檔案，並將其彩現成視覺化網頁。HTML描述了一個網站的結構語意隨著線索的呈現，使之成為一種標記語言而非程式語言。目前已經到了-5-0-版。"><a href="#超文本標記語言（英語：HyperText-Markup-Language，簡稱：HTML）是一種用於建立網頁的標準標記語言。HTML是一種基礎技術，常與CSS、JavaScript一起被眾多網站用於設計網頁、網頁應用程式以及行動應用程式的使用者介面-3-。網頁瀏覽器可以讀取HTML檔案，並將其彩現成視覺化網頁。HTML描述了一個網站的結構語意隨著線索的呈現，使之成為一種標記語言而非程式語言。目前已經到了-5-0-版。" class="headerlink" title="超文本標記語言（英語：HyperText Markup Language，簡稱：HTML）是一種用於建立網頁的標準標記語言。HTML是一種基礎技術，常與CSS、JavaScript一起被眾多網站用於設計網頁、網頁應用程式以及行動應用程式的使用者介面[3]。網頁瀏覽器可以讀取HTML檔案，並將其彩現成視覺化網頁。HTML描述了一個網站的結構語意隨著線索的呈現，使之成為一種標記語言而非程式語言。目前已經到了 5.0 版。"></a>超文本標記語言（英語：HyperText Markup Language，簡稱：HTML）是一種用於建立網頁的標準標記語言。HTML是一種基礎技術，常與CSS、JavaScript一起被眾多網站用於設計網頁、網頁應用程式以及行動應用程式的使用者介面[3]。網頁瀏覽器可以讀取HTML檔案，並將其彩現成視覺化網頁。HTML描述了一個網站的結構語意隨著線索的呈現，使之成為一種標記語言而非程式語言。目前已經到了 5.0 版。</h5><h2 id="標籤元素"><a href="#標籤元素" class="headerlink" title="標籤元素"></a>標籤元素</h2><p>使用標籤元素來呈現網頁內容，通常為 “區塊級” 或是 “行內”。瀏覽器預設以在元素前後換行(另起一行)的方式，表現區塊級元素。視覺上會呈現為一排縱向堆疊的方塊。行內元素是與鄰近元素保持在同一行。  </p><p>元素組成可以加入屬性及屬性值，可以同時有多種屬性及值，每個標籤都可以有 id 及 class 屬性。</p><p>id=”名稱”：識別單一元素用，可利用 id 來跟特定元素互動，名稱不能相同。<br>class=”名稱”：識別同類別元素，可利用 class 來跟同類別元素互動，多元素可以同一個 class 類別。</p><p>屬性也可以自訂，使用方式為 <code>date-*</code> 。</p><p>e.g.</p><p><code>data-timezone=&quot;Europe/London&quot;</code>  </p><p>利用 <code>getAttribute</code> 方法可取出值。</p><p><code>let timezone = tz.getAttribute(&#39;data-timezone&#39;);</code></p><h2 id="標籤種類"><a href="#標籤種類" class="headerlink" title="標籤種類"></a>標籤種類</h2><h3 id="網頁頁面資訊"><a href="#網頁頁面資訊" class="headerlink" title="網頁頁面資訊"></a>網頁頁面資訊</h3><h4 id="版本宣告-HTML5"><a href="#版本宣告-HTML5" class="headerlink" title="版本宣告(HTML5)"></a>版本宣告(HTML5)</h4><p><code>&lt;!DOCTPYE html&gt;</code></p><h4 id="網頁語系"><a href="#網頁語系" class="headerlink" title="網頁語系"></a>網頁語系</h4><p><code>&lt;html lang=&quot;en&quot;&gt;</code></p><h4 id="網頁資訊"><a href="#網頁資訊" class="headerlink" title="網頁資訊"></a>網頁資訊</h4><p><code>&lt;head&gt;&lt;/head&gt;</code> 裡面通常包含 <code>&lt;meta&gt;</code></p><p><code>&lt;meta&gt;</code> 提供網頁內容資訊給瀏覽器或搜尋引擎通常有以下屬性：  </p><p>用來寫網頁的簡短描述  </p><p><code>name=&quot;description&quot; content=&quot;網頁簡短描述&quot;</code>   </p><p>放置網頁關鍵字    </p><p><code>name=&quot;keywords&quot; content=&quot;網頁關鍵字&quot;</code>  </p><p>內容種類及編碼</p><p><code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html&quot;; charset=&quot;uft-8″&gt;</code>  </p><p>使用語言</p><p><code>&lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;zh-TW&quot;&gt;</code>  </p><p>自動更新時間</p><p><code>&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;time&quot;&gt;</code></p><p>避免瀏覽器儲存快取  </p><p><code>&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no cache&quot;&gt;</code>  </p><h4 id="瀏覽器頂端或該頁面標題列"><a href="#瀏覽器頂端或該頁面標題列" class="headerlink" title="瀏覽器頂端或該頁面標題列"></a>瀏覽器頂端或該頁面標題列</h4><p><code>&lt;title&gt;&lt;/title&gt;</code>  </p><h4 id="連結外部資源"><a href="#連結外部資源" class="headerlink" title="連結外部資源"></a>連結外部資源</h4><p><code>&lt;link&gt;</code><br>ps. 一般有 rel、type、href 屬性。</p><blockquote><p>rel=”stylesheet”：連結樣式。<br>type=”text/css”：連接類型。(不一定要加上)<br>href=”URL”：連結位置。<br>crossorigin＝”anonymous”：屬性是否使用CORS(不一定要加)，anonymous：發起跨域請求，但不發送認證訊息。  </p></blockquote><p>e.g.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&quot; integrity=&quot;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T&quot; crossorigin=&quot;anonymous&quot;&gt;</span><br></pre></td></tr></table></figure></div><h4 id="script-外部引用"><a href="#script-外部引用" class="headerlink" title="script 外部引用"></a>script 外部引用</h4><p><code>&lt;script src=&quot;/path/to/your.js&quot;&gt;&lt;/script&gt;</code><br>ps. 另外可加上 async 、 defer 屬性(必須搭配 src)。</p><blockquote><p>async：下載後會先執行，但執行此 js 同時也繼續載入頁面及執行其他 js。<br>defer：要整個頁面都下載及分析完成後才會執行，非常類似於把 js 放在頁尾的情況。<br>integrity: 驗證完整性。</p></blockquote><p>e.g.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script defer src=&quot;https://use.fontawesome.com/releases/v5.0.8/js/solid.js&quot; integrity=&quot;sha384-+Ga2s7YBbhOD6nie0DzrZpJes+b2K1xkpKxTFFcx59QmVPaSA8c7pycsNaFwUK6l&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div><h3 id="網頁內容標籤"><a href="#網頁內容標籤" class="headerlink" title="網頁內容標籤"></a>網頁內容標籤</h3><h4 id="body-標籤包含的元素會顯示在瀏覽器視窗，標籤組成有分成語意及無語意，來描述頁面資料及結構，視覺效果用-CSS-處理。"><a href="#body-標籤包含的元素會顯示在瀏覽器視窗，標籤組成有分成語意及無語意，來描述頁面資料及結構，視覺效果用-CSS-處理。" class="headerlink" title="body 標籤包含的元素會顯示在瀏覽器視窗，標籤組成有分成語意及無語意，來描述頁面資料及結構，視覺效果用 CSS 處理。"></a>body 標籤包含的元素會顯示在瀏覽器視窗，標籤組成有分成語意及無語意，來描述頁面資料及結構，視覺效果用 CSS 處理。</h4><p><code>&lt;body&gt;&lt;/body&gt;</code></p><h4 id="div-區塊標籤，可當做無語意的-lt-header-gt-、-lt-article-gt-，無明顯含義的區塊或為了排版目的"><a href="#div-區塊標籤，可當做無語意的-lt-header-gt-、-lt-article-gt-，無明顯含義的區塊或為了排版目的" class="headerlink" title="div 區塊標籤，可當做無語意的 &lt;header&gt;、&lt;article&gt;，無明顯含義的區塊或為了排版目的"></a>div 區塊標籤，可當做無語意的 <code>&lt;header&gt;</code>、<code>&lt;article&gt;</code>，無明顯含義的區塊或為了排版目的</h4><p><code>&lt;div&gt;&lt;/div&gt;</code>  </p><h4 id="span-行內標籤，可當做無語意的-lt-strong-gt-、-lt-em-gt-。將文字與元素群組組在行內中。"><a href="#span-行內標籤，可當做無語意的-lt-strong-gt-、-lt-em-gt-。將文字與元素群組組在行內中。" class="headerlink" title="span 行內標籤，可當做無語意的 &lt;strong&gt;、&lt;em&gt;。將文字與元素群組組在行內中。"></a>span 行內標籤，可當做無語意的 <code>&lt;strong&gt;</code>、<code>&lt;em&gt;</code>。將文字與元素群組組在行內中。</h4><p><code>&lt;span&gt;&lt;/span&gt;</code></p><h4 id="樣式標籤，使用-css-樣式-內部宣告用-。"><a href="#樣式標籤，使用-css-樣式-內部宣告用-。" class="headerlink" title="樣式標籤，使用 css 樣式(內部宣告用)。"></a>樣式標籤，使用 css 樣式(內部宣告用)。</h4><p><code>&lt;style type=&quot;text/css&quot;&gt;&lt;/style&gt;</code></p><h3 id="語意標籤"><a href="#語意標籤" class="headerlink" title="語意標籤"></a>語意標籤</h3><p>用來排版及了解網頁區塊的設計目的，語意標籤和 <code>&lt;div&gt;</code>、<code>&lt;span&gt;</code> 在排版上具有完全一樣的特性，雖可用 <code>&lt;div&gt;</code>、<code>&lt;span&gt;</code> 來快速排版，但最好用以下語意標籤來替代。使用 HTML5 語意化標籤的優點有可以快速抓到網頁架構和每個區塊的位置，對於 SEO 優化有幫助。</p><h4 id="HTML5-語意標籤-大多是區塊標籤"><a href="#HTML5-語意標籤-大多是區塊標籤" class="headerlink" title="HTML5 語意標籤(大多是區塊標籤)"></a>HTML5 語意標籤(大多是區塊標籤)</h4><p><code>&lt;header&gt;</code>：網頁的標頭，通常放置網站標題。<br><code>&lt;nav&gt;</code>：網頁的選單、導覽。<br><code>&lt;main&gt;</code>：網頁的主要內容。<br><code>&lt;aside&gt;</code>：網頁的側欄、附加內容。<br><code>&lt;article&gt;</code>：一篇文章內容。<br><code>&lt;section&gt;</code>：自訂的區塊，例如數篇摘要組成的空間。<br><code>&lt;footer&gt;</code>：網頁的頁尾，通常放置聯絡方式、著作權宣告等等。<br><code>&lt;mark&gt;</code>：強調一小塊內容。<br><code>&lt;time&gt;</code>：顯示日期時間。  //不是區塊<br><code>&lt;mark&gt;</code>：如黃色螢光筆的方式畫出重點，強調內容。 //不是區塊<br><code>&lt;details&gt;</code>：描述文章的細節。  //不是區塊<br><code>&lt;figure&gt;</code>、<code>&lt;figcaption&gt;</code>：<code>&lt;figure&gt;</code>用於圖像，<code>&lt;figcaption&gt;</code>用於圖像標題。<br><code>&lt;hgroup&gt;</code>：當內容有主標題及次標題等多個標題的狀況下使用。<br><code>&lt;cite&gt;</code>：引用其他文獻或作品(例如書籍、歌曲、電影、繪畫、雕塑等）的標題。  ps.也可當做屬性用   //不是區塊  </p><a href="/2020/01/15/HTML-base/HTML5.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2020/01/15/HTML-base/HTML5.png" title="This is an image"></a><p>e.g.</p><p>首先是使用 <code>&lt;div&gt;</code> 可能的網頁結構，除了基本元素之外，主內容展示一篇文章和側欄，頁尾則顯示網頁最後更新的時間：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;header&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;nav&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;article&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;aside&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">    Updated on &lt;span class=&quot;time&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div><p>接著改用語意標籤，語意標籤和 <code>&lt;div&gt;</code>、<code>&lt;span&gt;</code> 一樣，沒有預設樣式。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;header&gt;&lt;/header&gt;</span><br><span class="line">&lt;nav&gt;&lt;/nav&gt;</span><br><span class="line">&lt;main&gt;</span><br><span class="line">    &lt;article&gt;&lt;/article&gt;</span><br><span class="line">    &lt;aside&gt;&lt;/aside&gt;</span><br><span class="line">&lt;/main&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">    Updated on &lt;time&gt;&lt;/time&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure></div><h4 id="空白："><a href="#空白：" class="headerlink" title="空白："></a>空白：</h4><p>原始碼可用空白字元來排版，因為瀏覽器有空白壓縮功能，<br>兩個或以上的空白字元，瀏覽器畫面上只會顯示一個空白，<br>原始碼內的斷行也視為單一空白字元。</p><h4 id="標題-區塊標籤"><a href="#標題-區塊標籤" class="headerlink" title="標題  //區塊標籤"></a>標題  //區塊標籤</h4><p><code>&lt;h1&gt;&lt;/h1&gt;</code> ~ <code>&lt;h6&gt;&lt;/h6&gt;</code></p><h4 id="段落-區塊標籤"><a href="#段落-區塊標籤" class="headerlink" title="段落  //區塊標籤"></a>段落  //區塊標籤</h4><p><code>&lt;p&gt;&lt;/p&gt;</code></p><h4 id="粗體"><a href="#粗體" class="headerlink" title="粗體"></a>粗體</h4><p><code>&lt;b&gt;&lt;/b&gt;</code></p><h4 id="斜體"><a href="#斜體" class="headerlink" title="斜體"></a>斜體</h4><p><code>&lt;i&gt;&lt;/i&gt;</code></p><h4 id="上標"><a href="#上標" class="headerlink" title="上標"></a>上標</h4><p><code>&lt;sup&gt;&lt;/sup&gt;</code></p><h4 id="下標"><a href="#下標" class="headerlink" title="下標"></a>下標</h4><p><code>&lt;sub&gt;&lt;/sub&gt;</code></p><h4 id="斷行"><a href="#斷行" class="headerlink" title="斷行"></a>斷行</h4><p><code>&lt;br&gt;</code></p><h4 id="水平線-區塊標籤"><a href="#水平線-區塊標籤" class="headerlink" title="水平線  //區塊標籤"></a>水平線  //區塊標籤</h4><p><code>&lt;hr&gt;</code></p><h4 id="加強，通常標記為重要"><a href="#加強，通常標記為重要" class="headerlink" title="加強，通常標記為重要"></a>加強，通常標記為重要</h4><p><code>&lt;strong&gt;&lt;/strong&gt;</code></p><h4 id="斜體，強調元素內容"><a href="#斜體，強調元素內容" class="headerlink" title="斜體，強調元素內容"></a>斜體，強調元素內容</h4><p><code>&lt;em&gt;&lt;/em&gt;</code></p><h4 id="編號清單-區塊標籤"><a href="#編號清單-區塊標籤" class="headerlink" title="編號清單  //區塊標籤"></a>編號清單  //區塊標籤</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;      </span><br><span class="line">  &lt;li&gt;a&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;a&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></div><h4 id="項目清單-區塊標籤"><a href="#項目清單-區塊標籤" class="headerlink" title="項目清單  //區塊標籤"></a>項目清單  //區塊標籤</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;a&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;a&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></div><h4 id="定義清單-區塊標籤"><a href="#定義清單-區塊標籤" class="headerlink" title="定義清單   //區塊標籤"></a>定義清單   //區塊標籤</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;     </span><br><span class="line">  &lt;dt&gt;a&lt;/dt&gt;     //被定義名詞</span><br><span class="line">  &lt;dd&gt;bb&lt;/dd&gt;    // 定義</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></div><h4 id="巢狀清單"><a href="#巢狀清單" class="headerlink" title="巢狀清單"></a>巢狀清單</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;           </span><br><span class="line">  &lt;li&gt;a&lt;/li&gt;</span><br><span class="line">       &lt;ul&gt;      </span><br><span class="line">         &lt;li&gt;cc&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;dd&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">  &lt;li&gt;a&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></div><h4 id="將內容縮排，通常作為引述-區塊標籤"><a href="#將內容縮排，通常作為引述-區塊標籤" class="headerlink" title="將內容縮排，通常作為引述   區塊標籤"></a>將內容縮排，通常作為引述   區塊標籤</h4><p><code>&lt;blockquote&gt;&lt;/blockquote&gt;</code></p><h4 id="引號"><a href="#引號" class="headerlink" title="引號"></a>引號</h4><p><code>&lt;q&gt;&lt;/q&gt;</code></p><p>ps.<code>&lt;blockquote&gt;</code>及<code>&lt;q&gt;</code>通常會加上 cite=”url” 屬性標明來源。</p><h4 id="縮寫及縮略字"><a href="#縮寫及縮略字" class="headerlink" title="縮寫及縮略字"></a>縮寫及縮略字</h4><p><code>&lt;abbr&gt;&lt;/abbr&gt;</code></p><p>ps. 可加上 title 屬性來註記全名</p><h4 id="email-or-地址-區塊標籤"><a href="#email-or-地址-區塊標籤" class="headerlink" title="email or 地址    //區塊標籤"></a>email or 地址    //區塊標籤</h4><p><code>&lt;address&gt;&lt;/address&gt;</code></p><h4 id="插入字，會加上底線"><a href="#插入字，會加上底線" class="headerlink" title="插入字，會加上底線"></a>插入字，會加上底線</h4><p><code>&lt;ins&gt;&lt;/ins&gt;</code></p><h4 id="刪節線，元素內容會加上刪節線"><a href="#刪節線，元素內容會加上刪節線" class="headerlink" title="刪節線，元素內容會加上刪節線"></a>刪節線，元素內容會加上刪節線</h4><p><code>&lt;del&gt;&lt;/del&gt;</code></p><h4 id="元素內容加上刪節線，標示不正確但不刪除的內容"><a href="#元素內容加上刪節線，標示不正確但不刪除的內容" class="headerlink" title="元素內容加上刪節線，標示不正確但不刪除的內容"></a>元素內容加上刪節線，標示不正確但不刪除的內容</h4><p><code>&lt;s&gt;&lt;/s&gt;</code></p><h4 id="畫-canvas-區塊標籤"><a href="#畫-canvas-區塊標籤" class="headerlink" title="畫 canvas     //區塊標籤"></a>畫 canvas     //區塊標籤</h4><p><code>&lt;canvas&gt;&lt;/canvas&gt;</code></p><h4 id="置中，標籤內元素會置中"><a href="#置中，標籤內元素會置中" class="headerlink" title="置中，標籤內元素會置中"></a>置中，標籤內元素會置中</h4><p><code>&lt;center&gt;&lt;/center&gt;</code></p><h4 id="顯示標籤內資料的原始格式"><a href="#顯示標籤內資料的原始格式" class="headerlink" title="顯示標籤內資料的原始格式"></a>顯示標籤內資料的原始格式</h4><p><code>&lt;pre&gt;&lt;/pre&gt;</code></p><h4 id="旁註標記"><a href="#旁註標記" class="headerlink" title="旁註標記"></a>旁註標記</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ruby&gt;</span><br><span class="line"> 漢 &lt;rt&gt; ㄏㄢˋ &lt;/rt&gt;  漢 字的上面會標示 ㄏㄢˋ</span><br><span class="line"> 漢 &lt;rr&gt; ㄏㄢˋ &lt;/rr&gt;  漢 字的旁邊會標示 ㄏㄢˋ</span><br><span class="line">&lt;/ruby&gt;</span><br></pre></td></tr></table></figure></div><h4 id="插入圖片"><a href="#插入圖片" class="headerlink" title="插入圖片"></a>插入圖片</h4><p><code>&lt;img src=&quot;圖片位置&quot; alt=&quot;沒有圖片時的替代文字&quot; title=&quot;圖片資訊&quot;&gt;</code></p><p>HTML5 用法  可放置一張以上的圖</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;figure&gt;  </span><br><span class="line">&lt;img src=&quot;圖片位置&quot; alt=&quot;沒有圖片時的替代文字&quot; &gt; </span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;figcaption&gt;圖片說明&lt;/figcaption&gt;</span><br><span class="line">&lt;/figure&gt;</span><br></pre></td></tr></table></figure></div><h4 id="超連結"><a href="#超連結" class="headerlink" title="超連結"></a>超連結</h4><p><code>&lt;a href=&quot;url&quot; target=&quot;_blank&quot;&gt;連結名稱&lt;/a&gt;</code></p><p>ps.</p><blockquote><p>href：可用絕對或相對路徑<br>target=”_blank”：連結另開新視窗<br>title=”提示”：加入滑鼠游標提示<br>href=”#id：連結到同網頁的某個部份<br>href=”url#id”：連結到另一個網頁的某個部份<br>href=”mailto:<a href="mailto:aa@example.org" target="_blank" rel="noopener">aa@example.org</a>“：Email 連結</p></blockquote><p><strong><em>絕對路徑<br>/img/logo.png 根目錄下的圖片<br>page.html 同層目錄中的 html 檔</em></strong>  </p><p><strong><em>相對路徑  (通常用在自己的網站中)<br>./css/all.css  同層目錄中的 css 資料夾裡的 css 檔<br>../img/logo.png 上層目錄中的 img 資料夾裡的圖檔</em></strong></p><h4 id="音訊"><a href="#音訊" class="headerlink" title="音訊"></a>音訊</h4><p><code>&lt;audio src=&quot;url&quot;&gt;&lt;/audio&gt;</code></p><p>屬性：</p><blockquote><p>control 提供撥放控制鈕<br>preload=”none or auto or metadata” 頁面載入時是否載入視訊<br>control 提供撥放控制鈕<br>autoplay 自動播放<br>loop 結束後從頭播放  </p></blockquote><p>多重音訊 HTML5</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio&gt;</span><br><span class="line">&lt;source src=&quot;檔案路徑&quot; type=&quot;視訊格式&quot; &gt;</span><br><span class="line">&lt;source src=&quot;檔案路徑&quot; type=&quot;視訊格式&quot; &gt;</span><br><span class="line">&lt;/audio&gt;</span><br></pre></td></tr></table></figure></div><h4 id="播放視訊-HTML5-區塊標籤"><a href="#播放視訊-HTML5-區塊標籤" class="headerlink" title="播放視訊(HTML5) //區塊標籤"></a>播放視訊(HTML5) //區塊標籤</h4><p><code>&lt;video src=&quot;url&quot;&gt;&lt;/video&gt;</code><br><strong><em>ps.video 標籤的屬性不需要值，屬性存在選項就會開啟，如果不存在選項就關閉。</em></strong></p><p>屬性：  </p><blockquote><p>src=”檔案路徑”<br>height=”200”<br>width=”100”<br>preload=”none or auto or metadata” 頁面載入時是否載入視訊<br>control 提供撥放控制鈕<br>autoplay 自動播放<br>loop 結束後從頭播放<br>poster=”圖片位置” 視訊下載時或播放前所顯示的影像  </p></blockquote><p>放數個視訊</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;video&gt;</span><br><span class="line">&lt;source src=&quot;檔案路徑&quot; type=&quot;視訊格式&quot; code=&quot;編碼&quot; &gt;</span><br><span class="line">&lt;source src=&quot;檔案路徑&quot; type=&quot;視訊格式&quot; code=&quot;編碼&quot; &gt;</span><br><span class="line">&lt;source src=&quot;檔案路徑&quot; type=&quot;視訊格式&quot; code=&quot;編碼&quot; &gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure></div><h4 id="表格：不要用來排版，只要顯示資料就好。用-CSS-處理排版。"><a href="#表格：不要用來排版，只要顯示資料就好。用-CSS-處理排版。" class="headerlink" title="表格：不要用來排版，只要顯示資料就好。用 CSS 處理排版。"></a>表格：不要用來排版，只要顯示資料就好。用 CSS 處理排版。</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;thead&gt;  &lt;!--表頭--&gt;</span><br><span class="line">    &lt;tr&gt;   &lt;!--列的起始  row - - -  column(行,欄)  | | |  --&gt;</span><br><span class="line">      &lt;th&gt;Month&lt;/th&gt;   &lt;!--表格標題--&gt;</span><br><span class="line">      &lt;th&gt;Savings&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">  &lt;/thead&gt;</span><br><span class="line">  &lt;tbody&gt;  &lt;!--內容--&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;January&lt;/td&gt;    &lt;!--表格內容--&gt;</span><br><span class="line">      &lt;td&gt;$100&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;February&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;$80&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">  &lt;/tbody&gt;</span><br><span class="line">  &lt;tfoot&gt;  &lt;!--註腳--&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;Sum&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;$180&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">  &lt;/tfoot&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;td colspan=&quot;2&quot;&gt;$180&lt;/td&gt;  資料超過一欄 (跨欄)</span><br><span class="line">&lt;td rowspan=&quot;2&quot;&gt;$180&lt;/td&gt;  資料超過一列 (跨列)</span><br></pre></td></tr></table></figure></div><h4 id="表單"><a href="#表單" class="headerlink" title="表單"></a>表單</h4><p><code>&lt;form action=&quot;按下後接收送出資訊的url&quot; method=&quot;get or post&quot; id=&quot;a&quot;&gt;&lt;/from&gt;</code></p><p><strong><em>get：搜尋框 or 只想從伺服器取得資料(普通資料)。<br>post：上傳檔案 or 表單很長 or 有敏感資料(密碼) or 資料加到資料庫或從資料庫刪除。</em></strong></p><p><strong><em>name 跟 value 屬性欄位的值有些會傳給伺服器<br>任何文字輸入欄位可以使用 placeholder 屬性，placeholder=”顯示在欄位內的文字”</em></strong></p><p>e.g.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;按下後接收送出資訊的url&quot; method=&quot;get or post&quot; id=&quot;a&quot;&gt;</span><br><span class="line"> &lt;p&gt;username 文字輸入</span><br><span class="line"> &lt;input type=&quot;text&quot; name=&quot;username&quot; maxlength=&quot;限制字元數&quot;&gt; </span><br><span class="line"> &lt;/p&gt;</span><br><span class="line">  &lt;!--多行文字輸入欄位標籤--&gt;</span><br><span class="line"> &lt;textarea name=&quot;Content&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">  &lt;!--密碼輸入--&gt;</span><br><span class="line"> &lt;input type=&quot;password&quot; name=&quot;username&quot; maxlength=&quot;限制字元數&quot;&gt;</span><br><span class="line">  &lt;!--單選--&gt;</span><br><span class="line"> &lt;input type=&quot;radio&quot; name=&quot;username&quot; value=&quot;傳到伺服器的值，每個單選鈕都不應相同&quot; checked=&quot;checked(預先選好)&quot;&gt;</span><br><span class="line">  &lt;!--勾選(可取消)--&gt;</span><br><span class="line"> &lt;input type=&quot;checkbox&quot; name=&quot;username&quot; value=&quot;傳到伺服器的值，每個單選鈕都不應相同&quot; checked=&quot;checked(預先選好)&quot;&gt;</span><br><span class="line"> &lt;!--下拉式選單 (若都沒 selected 屬性的話，會顯示第一個選項)--&gt;</span><br><span class="line"> &lt;select name=&quot;Location&quot; size=&quot;3&quot; multiple=&quot;multiple(可多選)&quot;&gt;</span><br><span class="line">   &lt;option value=&quot;Taipei&quot; selected=&quot;selected(預先選好)&quot;&gt;台北&lt;/option&gt;</span><br><span class="line">   &lt;option value=&quot;Taoyuan&quot;&gt;桃園&lt;/option&gt;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line">   &lt;!--檔案輸入 (method 必須使用 post)--&gt;</span><br><span class="line">   &lt;input type=&quot;file&quot; name=&quot;username&quot;&gt;</span><br><span class="line">   &lt;!--送出按鈕 (name 跟 value 欄位可用可不用)--&gt;</span><br><span class="line">   &lt;input type=&quot;submit&quot; name=&quot;username&quot; value=&quot;顯示按鈕文字&quot;&gt;</span><br><span class="line">   影像按鈕</span><br><span class="line">   &lt;input type=&quot;image&quot; src=&quot;url&quot;&gt;</span><br><span class="line">&lt;/from&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;&quot; value=&quot;&quot;&gt; 隱藏控制項，用隱藏欄位來記錄資訊</span><br></pre></td></tr></table></figure></div><p>ps.表單驗證<br>HTML5 有驗證功能，加入 required 屬性(不需要值)，由瀏覽器來做。)，HTML5 才有(不支援 HTML5 的瀏覽器會當作文字框)。  </p><p>日期輸入<br><code>&lt;input type=&quot;date&quot; name=&quot;date&quot;&gt;</code><br>EMAIL 輸入<br><code>&lt;input type=&quot;email&quot; name=&quot;email&quot;&gt;</code><br>URL 輸入<br><code>&lt;input type=&quot;url&quot; name=&quot;website&quot;&gt;</code><br>搜尋輸入<br><code>&lt;input type=&quot;search&quot; name=&quot;search&quot;&gt;</code></p><h4 id="label-協助使用者在點選到該標籤時，可以透過-for-的屬性值，去連動具有相同-id-屬性值的標籤。或是直接將-lt-input-gt-元素包圍起來。"><a href="#label-協助使用者在點選到該標籤時，可以透過-for-的屬性值，去連動具有相同-id-屬性值的標籤。或是直接將-lt-input-gt-元素包圍起來。" class="headerlink" title="label 協助使用者在點選到該標籤時，可以透過 for 的屬性值，去連動具有相同 id 屬性值的標籤。或是直接將 &lt;input&gt; 元素包圍起來。"></a>label 協助使用者在點選到該標籤時，可以透過 for 的屬性值，去連動具有相同 id 屬性值的標籤。或是直接將 <code>&lt;input&gt;</code> 元素包圍起來。</h4><p><code>&lt;label for=&quot;某id值&quot;&gt;&lt;/label&gt;</code>  </p><p>e.g.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;booktype&quot; value=&quot;1&quot; id=&quot;booktype1&quot; checked &gt;&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;booktype&quot; value=&quot;2&quot; id=&quot;booktype2&quot; checked &gt;</span><br><span class="line">&lt;label for=&quot;booktype1&quot;&gt;html 書&lt;/label&gt;</span><br></pre></td></tr></table></figure></div><h4 id="按鈕-可添加圖片"><a href="#按鈕-可添加圖片" class="headerlink" title="按鈕(可添加圖片)"></a>按鈕(可添加圖片)</h4><p><code>&lt;button type=&quot;button&quot;&gt;&lt;img src=&quot;url&quot; alt=&quot;&quot;&gt;&lt;/button&gt;</code> </p><h4 id="iframe-顯示別的-url-的網頁內容在本身網頁的某區塊上"><a href="#iframe-顯示別的-url-的網頁內容在本身網頁的某區塊上" class="headerlink" title="iframe 顯示別的 url 的網頁內容在本身網頁的某區塊上"></a>iframe 顯示別的 url 的網頁內容在本身網頁的某區塊上</h4><p><code>&lt;iframe src=&quot;url&quot; height=&quot;20&quot; width=&quot;10&quot;&gt;&lt;/iframe&gt;</code></p><h4 id="註解"><a href="#註解" class="headerlink" title="註解"></a>註解</h4><p><code>&lt;!----&gt;</code></p><h4 id="符號顯示"><a href="#符號顯示" class="headerlink" title="符號顯示"></a>符號顯示</h4><p><code>&amp;lt;</code> &lt;<br><code>&amp;gt;</code> &gt;<br><code>&amp;amp;</code> &amp;<br><code>&amp;copy;</code> 版權符號<br><code>&amp;reg;</code>  註冊商標<br><code>&amp;nbsp;</code> 空白 //在畫面上出現多個空白</p><h4 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h4><p>使用編輯器小技巧(emmet)：  </p><ul><li>若檔案為 *.HTML 的話，在開啟檔案後，打 <code>!</code> ，可產生出以下標籤。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">+ 打 link:css：快速產生 `&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;`</span><br><span class="line"></span><br><span class="line">+ 打 lorem300，可以產生 300個假字。</span><br><span class="line"></span><br><span class="line">+ 使用 `標籤名稱.class名稱*數量&gt;要包覆的標籤1+要包覆的標籤2` 方式，按下 enter，可以快速產生標籤。</span><br><span class="line"></span><br><span class="line">e.g.</span><br><span class="line"></span><br><span class="line">`div.test*2&gt;p+img`</span><br><span class="line"></span><br><span class="line">產生</span><br></pre></td></tr></table></figure></div><p><div class="test"><br>    <p></p><br>    <a href="undefined" data-fancybox="group" data-caption class="fancybox"><img src alt title></a><br></div></p><p><div class="test"><br>    <p></p><br>    <a href="undefined" data-fancybox="group" data-caption class="fancybox"><img src alt title></a><br></div><br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 簡單網頁範例：</span><br></pre></td></tr></table></figure></div></p><p>&lt;!DOCTYPE html&gt;</p><p><html lang="en"><br> <head><meta name="generator" content="Hexo 3.9.0"><br>     <!-- meta 網頁資訊給瀏覽器讀取 --><br>     <meta charset="UTF-8"><br>     <meta name="viewport"><br>     <meta http-equiv="X-UA-compatible" content="ie=edge"><br>     <title>Document</title><br>     <link rel="stylesheet" href="style.css"><br>     <!-- CSS --><br>     <style><br>       h1{color:red}<br>     </style><br> </head><br> <body><br>     <!-- 錨點寫法 --><br>     <!-- emmet寫法 ul>li*3>a{標題} enter後會產生以下標籤     <ul>         <li><a href="">標題</a></li>         <li><a href="">標題</a></li>         <li><a href="">標題</a></li>     </ul> --><br>    <ul><br>        <li><a href="#title1">標題1</a></li><br>        <li><a href="#title2">標題2</a></li><br>        <li><a href="#title3">標題3</a></li><br>        <!-- 標題4錨點定位在page.html的 id=title3 --><br>        <li><a href="page.html#title3">標題4</a></li><br>    </ul><br>    <!-- 標題1 id_name=title1 --><br>    <h1 id="title1">標題一</h1><br>    <!-- vscode 內打 lorem 會產生一段假文 --><br>    <p>lorem</p><br>    <!-- 從上到下讀取到此的網頁程式碼後執行js資料夾的all.js 然後再接著執行下面的程式碼--><br>    <script src="js/all.js"></script><br>    <h1>js後的標題</h1><br>    <p>123</p><br></body><br></html><br><code>`</code></p><p>參考：<br><a href="https://zh.wikipedia.org/wiki/HTML" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/HTML</a><br><a href="http://cychiang719.blogspot.com/2008/08/html.html" target="_blank" rel="noopener">http://cychiang719.blogspot.com/2008/08/html.html</a><br><a href="http://n.sfs.tw/content/index/10323" target="_blank" rel="noopener">http://n.sfs.tw/content/index/10323</a><br><a href="https://ithelp.ithome.com.tw/articles/10160131" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10160131</a><br><a href="http://www.dlps.tc.edu.tw/html_teach/" target="_blank" rel="noopener">http://www.dlps.tc.edu.tw/html_teach/</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>記錄一下 AJAX 操作的幾個方法</title>
      <link href="/2019/12/15/AJAX-base/"/>
      <url>/2019/12/15/AJAX-base/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p>(Asynchronous JavaScript and XML)的縮寫<br><strong>間單來說是與伺服器進行非同步通訊，可用來自伺服器的資料更新網頁元素，綜合了多項技術的瀏覽器端網頁開發技術。可以增進使用者的操作體驗。</strong></p><p><strong>以下介紹幾種使用方法：</strong></p><h2 id="JavaScript-XHR"><a href="#JavaScript-XHR" class="headerlink" title="JavaScript XHR"></a>JavaScript XHR</h2><p><strong>透過 XMLHttpRequest(XHR) 物件作為實作。<br>它能夠在 client 端對 server 端送出 http request，使用的資料格式是 XML(這也變成時代眼淚，現今大多使用 JSON，它的格式像是 JS 中的物件)，用 XMLHttpRequest() 取到的結果會是字串，要額外透過 JSON.parse() 轉成 JSON 才可以使用。</strong>  </p><p><em>Ps.目前較少用，難以閱讀及撰寫，我們大多都會使用框架來處理這段，如 jQuery, Axio…</em></p><p>程式碼大概長這樣：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">function reqOnload () &#123;</span><br><span class="line">  // 資料轉成 JSON 格式</span><br><span class="line">  const data = JSON.parse(this.responseText);</span><br><span class="line">  console.log(data)</span><br><span class="line">&#125;</span><br><span class="line">function reqError (err) &#123;</span><br><span class="line">  console.log(&apos;錯誤&apos;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 宣告一個 XHR 的物件</span><br><span class="line">var Req = new XMLHttpRequest(); </span><br><span class="line">// 定義連線方式 true: 非同步 , false: 同步</span><br><span class="line">Req.open(&apos;get&apos;, &apos;https://randomuser.me/api/&apos;, true);</span><br><span class="line">// 送出請求</span><br><span class="line">Req.send();</span><br><span class="line">// 如果成功就執行 reqOnload()</span><br><span class="line">Req.onload = reqOnload; </span><br><span class="line">// 失敗就 reqError()</span><br><span class="line">Req.onerror = reqError;</span><br><span class="line"></span><br><span class="line">//POST(Form)</span><br><span class="line"></span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&apos;post&apos;, &apos;http://xxx&apos;, true);</span><br><span class="line">xhr.setRequestHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">xhr.send(&apos;name=Bob&amp;password=123456&apos;);</span><br><span class="line"></span><br><span class="line">//POST(JSON)</span><br><span class="line"></span><br><span class="line">var account = &#123;</span><br><span class="line">    name: &apos;Bob&apos;,</span><br><span class="line">    password:&apos;123456&apos;</span><br><span class="line">&#125;</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&apos;post&apos;, &apos;https://xxx&apos;, true);</span><br><span class="line">xhr.setRequestHeader(&apos;Content-type&apos;, &apos;application/json&apos;);</span><br><span class="line">var data = JSON.stringify(account);</span><br><span class="line">xhr.send(data);</span><br></pre></td></tr></table></figure></div><p>XMLHttpRequest 有各種狀態碼(readyState)，能夠知道當前進行到什麼狀態。  </p><blockquote><p>0 : 已經產生 XMLHttpRequest，但還沒連結到要取得的網址。<br>1 : 用了 open() ，但還沒傳送資料過去<br>2 : 用了 send()<br>3 : loading 資料<br>4 : 撈回資料了，數據已接收完全  </p></blockquote><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: &quot;http://xxx&quot;,</span><br><span class="line">    // 傳送至Server的資料，必須為物件格式</span><br><span class="line">    data : &#123; </span><br><span class="line">      datafromtestFile : $(&quot;#input&quot;).val(),                            </span><br><span class="line">    &#125;,</span><br><span class="line">    type: &quot;GET&quot;,</span><br><span class="line">    // 傳回 JSON</span><br><span class="line">    dataType: &apos;json&apos;,</span><br><span class="line">    // 成功時執行函式</span><br><span class="line">    success: function(data) &#123;</span><br><span class="line">    // 取得的遠端資料</span><br><span class="line">    console.log(data);</span><br><span class="line">  &#125;,</span><br><span class="line">    error: function(error) &#123;</span><br><span class="line">    console.log(&quot;error:&quot;, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><p><strong>ES6 原生方法 ，是搭配 Promise(Promise 的基本用法)來執行請求網站和請求後獲取 Response 的處理。then 作為下一步，catch 作為錯誤回應 (404, 500…)。回傳的為 ReadableStream 物件，需要使用不同資料類型使用對應方法，才能正確取得資料物件。</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fetch(&apos;http://abc.com/&apos;, &#123;method: &apos;GET&apos;&#125;)</span><br><span class="line">.then((response) =&gt; &#123;</span><br><span class="line">    // 這裡會得到一個 ReadableStream 的物件</span><br><span class="line">    console.log(response);</span><br><span class="line">    // 可以透過 blob(), json(), text() 轉成可用的資訊</span><br><span class="line">    return response.json(); </span><br><span class="line">  &#125;).then((jsonData) =&gt; &#123;</span><br><span class="line">    console.log(jsonData);</span><br><span class="line">  &#125;).catch((err) =&gt; &#123;</span><br><span class="line">    console.log(&apos;錯誤:&apos;, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>text()：改為 response.text()，取得的資料格式將會是純字串。<br>blob()：將資料轉為 blob 物件，像是圖片就可以做這樣的轉換(指的是圖片檔案本身)。  </p><p>範例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// unsplash 上的圖片</span><br><span class="line">let url = &apos;https://images.unsplash.com/photo-1513313778780-9ae4807465f0?auto=format&amp;fit=crop&amp;w=634&amp;q=80&apos;</span><br><span class="line">fetch(url)</span><br><span class="line">  .then((response) =&gt; &#123;</span><br><span class="line">    return response.blob();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then((imageBlob) =&gt; &#123;</span><br><span class="line">    let img = document.createElement(&apos;IMG&apos;)</span><br><span class="line">    document.querySelector(&apos;.newImg&apos;).appendChild(img);</span><br><span class="line">    // 將 blog 物件轉為 url</span><br><span class="line">    img.src = URL.createObjectURL(imageBlob);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></div><p>用 Fetch 做 post 時，需做一些調整。將 body 所送出的資料轉純字串後才能送出。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">let url = &apos;https://hexschool-tutorial.herokuapp.com/api/signup&apos;;</span><br><span class="line">fetch(url, &#123;</span><br><span class="line">  method: &apos;POST&apos;,</span><br><span class="line">  // headers 加入 json 格式</span><br><span class="line">  headers: &#123;</span><br><span class="line">    &apos;Content-Type&apos;: &apos;application/json&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  // body 將 json 轉字串送出</span><br><span class="line">  body: JSON.stringify(&#123;</span><br><span class="line">    email: &apos;lovef1232e@hexschool.com&apos;,</span><br><span class="line">    password: &apos;12345678&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then((response) =&gt; &#123;</span><br><span class="line">    return response.json(); </span><br><span class="line">  &#125;).then((jsonData) =&gt; &#123;</span><br><span class="line">    console.log(jsonData);</span><br><span class="line">  &#125;).catch((err) =&gt; &#123;</span><br><span class="line">    console.log(&apos;錯誤:&apos;, err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>使用 Fetch 需要注意，只要是伺服器有正確回應，不管是什麼狀態碼，就算是 404 也會將 response 傳入 then 之後的 function 繼續執行，而不會進到 catch。</p><p>此時可以透過 response 中的 ok 來判斷狀態碼是否正常，如果是 true 則表示狀態碼在於 200~299 之間。</p><p>所以可以多加個判斷</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fetch(&apos;http://abc.com/&apos;, &#123;method: &apos;get&apos;&#125;)</span><br><span class="line">.then((response) =&gt; &#123;</span><br><span class="line"> if (!response.ok) &#123;</span><br><span class="line">        throw new Error(response.statusText);</span><br><span class="line">    &#125;</span><br><span class="line">    // 這裡會得到一個 ReadableStream 的物件</span><br><span class="line">    console.log(response);</span><br><span class="line">    // 可以透過 blob(), json(), text() 轉成可用的資訊</span><br><span class="line">    return response.json(); </span><br><span class="line">  &#125;).then((jsonData) =&gt; &#123;</span><br><span class="line">    console.log(jsonData);</span><br><span class="line">  &#125;).catch((err) =&gt; &#123;</span><br><span class="line">    console.log(&apos;錯誤:&apos;, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p><strong>1.依賴 ES6 Promise，若不支援請使用 Polyfill<br>2.支援 Promise API<br>3.可取消請求 (Promise 無法)<br>4.自動轉換 JSON<br>5.axios 實體建立，可統一套用 Config、管理 API</strong>  </p><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p><code>$ npm install axios</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// GET</span><br><span class="line">axios.get(&apos;http://user/12345&apos;)</span><br><span class="line">.then(res =&gt;&#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// POST</span><br><span class="line">axios(&#123;</span><br><span class="line">    method: &apos;post&apos;,</span><br><span class="line">    url: &apos;/user/12345&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        firstName: &apos;Fred&apos;,</span><br><span class="line">        lastName: &apos;Flintstone&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;)</span><br><span class="line">.finally(() =&gt; &#123; /* 不論失敗成功皆會執行 */ </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>管理 API 方式</p><p>開新檔 api.js</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line"></span><br><span class="line">// User相關的 api</span><br><span class="line">const userRequest = axios.create(&#123;</span><br><span class="line">  baseURL: &apos;https://api/user/&apos;</span><br><span class="line">&#125;);</span><br><span class="line">// 文章相關的 api</span><br><span class="line">const articleRequest = axios.create(&#123;</span><br><span class="line">  baseURL: &apos;https://api/article/&apos;</span><br><span class="line">&#125;);</span><br><span class="line">// 搜尋相關的 api</span><br><span class="line">const searchRequest = axios.create(&#123;</span><br><span class="line">  baseURL: &apos;https://api/search/&apos;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// User 相關的 api</span><br><span class="line">export const apiUserLogin = data =&gt; userRequest.post(&apos;/signIn&apos;, data);</span><br><span class="line">export const apiUserLogout = data =&gt; userRequest.post(&apos;/signOut&apos;, data);</span><br><span class="line">export const apiUserSignUp = data =&gt; userRequest.post(&apos;/signUp&apos;, data);</span><br><span class="line"></span><br><span class="line">// 文章相關的 api</span><br><span class="line">export const apiArticleItem = () =&gt; articleRequest.get(&apos;/ArticleItem&apos;);</span><br><span class="line">export const apiArticleMsg = data =&gt; articleRequest.post(&apos;/ArticleMsg&apos;, data);</span><br><span class="line">export const apiArticleLink = data =&gt; articleRequest.post(&apos;/ArticleLink&apos;, data);</span><br><span class="line"></span><br><span class="line">// 搜尋相關的 api</span><br><span class="line">export const apiSearch = data =&gt; searchRequest.get(`/Search?searchdata=$&#123;data&#125;`);</span><br><span class="line">export const apiSearchType = () =&gt; searchRequest.get(`/SearchType`);</span><br></pre></td></tr></table></figure></div><p>如果需要用到的話，就 import</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// import api.js</span><br><span class="line">import &#123; apiUserLogin, apiUserLogout, apiUserSignUp &#125; from &quot;api.js&quot;; </span><br><span class="line"></span><br><span class="line">// 使用 Login</span><br><span class="line">apiUserLogin(&#123;</span><br><span class="line">    email: &quot;mike@gmail.com&quot;,</span><br><span class="line">    password: &quot;123456789&quot;</span><br><span class="line">&#125;)</span><br><span class="line">.then(res=&gt; &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(err=&gt; &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>參考：<br><a href="https://ithelp.ithome.com.tw/articles/10212121" target="_blank" rel="noopener">axios 默認值 &amp; 建立實體 &amp; 錯誤偵測</a><br><a href="https://wcc723.github.io/javascript/2017/12/28/javascript-fetch/" target="_blank" rel="noopener">鐵人賽：ES6 原生 Fetch 遠端資料方法</a><br><a href="https://medium.com/i-am-mike/使用axios時你的api都怎麼管理-557d88365619?" target="_blank" rel="noopener">使用Axios你的API都怎麼管理？</a><br><a href="https://ithelp.ithome.com.tw/articles/10203820?sc=iThelpR" target="_blank" rel="noopener">Day21 AJAX(1): 科普 &amp; XHR</a><br><a href="https://ithelp.ithome.com.tw/articles/10204214" target="_blank" rel="noopener">Day22 AJAX(2): Fetch</a><br><a href="https://ithelp.ithome.com.tw/articles/10212120" target="_blank" rel="noopener">axios 基本使用 &amp; Config</a><br><a href="https://skychang.github.io/2015/11/02/JavaScript-Use_Javascript_Fetch/" target="_blank" rel="noopener">使用 fetch 來進行 Ajax 呼叫</a><br><a href="https://yuugou727.github.io/blog/2018/03/04/axios/" target="_blank" rel="noopener">axios小筆記：一些特殊用法</a></p>]]></content>
      
      
      <categories>
          
          <category> AJAX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap 簡單介紹</title>
      <link href="/2019/12/14/bootstrap-base/"/>
      <url>/2019/12/14/bootstrap-base/</url>
      
        <content type="html"><![CDATA[<h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><h3 id="前端框架，含HTML、CSS及JS等內容的框架，可以快速開發出一個網頁版型-包含響應式網頁-。"><a href="#前端框架，含HTML、CSS及JS等內容的框架，可以快速開發出一個網頁版型-包含響應式網頁-。" class="headerlink" title="前端框架，含HTML、CSS及JS等內容的框架，可以快速開發出一個網頁版型(包含響應式網頁)。"></a>前端框架，含HTML、CSS及JS等內容的框架，可以快速開發出一個網頁版型(包含響應式網頁)。</h3><h3 id="簡單介紹一下樣式寫法："><a href="#簡單介紹一下樣式寫法：" class="headerlink" title="簡單介紹一下樣式寫法："></a>簡單介紹一下樣式寫法：</h3><h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><h5 id="對齊"><a href="#對齊" class="headerlink" title="對齊"></a>對齊</h5><p><code>text-justify</code>、<code>text-center</code>   </p><h5 id="置右"><a href="#置右" class="headerlink" title="置右"></a>置右</h5><p><code>text-right</code>   </p><h5 id="字體"><a href="#字體" class="headerlink" title="字體"></a>字體</h5><p><code>font-weight-bold</code>  </p><h5 id="大小寫"><a href="#大小寫" class="headerlink" title="大小寫"></a>大小寫</h5><p><code>text-capitalize</code>   </p><h4 id="文字顏色"><a href="#文字顏色" class="headerlink" title="文字顏色"></a>文字顏色</h4><h5 id="綠"><a href="#綠" class="headerlink" title="綠"></a>綠</h5><p><code>class=&quot;text-success&quot;</code></p><h4 id="去除文字類別效果"><a href="#去除文字類別效果" class="headerlink" title="去除文字類別效果"></a>去除文字類別效果</h4><p><code>class=&quot;text-decoration-none&quot;</code></p><h4 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h4><p><code>bg-primary</code></p><h4 id="背景梯度-Background-gradient-顏色漸層"><a href="#背景梯度-Background-gradient-顏色漸層" class="headerlink" title="背景梯度(Background gradient)顏色漸層"></a>背景梯度(Background gradient)顏色漸層</h4><p><code>bg-gradient-warning</code></p><h4 id="邊界"><a href="#邊界" class="headerlink" title="邊界"></a>邊界</h4><h5 id="四邊都有"><a href="#四邊都有" class="headerlink" title="四邊都有"></a>四邊都有</h5><p><code>border</code>  </p><h5 id="只有上邊界"><a href="#只有上邊界" class="headerlink" title="只有上邊界"></a>只有上邊界</h5><p><code>border-top</code>  </p><h5 id="沒有邊界"><a href="#沒有邊界" class="headerlink" title="沒有邊界"></a>沒有邊界</h5><p><code>border-0</code>  </p><h5 id="除上邊界沒有其他三邊有"><a href="#除上邊界沒有其他三邊有" class="headerlink" title="除上邊界沒有其他三邊有"></a>除上邊界沒有其他三邊有</h5><p><code>border-top-0</code></p><h4 id="邊界顏色"><a href="#邊界顏色" class="headerlink" title="邊界顏色"></a>邊界顏色</h4><p><code>class=&quot;border border-primary&quot;</code></p><h4 id="邊界角度-Border-radius"><a href="#邊界角度-Border-radius" class="headerlink" title="邊界角度(Border-radius)"></a>邊界角度(Border-radius)</h4><h5 id="四周都圓角"><a href="#四周都圓角" class="headerlink" title="四周都圓角"></a>四周都圓角</h5><p><code>class=&quot;rounded&quot;</code>  </p><h5 id="圓形"><a href="#圓形" class="headerlink" title="圓形"></a>圓形</h5><p><code>rounded-circle</code>  </p><h5 id="無圓角"><a href="#無圓角" class="headerlink" title="無圓角"></a>無圓角</h5><p><code>rounded-0</code>  </p><h5 id="上方圓角"><a href="#上方圓角" class="headerlink" title="上方圓角"></a>上方圓角</h5><p><code>rounded-top</code></p><h4 id="清除浮動-Clearfix"><a href="#清除浮動-Clearfix" class="headerlink" title="清除浮動(Clearfix)"></a>清除浮動(Clearfix)</h4><p><code>class=&quot;clearfix&quot;</code></p><h4 id="display-屬性設定"><a href="#display-屬性設定" class="headerlink" title="display 屬性設定"></a>display 屬性設定</h4><p><code>class=&quot;d-block&quot;</code>   // display: block</p><p><code>class=&quot;d-inline&quot;</code>  // display: inline</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;bg-danger m-5 p-2 text-light d-inline&quot;&gt;d-inline&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;bg-warning m-5 p-2 text-secondary d-inline&quot;&gt;d-inline&lt;/div&gt;</span><br><span class="line">&lt;span class=&quot;bg-danger m-5 p-2 text-light d-block&quot;&gt;text-danger&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;bg-warning m-5 p-2 text-secondary d-block&quot;&gt;text-secondary&lt;/span&gt;</span><br></pre></td></tr></table></figure></div><a href="/2019/12/14/bootstrap-base/bootstrap2.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/14/bootstrap-base/bootstrap2.png" title="This is an image"></a><h4 id="隱藏元素也不佔空間"><a href="#隱藏元素也不佔空間" class="headerlink" title="隱藏元素也不佔空間"></a>隱藏元素也不佔空間</h4><p><code>class=&quot;d-none&quot;</code></p><h4 id="顯示陰影"><a href="#顯示陰影" class="headerlink" title="顯示陰影"></a>顯示陰影</h4><p><code>class=&quot;shadow&quot;</code></p><h4 id="Close-icon-x"><a href="#Close-icon-x" class="headerlink" title="Close icon  x"></a>Close icon  x</h4><p><code>&lt;button type=&quot;button&quot; class=&quot;close&quot; arialabel=&quot;Close&quot;&gt;</code></p><p>詳細樣式、元件、模板請參考網站  <a href="https://getbootstrap.com/docs/4.0/utilities" target="_blank" rel="noopener">https://getbootstrap.com/docs/4.0/utilities</a></p><h2 id="網格系統"><a href="#網格系統" class="headerlink" title="網格系統"></a>網格系統</h2><h3 id="Bootstrap-的-Grid-System。規則如下："><a href="#Bootstrap-的-Grid-System。規則如下：" class="headerlink" title="Bootstrap 的 Grid System。規則如下："></a>Bootstrap 的 Grid System。規則如下：</h3><h4 id="結構依序為如下：container-gt-row-gt-column"><a href="#結構依序為如下：container-gt-row-gt-column" class="headerlink" title="結構依序為如下：container -&gt; row -&gt; column"></a>結構依序為如下：container -&gt; row -&gt; column</h4><p><em>所有的「row」都要放在「container」之下，「col-\</em>」(column) 要放在「row」之下。column 為最小單位的方格，且有間格將彼此格開。由「row」校正 colume 左右多出來的左右 padding。基本上一個 row 放置 12 個 column，若有一個 row 超過 12 個 column，則會斷行放置多出來的 column。*</p><p>Container 提供方式來置中你的內容，當你的容器寬度是固定的使用 <code>.container</code> 如果想要滿版則使用 <code>.container-fluid</code>。</p><h4 id="Column命名規則："><a href="#Column命名規則：" class="headerlink" title="Column命名規則："></a>Column命名規則：</h4><p>phone (576px~767px) = .col-xs-*  // 預設斷點  <em> 為數字 1~12<br>Small grid (≧768px) = .col-sm-\</em>  // 平板<br>Medium grid (≧992px) = .col-md-*  // 電腦<br>Large grid (≧1200px) = .col-lg-*  // 電腦(大型)<br>.col-md-offset-*  // 位移  </p><p>ps. 調整不同視圖下的欄寬度，在 Bootstrap 4 中 .col-xs-* 已消失，取而代之的 .col-* 在語意上代表的差別是「從最小設備到最大設備都相同的網格」。 </p><p><strong>只要在 row 中，直接加入 col 後，就會自動將 row 的 div 等分，比方要作三等份，以前需寫 col-md-4 ，但現在只要 col 重覆三次，無需再特別註明裝罝與數量，還可以混用，將 col 後再加數量。</strong></p><p>範例一</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line"> &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col&quot;&gt;a&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-6&quot;&gt;b&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col&quot;&gt;c&lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div><p>範例二</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;wrap&quot;&gt; or &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-sm-8&quot;&gt;col-sm-8&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-sm-4&quot;&gt;col-sm-4&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-sm&quot;&gt;col-sm&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-sm&quot;&gt;col-sm&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-sm&quot;&gt;col-sm&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div><h4 id="螢幕尺寸大小上調整不同寬度"><a href="#螢幕尺寸大小上調整不同寬度" class="headerlink" title="螢幕尺寸大小上調整不同寬度"></a>螢幕尺寸大小上調整不同寬度</h4><p>同一 column 加上多的 class 來調整版面：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;col-sm-4 col-md-8&quot;&gt;.col-sm-4 .col-md-8&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;col-sm-8 col-md-4&quot;&gt;.col-sm-8 .col-md-4&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 當螢幕尺寸為 md 以上時會有 8:4 來顯示 </span><br><span class="line">     當螢幕尺寸為 sm 時會以 4:8 來顯示</span><br><span class="line">     當螢幕尺寸小於 sm 時會換行顯示 --&gt;</span><br></pre></td></tr></table></figure></div><h4 id="隨著內容變動寬度"><a href="#隨著內容變動寬度" class="headerlink" title="隨著內容變動寬度"></a>隨著內容變動寬度</h4><p>使用 col-{breakpoint}-auto 同時搭配上 <strong>水平對齊</strong> 可以讓 column 的寬度隨著內容而改變。</p><h4 id="間距拿掉"><a href="#間距拿掉" class="headerlink" title="間距拿掉"></a>間距拿掉</h4><p>.row 加入:</p><blockquote><p><code>no-gutters</code></p></blockquote><p>e.g.<br><code>&lt;div class=&quot;row no-gutters&quot;&gt;</code></p><h4 id="垂直對齊"><a href="#垂直對齊" class="headerlink" title="垂直對齊"></a>垂直對齊</h4><p>.row 或 .col 加入: </p><blockquote><p><code>align-items-start</code>  // 列或欄垂直的置頂<br><code>align-items-center</code>   // 列或欄垂直的置中<br><code>align-items-end</code>      // 列或欄垂直的置底  </p></blockquote><h4 id="水平對齊"><a href="#水平對齊" class="headerlink" title="水平對齊"></a>水平對齊</h4><p>.row 加入:  </p><blockquote><p><code>justify-content-start</code>  // 置左<br><code>justify-content-center</code> // 置中<br><code>justify-content-end</code>    // 置右<br><code>justify-content-around</code> // 是讓該列內的欄平均排列在該列<br><code>justify-content-between</code> // 是讓列類的欄靠邊排列在該列</p></blockquote><h4 id="Spacing"><a href="#Spacing" class="headerlink" title="Spacing"></a>Spacing</h4><p>指元素的 margin 跟 padding 。</p><p>m：margin<br>p：padding<br>t：top<br>r：right<br>b：bottom<br>l：left<br>x：-right和-left<br>y：-top 和 -bottom  </p><p>m：margin<br>mt：margin-top<br>mr：margin-right<br>mb：margin-bottom<br>ml：margin-left<br>mx：margin-right 和 margin-left<br>my：margin-top 和 margin-bottom  </p><p>p：padding<br>pt：padding-top<br>pr：padding-right<br>pb：padding-bottom<br>pl：padding-left<br>px：padding-right 和 padding-left<br>py：padding-top 和 padding-bottom</p><p><strong><em>Bootstrap 4 裡 Spacing 基本的單位就是 1rem。<br>1rem = 16px，結合上述的代碼。就是代表要多少的內距或外距。</em></strong></p><p>0：0 <em> 1rem = 0px<br>1：0.25 </em> 1rem = 4px<br>2：0.5 <em> 1rem = 8px<br>3：1 </em> 1rem = 16px<br>4：1.5 <em> 1rem = 24px<br>5：3 </em> 1rem = 48px<br>auto: margin 設定為 auto</p><p>e.g.</p><p>mb-3 = margin-bottom：16px<br>pt-4 = padding-top：24px<br>m-1 = margin：4px;  </p><h2 id="使用-flexbox"><a href="#使用-flexbox" class="headerlink" title="使用 flexbox"></a>使用 flexbox</h2><p><code>class=&quot;d-flex flex-column&quot;</code></p><p>flex-column：直排上到下排列內元素<br>flex-row：橫排左至右排列內元素</p><h2 id="表單"><a href="#表單" class="headerlink" title="表單"></a>表單</h2><p><code>class=&quot;form-control&quot;</code></p><h2 id="卡片-Cards"><a href="#卡片-Cards" class="headerlink" title="卡片(Cards)"></a>卡片(Cards)</h2><p>Cards 是 Bootstrap 4 的新組件，使用 Flexbox 建構，有瀑布流樣式(Masonry-like)可供使用。卡片可支援各種內容，包括圖像、文字內容、清單、連結等。 </p><p><em>ps. 瀑布流樣式(Masonry-like): 將卡片包在 <code>.card-columns</code> 中，就會讓卡片呈現瀑布式排列。</em></p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>套用 Bootstrap 4 的 class</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTML</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;box2 bg-danger m-5&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">CSS</span><br><span class="line"></span><br><span class="line">.box2&#123;</span><br><span class="line"> width: 100px;</span><br><span class="line"> height: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>長寬各 100px 的 #dc3545 色正方型，然後四邊各有 48px 的外距。</p><a href="/2019/12/14/bootstrap-base/bootstrap.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/14/bootstrap-base/bootstrap.png" title="This is an image"></a><p>參考：<br><a href="https://medium.com/@weilihmen/bootstrap-初學介紹-靜態篇-f20500235b33" target="_blank" rel="noopener">https://medium.com/@weilihmen/bootstrap-初學介紹-靜態篇-f20500235b33</a><br><a href="https://bootstrap.hexschool.com" target="_blank" rel="noopener">https://bootstrap.hexschool.com</a><br><a href="https://getbootstrap.com" target="_blank" rel="noopener">https://getbootstrap.com</a><br><a href="https://cythilya.github.io/2015/04/07/bootstrap-grid-system/" target="_blank" rel="noopener">https://cythilya.github.io/2015/04/07/bootstrap-grid-system/</a><br><a href="https://5xruby.tw/posts/bootstrap-4/" target="_blank" rel="noopener">https://5xruby.tw/posts/bootstrap-4/</a><br><a href="https://ithelp.ithome.com.tw/articles/10228808?sc=iThomeR" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10228808?sc=iThomeR</a><br><a href="https://pjchender.blogspot.com/2017/06/bootstrap4-grid-system.html" target="_blank" rel="noopener">https://pjchender.blogspot.com/2017/06/bootstrap4-grid-system.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RWD 基本知識</title>
      <link href="/2019/12/13/RWD-base/"/>
      <url>/2019/12/13/RWD-base/</url>
      
        <content type="html"><![CDATA[<h1 id="響應式網頁-RWD"><a href="#響應式網頁-RWD" class="headerlink" title="響應式網頁(RWD)"></a>響應式網頁(RWD)</h1><h3 id="Responsive-web-design，縮寫為-RWD。是一種設計方式，利用操控-CSS-的方法來改變網頁樣式，網頁內容就可以自由的縮放、移動，好因應各種不同瀏覽器解析度，讓使用者在瀏覽網頁時都可以有最好的瀏覽體驗。"><a href="#Responsive-web-design，縮寫為-RWD。是一種設計方式，利用操控-CSS-的方法來改變網頁樣式，網頁內容就可以自由的縮放、移動，好因應各種不同瀏覽器解析度，讓使用者在瀏覽網頁時都可以有最好的瀏覽體驗。" class="headerlink" title="Responsive web design，縮寫為 RWD。是一種設計方式，利用操控 CSS 的方法來改變網頁樣式，網頁內容就可以自由的縮放、移動，好因應各種不同瀏覽器解析度，讓使用者在瀏覽網頁時都可以有最好的瀏覽體驗。"></a>Responsive web design，縮寫為 RWD。是一種設計方式，利用操控 CSS 的方法來改變網頁樣式，網頁內容就可以自由的縮放、移動，好因應各種不同瀏覽器解析度，讓使用者在瀏覽網頁時都可以有最好的瀏覽體驗。</h3><h3 id="在-HTML-上沒有甚麼不同，其實也只有在-lt-head-gt-標籤裡加上-Viewport-Meta-Tag。"><a href="#在-HTML-上沒有甚麼不同，其實也只有在-lt-head-gt-標籤裡加上-Viewport-Meta-Tag。" class="headerlink" title="在 HTML 上沒有甚麼不同，其實也只有在 &lt;head&gt; 標籤裡加上 Viewport Meta Tag。"></a>在 HTML 上沒有甚麼不同，其實也只有在 <code>&lt;head&gt;</code> 標籤裡加上 Viewport Meta Tag。</h3><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;&quot;&gt;</code></p><p>content 的值有</p><blockquote><p>Width    // 寬度<br>Width-device-width  // 寬度為裝置的寬度<br>Initial-scale   // 文檔的初始比例(單位是 %)<br>Maximum-scale   // 設定縮放大小</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 指定螢幕寬度為裝置寬度，畫面載入初始縮放比例 100%</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; &gt;</span><br><span class="line">// 以下設定可以防止使用者做畫面縮放，將畫面鎖在縮放比例 100%</span><br><span class="line">&lt;meta name=”viewport” content=”width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure></div><h3 id="主要是在-CSS-的撰寫，以下進行簡單的介紹："><a href="#主要是在-CSS-的撰寫，以下進行簡單的介紹：" class="headerlink" title="主要是在 CSS 的撰寫，以下進行簡單的介紹："></a>主要是在 CSS 的撰寫，以下進行簡單的介紹：</h3><h4 id="撰寫方式是用-media-query"><a href="#撰寫方式是用-media-query" class="headerlink" title="撰寫方式是用 media query"></a>撰寫方式是用 media query</h4><blockquote><p><code>@media</code> 來定義套用的媒體類型和特性。</p><blockquote><p>媒體類型（Media Type）：可用的類型包含 all (default), print, screen 和 speech。<br>媒體特性（Media Feature）：常用的類型包含 width, height, aspect-ratio, orientation, resolution，這些類型常常需要給定一個區間，像是 min, max, min-width, max-width, min-aspect-ratio, max-aspect-ratio。  </p></blockquote></blockquote><h4 id="定義媒體類型及同時定義媒體類型和媒體特性"><a href="#定義媒體類型及同時定義媒體類型和媒體特性" class="headerlink" title="定義媒體類型及同時定義媒體類型和媒體特性"></a>定義媒體類型及同時定義媒體類型和媒體特性</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 定義媒體類型</span><br><span class="line">@media screen, print &#123;</span><br><span class="line">  /* Styles for screen and print devices */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 同時定義媒體類型和媒體特性，中間需用 and 連接</span><br><span class="line">@media screen and (max-width: 650px) &#123;</span><br><span class="line">  body &#123;</span><br><span class="line">    background: rebeccapurple;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="或是直接寫特性"><a href="#或是直接寫特性" class="headerlink" title="或是直接寫特性"></a>或是直接寫特性</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// max-width 以電腦瀏覽比較為主通常用 max-width 開始寫</span><br><span class="line">// 當解析度小於768px</span><br><span class="line">@media (max-width: 768px) &#123;</span><br><span class="line"> body&#123;</span><br><span class="line">  background: yellow;</span><br><span class="line">  color:black;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line">// 當解析度小於375px</span><br><span class="line">@media(max-width: 375px)&#123;</span><br><span class="line"> body&#123;</span><br><span class="line">  background: blue;</span><br><span class="line">  color:white;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">// min-width 以行動瀏覽為主的網頁通常會用 min-width 開始寫</span><br><span class="line">// 當解析度大於376px</span><br><span class="line">@media(min-width:376px)&#123;</span><br><span class="line"> body&#123;</span><br><span class="line">  background: yellow;</span><br><span class="line">  color:black;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 當解析度大於769px</span><br><span class="line">@media(min-width:769px)&#123;</span><br><span class="line"> body&#123;</span><br><span class="line">  background: green;</span><br><span class="line">  color:yellow;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><h2 id="簡單範例"><a href="#簡單範例" class="headerlink" title="簡單範例"></a>簡單範例</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//HTML</span><br><span class="line"></span><br><span class="line">&lt;meta name=”viewport” content=”width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;h1&gt;請縮放螢幕使網頁內容產生變化&lt;/h1&gt;</span><br><span class="line"> &lt;p&gt;test&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">//CSS</span><br><span class="line"></span><br><span class="line">body&#123;</span><br><span class="line"> background: green;</span><br><span class="line"> color:yellow;</span><br><span class="line">&#125;</span><br><span class="line">@media (max-width: 768px) &#123;</span><br><span class="line"> body&#123;</span><br><span class="line">  background: yellow;</span><br><span class="line">  color:black;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line">@media(max-width: 375px)&#123;</span><br><span class="line"> body&#123;</span><br><span class="line">  background: blue;</span><br><span class="line">  color:white;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="寫-RWD-時注意的事"><a href="#寫-RWD-時注意的事" class="headerlink" title="寫 RWD 時注意的事"></a>寫 RWD 時注意的事</h2><h4 id="子元素寬度設定盡量使用-，避免縮放網頁時產生出-X-軸。"><a href="#子元素寬度設定盡量使用-，避免縮放網頁時產生出-X-軸。" class="headerlink" title="子元素寬度設定盡量使用 % ，避免縮放網頁時產生出 X 軸。"></a>子元素寬度設定盡量使用 <code>%</code> ，避免縮放網頁時產生出 X 軸。</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 限定網頁最大寬度，避免產生 X 軸</span><br><span class="line">.wrap &#123;</span><br><span class="line"> max-width: 1024px;</span><br><span class="line"> margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line">// 子元素寬度單位用 % </span><br><span class="line">.box1&#123;</span><br><span class="line"> width: 100%;</span><br><span class="line"> height: 200px;</span><br><span class="line"> background: green;</span><br><span class="line">&#125;</span><br><span class="line">.box2&#123;</span><br><span class="line"> width: 35%;</span><br><span class="line"> height: 100px;</span><br><span class="line"> background: pink;</span><br><span class="line"> float:left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="瀏覽器尺寸範例："><a href="#瀏覽器尺寸範例：" class="headerlink" title="瀏覽器尺寸範例："></a>瀏覽器尺寸範例：</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (min-width:1024px)&#123;</span><br><span class="line">  /*STYLES*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (min-width: 1200px) &#123;</span><br><span class="line">    // 如果使用者之視窗寬度 &gt;= 1200px，將會再載入這裡的 CSS。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (min-width: 768px) and (max-width: 979px) &#123;</span><br><span class="line">    // 如果使用者之視窗寬度介於 768px ~ 979px，將會再載入這裡的 CSS。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (max-width: 767px) &#123;</span><br><span class="line">    // 如果使用者之視窗寬度 &lt;= 768px，將會再載入這裡的 CSS。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (max-device-width: 480px) &#123;</span><br><span class="line">    // 如果使用者之裝置寬度 &lt;= 480px，將會再載入這裡的 CSS。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">瀏覽器直立或橫放</span><br><span class="line"></span><br><span class="line">@media screen and (orientation:portrait)&#123;</span><br><span class="line">  // 直立時套用</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (orientation:landscape)&#123;</span><br><span class="line">  // 橫放時套用</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">retina 顯示器</span><br><span class="line">我們可以透過 min-resolution: 192dpi 和 -webkit-min-device-pixel-ratio: 2 來定義 retina 顯示器：</span><br><span class="line"></span><br><span class="line">// 120dpi - 720px,</span><br><span class="line">// 192dpi - 1200px</span><br><span class="line">@media screen and</span><br><span class="line">  (min-resolution: 192dpi),</span><br><span class="line">  (-webkit-min-device-pixel-ratio: 2) &#123;</span><br><span class="line">    /* ... */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and</span><br><span class="line">  (min-resolution: 120dpi) and</span><br><span class="line">  (min-width: 720px) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>參考：<br><a href="https://pjchender.github.io/2018/06/09/css-media-query/" target="_blank" rel="noopener">[CSS] Media Query</a><br><a href="https://ithelp.ithome.com.tw/articles/10218043?sc=rss.iron" target="_blank" rel="noopener">響應式網頁(RWD)環境與 Media Query</a><br><a href="https://cythilya.github.io/2015/02/27/bootstrap-rwd-template/" target="_blank" rel="noopener">使用 Bootstrap 建立一個 RWD Template（Twitter Bootstrap in Responsive Web Design）</a></p>]]></content>
      
      
      <categories>
          
          <category> RWD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RWD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 基本介紹</title>
      <link href="/2019/12/13/2019-12-13-css-base/"/>
      <url>/2019/12/13/2019-12-13-css-base/</url>
      
        <content type="html"><![CDATA[<p>#CSS 基本介紹</p><h2 id="CSS是什麼"><a href="#CSS是什麼" class="headerlink" title="CSS是什麼"></a>CSS是什麼</h2><ul><li>樣式：將規則與 HTML 元素連結，來規定特定元素應呈現的樣子。</li><li>有範圍性，不用下重複設定在多個標籤元素上。直接在最外圍的標籤上設定，例如 body、header。</li><li>盡量不要用 id 來設計樣式。</li><li>不要習慣寫死高度，利用 max-width、margin、padding 來做出空間。</li><li>Bootstrap 格線設計好用。</li></ul><h2 id="加入到-HTML-三種方式"><a href="#加入到-HTML-三種方式" class="headerlink" title="加入到 HTML 三種方式"></a>加入到 HTML 三種方式</h2><p>1.外部載入 CSS 檔案<br>這是一個比較常用的方式，通常會將所有的 CSS 檔案集中寫在一起，然後另存為一個附檔名為 css 的檔案，然後在 HTML 文件中的    head 標籤內添加一個 link 標籤並且在 href 屬性內，指向到該 CSS 檔案的存放位置。  </p><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css/all.css&quot;/&gt;</code></p><p>2.將 CSS 內容寫在 style 標籤裡，並放在 head 標籤裡。  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   .red&#123;</span><br><span class="line">     color: red;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div><p>3.或是將 CSS 內容單獨的寫在每一個指定的網頁標籤</p><p><code>&lt;p style=”color:green”&gt;&lt;/p&gt;</code></p><h2 id="規則包含兩個部分：選取器-選取元素-和宣告"><a href="#規則包含兩個部分：選取器-選取元素-和宣告" class="headerlink" title="規則包含兩個部分：選取器(選取元素)和宣告"></a>規則包含兩個部分：選取器(選取元素)和宣告</h2><p><code>p { color: red; }</code><br>選取器      宣告</p><p><code>h1, h2, h3  {    color: red;    }</code></p><blockquote><p>選取多元素</p></blockquote><p><code>* { }</code>                        </p><blockquote><p>選取頁面上所有的元素</p></blockquote><p><code>#introduction {}</code></p><blockquote><p>選取 id=”introduction” 的元素</p></blockquote><p><code>.introduction {}</code></p><blockquote><p>選取屬性 class=”introduction” 的元素</p></blockquote><p><code>p.a {}</code></p><blockquote><p>選取 class 屬性值為 a 的 <code>&lt;p&gt;</code> 元素</p></blockquote><p><code>li&gt;a {}</code></p><blockquote><p>選取 <code>&lt;li&gt;</code> 元素內的 <code>&lt;a&gt;</code> 元素，但排除頁面上其他的 <code>&lt;a&gt;</code> 元素  </p></blockquote><p><code>p a {}</code></p><blockquote><p>選取任何在 <code>&lt;p&gt;</code> 元素之內的 <code>&lt;a&gt;</code> 元素，即使兩者之間還有堆疊其他元素 </p></blockquote><h2 id="階層規範-若兩個規則同時套用到同一個元素上"><a href="#階層規範-若兩個規則同時套用到同一個元素上" class="headerlink" title="階層規範(若兩個規則同時套用到同一個元素上)"></a>階層規範(若兩個規則同時套用到同一個元素上)</h2><ul><li>後來先贏：以最後一個的規則為主</li><li>指定程度：若一個選取器較其他的更具指定性，以較具指定性的為主</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1 比 * 更具指定性</span><br><span class="line">p b 比 p 更具指定性</span><br><span class="line">p#intro 比 p 更具指定性</span><br></pre></td></tr></table></figure></div><ul><li>重要：可在任何屬性值後面加上 !important ，來表示此規則比套用到相同元素的其他規定更重要。 </li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p b &#123;</span><br><span class="line">   color: blue !important;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div><h2 id="繼承"><a href="#繼承" class="headerlink" title="繼承"></a>繼承</h2><p>父元素的某些屬性會套用到大部分的子元素上。或在屬性中使用 inherit 值來強迫許多屬性從父元素來繼承屬性值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">       font-family: Arial ;</span><br><span class="line">       color: #665544;</span><br><span class="line">       padding: 10px;</span><br><span class="line">         &#125;</span><br><span class="line">.page  &#123;</span><br><span class="line">       border: 1px solid #665544;</span><br><span class="line">       background-color: #efefef;</span><br><span class="line">       padding: inherit;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></div><p><code>&lt;body&gt;</code> 元素的 font-family 或 color 屬性會繼承給子元素 class=”page” 的 元素，從套用到 <code>&lt;body&gt;</code> 元素的 CSS 規則中繼承了內距尺寸。</p><h1 id="屬性種類"><a href="#屬性種類" class="headerlink" title="屬性種類"></a>屬性種類</h1><h2 id="顏色"><a href="#顏色" class="headerlink" title="顏色"></a>顏色</h2><h4 id="color-DarkCyan"><a href="#color-DarkCyan" class="headerlink" title="color: DarkCyan;"></a>color: DarkCyan;</h4><blockquote><p>前景色</p></blockquote><p>三種表示方式：<br>1.<code>color: DarkCyan; // name</code><br>2.<code>color: #ee3e80;     // hex</code><br>3.<code>color: rgb(100,100,90);  // rgb</code></p><h4 id="background-color-white"><a href="#background-color-white" class="headerlink" title="background-color: white;"></a>background-color: white;</h4><blockquote><p>背景</p></blockquote><h4 id="opacity-0-5"><a href="#opacity-0-5" class="headerlink" title="opacity: 0,5;"></a>opacity: 0,5;</h4><h4 id="background-color-rgba-100-100-90-0-5"><a href="#background-color-rgba-100-100-90-0-5" class="headerlink" title="background-color: rgba(100,100,90,0.5);"></a>background-color: rgba(100,100,90,0.5);</h4><blockquote><p>不透明度(CSS3 值介於 0.0 到 1.0 or rgba 表示)</p></blockquote><h4 id="background-image-url-位置"><a href="#background-image-url-位置" class="headerlink" title="background-image: url(位置);"></a>background-image: url(位置);</h4><blockquote><p>元素背景影像</p></blockquote><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><h4 id="font-family-Arial-Helvetica-Georgia"><a href="#font-family-Arial-Helvetica-Georgia" class="headerlink" title="font-family: Arial, Helvetica, Georgia"></a>font-family: Arial, Helvetica, Georgia</h4><blockquote><p>指定字型</p></blockquote><h4 id="font-size-12px"><a href="#font-size-12px" class="headerlink" title="font-size: 12px;"></a>font-size: 12px;</h4><blockquote><p>字體大小</p></blockquote><p>表示方式：<br>1.<code>font-size: 12px;</code><br>2.<code>font-size: 200%;  // 瀏覽器預設文字大小是 16px</code><br>3.<code>font-size: 1.3em;  // ㄧ個 em 等於 m 字母的寬度</code></p><h4 id="font-weight-normal-or-bold"><a href="#font-weight-normal-or-bold" class="headerlink" title="font-weight: normal or bold;"></a>font-weight: normal or bold;</h4><blockquote><p>粗體</p></blockquote><h4 id="font-style-normal-or-italic-or-oblique"><a href="#font-style-normal-or-italic-or-oblique" class="headerlink" title="font-style: normal or italic or oblique;"></a>font-style: normal or italic or oblique;</h4><blockquote><p>斜體</p></blockquote><h4 id="text-transform-uppercase-大-or-lowercase-小-or-capitalize-每個字的第一個字變大寫"><a href="#text-transform-uppercase-大-or-lowercase-小-or-capitalize-每個字的第一個字變大寫" class="headerlink" title="text-transform: uppercase(大) or lowercase(小) or capitalize(每個字的第一個字變大寫);"></a>text-transform: uppercase(大) or lowercase(小) or capitalize(每個字的第一個字變大寫);</h4><blockquote><p>大小寫 </p></blockquote><h4 id="text-decoration-none-or-underline-底線-or-overline-文字上方加線-or-line-through-刪節線-or-blink-動態閃爍"><a href="#text-decoration-none-or-underline-底線-or-overline-文字上方加線-or-line-through-刪節線-or-blink-動態閃爍" class="headerlink" title="text-decoration: none or underline(底線) or overline(文字上方加線) or line-through(刪節線) or blink(動態閃爍);"></a>text-decoration: none or underline(底線) or overline(文字上方加線) or line-through(刪節線) or blink(動態閃爍);</h4><blockquote><p>底線和刪節線</p></blockquote><h4 id="line-height-1-5em"><a href="#line-height-1-5em" class="headerlink" title="line-height: 1.5em;"></a>line-height: 1.5em;</h4><blockquote><p>行距</p></blockquote><h4 id="direction-靠左-‘ltr’-及靠右-‘rtl’"><a href="#direction-靠左-‘ltr’-及靠右-‘rtl’" class="headerlink" title="direction: 靠左 ‘ltr’ 及靠右 ‘rtl’;"></a>direction: 靠左 ‘ltr’ 及靠右 ‘rtl’;</h4><blockquote><p>設定文字的方向</p></blockquote><h4 id="text-align-left-or-right-or-center-or-justify-段落除了最後一行外，每一行都應該佔據容器方框的整個寬度"><a href="#text-align-left-or-right-or-center-or-justify-段落除了最後一行外，每一行都應該佔據容器方框的整個寬度" class="headerlink" title="text-align: left or right or center or justify; (段落除了最後一行外，每一行都應該佔據容器方框的整個寬度)"></a>text-align: left or right or center or justify; (段落除了最後一行外，每一行都應該佔據容器方框的整個寬度)</h4><blockquote><p>對齊</p></blockquote><h4 id="text-shadow-1px-2px-111111-左右多遠-上下多遠-模糊量"><a href="#text-shadow-1px-2px-111111-左右多遠-上下多遠-模糊量" class="headerlink" title="text-shadow: 1px 2px #111111;(左右多遠,上下多遠,模糊量)"></a>text-shadow: 1px 2px #111111;(左右多遠,上下多遠,模糊量)</h4><blockquote><p>陰影(CSS3)</p></blockquote><h2 id="盒子模型-box-model"><a href="#盒子模型-box-model" class="headerlink" title="盒子模型(box model)"></a>盒子模型(box model)</h2><p>由四個部分組合：margin(外距)、border(邊框)、padding(內距)、content(內容)。它控制著頁面各元素的寬與高，比如當我們設定了一個元素的寬高時，所設定的數值還要再加上 padding 和 border，最後才會是這個元素的實際尺寸。如果一個區塊層級的元素位在另一個區塊層級元素內，那麼外面的方框就被稱為 <strong>容器</strong> 元素或 <strong>父</strong> 元素。</p><a href="/2019/12/13/2019-12-13-css-base/boxmodel.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/13/2019-12-13-css-base/boxmodel.jpg" title="This is an image"></a><h4 id="width-200px"><a href="#width-200px" class="headerlink" title="width: 200px;"></a>width: 200px;</h4><blockquote><p>元素寬度：<br>單位有：px, em, %，css 3 多了 vw(可視視窗高) vh(可視視窗寬)。</p></blockquote><h4 id="min-width-max-width"><a href="#min-width-max-width" class="headerlink" title="min-width max-width"></a>min-width max-width</h4><blockquote><p>限制寬度</p></blockquote><h4 id="height-200px"><a href="#height-200px" class="headerlink" title="height: 200px;"></a>height: 200px;</h4><blockquote><p>元素高度：<br>同上。</p></blockquote><h4 id="min-height-max-height"><a href="#min-height-max-height" class="headerlink" title="min-height max-height"></a>min-height max-height</h4><blockquote><p>限制高度  </p></blockquote><p>ps.<br><strong>使用px：網頁上設定一個 100px*100px 的正方形，當我們縮放螢幕的時候，這個元素並不會隨著變動寬高。<br>使用 %：<br>使用 % 的時候，如果我們的元素內並沒有任何內容，即使設定為 100%，是不會顯示出任何東西。<br>使用vh、vw：使用上和百分比很像，當填入 30vh 和 30vw 時，意思就是這個元素要占整個螢幕可視範圍的30%，很重要的是，這個區塊範圍會隨著瀏覽器的縮放而改變。設計 RWD 時，圖片大小可利用此單位。</strong></p><h4 id="margin-auto-瀏覽器自行設定-or-與邊界元素有關-or-px-or-em"><a href="#margin-auto-瀏覽器自行設定-or-與邊界元素有關-or-px-or-em" class="headerlink" title="margin: auto(瀏覽器自行設定) or %(與邊界元素有關) or px or em;"></a>margin: auto(瀏覽器自行設定) or %(與邊界元素有關) or px or em;</h4><blockquote><p>外距(兩個相連元素之間的間距)。  </p><blockquote><p>設定方式：<br>1.margin:上 右 下 左;  // 填入數值<br>2.margin:上下 左右;<br>3.margin:上 左右 下;<br>4.margin:四邊同値;<br>獨立設定：<br>margin-top：與上方元素的距離<br>margin-right：與右方元素的距離<br>margin-bottom：與下方元素的距離<br>margin-left：與左方元素的距離  </p></blockquote></blockquote><h4 id="padding-同上，margin-改成-padding-即可。"><a href="#padding-同上，margin-改成-padding-即可。" class="headerlink" title="padding: 同上，margin 改成 padding 即可。"></a>padding: 同上，margin 改成 padding 即可。</h4><blockquote><p>內距(邊框跟內容之間的空間)，加入可提高閱讀性。  </p><blockquote><p>設定方式跟獨立設定同上。  </p></blockquote></blockquote><h4 id="border-10px-solid-000-四邊-大小-樣式-顏色"><a href="#border-10px-solid-000-四邊-大小-樣式-顏色" class="headerlink" title="border: 10px solid #000; //四邊(大小 樣式 顏色)"></a>border: 10px solid #000; //四邊(大小 樣式 顏色)</h4><blockquote><p>邊框</p><blockquote><p>設定方式：<br>1.border-width: 2px 1px 1px 2px; // 對應 上 右 下 左<br>2.border-style: solid 單實線  dotted 方格點 dashed 短線 double 兩條實線 groove 刻入頁面  ridge 突出頁面 inset 嵌入頁面 hidden/none 無邊框<br>3.border-color: red red red red; // 對應 上 右 下 左<br>4.border-image: url(“圖片位置”) 11 11 11 11 stretch;   stretch 延伸影像 repeat 重複影像 round 重複影像<br>5.border-radius: 5px, 10px, px, 10px;  // 圓角<br>若 border-radius 設定跟方框高度一樣，就可以做出圓形。<br>獨立設定：同 padding。  </p></blockquote></blockquote><p>若要準確控制版面不破版，原本所設定的尺寸還需要再扣掉 border/padding，但是這樣每次設尺寸都要做計算，這時可以使用 <code>box-sizing</code> 此屬性，方便我們在設定 width、height 上更直觀。</p><h4 id="box-sizing-content-box-or-border-box-or-inherit"><a href="#box-sizing-content-box-or-border-box-or-inherit" class="headerlink" title="box-sizing: content-box or border-box or inherit;"></a>box-sizing: content-box or border-box or inherit;</h4><blockquote><p>content-box：預設值，元素實際寬高＝所設定的數值＋border＋padding。<br>border-box：元素實際寬高＝所設定的數值(已包含border和padding)。<br>inherit：繼承至父層的 broder-sizing 設定値。   </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> width: 300px; // 設定寬度</span><br><span class="line"> height: 100px; // 設定高度</span><br><span class="line"> border: 1px solid black;  //設定框線樣式</span><br><span class="line"> background-color: pink;  //設定背景</span><br><span class="line"> margin:20px;       //設定外距</span><br><span class="line"> padding:20px;      //設定內距</span><br><span class="line"> box-sizing: border-box;  //設定border及padding值包含在長寬內</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="display-inline-區塊轉為行內元素，與鄰近元素保持在同一行-block-行內元素轉為區塊，另起一行-inlien-block-區塊元素像行內元素一樣流動，但保持區塊元素其他特性-none-隱藏元素，頁面上看不到"><a href="#display-inline-區塊轉為行內元素，與鄰近元素保持在同一行-block-行內元素轉為區塊，另起一行-inlien-block-區塊元素像行內元素一樣流動，但保持區塊元素其他特性-none-隱藏元素，頁面上看不到" class="headerlink" title="display: inline 區塊轉為行內元素，與鄰近元素保持在同一行 block 行內元素轉為區塊，另起一行 inlien-block;  區塊元素像行內元素一樣流動，但保持區塊元素其他特性 none; 隱藏元素，頁面上看不到"></a>display: inline 區塊轉為行內元素，與鄰近元素保持在同一行 block 行內元素轉為區塊，另起一行 inlien-block;  區塊元素像行內元素一樣流動，但保持區塊元素其他特性 none; 隱藏元素，頁面上看不到</h4><blockquote><p>更改行內/區塊狀態，將行內元素轉成區塊元素。</p></blockquote><h4 id="visibility-hidden-隱藏"><a href="#visibility-hidden-隱藏" class="headerlink" title="visibility: hidden 隱藏"></a>visibility: hidden 隱藏</h4><blockquote><p>隱藏元素，不顯示內容，但將原有位置空下(產生空白)。若不要有空白，用 display 屬性。</p></blockquote><h2 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h2><h4 id="position-top-right-bottom-left-長度、百分比、或是-auto-static-預設-absolute-絕對-relative-相對-fixed"><a href="#position-top-right-bottom-left-長度、百分比、或是-auto-static-預設-absolute-絕對-relative-相對-fixed" class="headerlink" title="position: top right bottom left(長度、百分比、或是 auto) static 預設 absolute 絕對 relative 相對 fixed"></a>position: top right bottom left(長度、百分比、或是 auto) static 預設 absolute 絕對 relative 相對 fixed</h4><blockquote><p>元素在網頁上的定位。</p></blockquote><p><strong>ps.<br>absolute(絕對): 放在瀏覽器內的某個位置 (依 top、bottom、left、和 right 的值而定)。當使用者將網頁往下拉時，元素也會跟著改變位置。ps: 網頁的四個邊界開始起算。<br>relative(相對): 元素擺在相對於另一個元素的任何地方。要定位的元素加上 <code>position:absolute</code> 還有(top,left,right,bottom)及對應的值，並且在他的父元素加上 <code>position:relative</code>，那個元素就可在在它的父元素範圍內任意定位。<br>fixed: 這代表元素會被放在瀏覽器內的某個位置 (依 top、bottom、left、和 right 的值而定)。當使用者將網頁往下拉時，元素的位置不會改變。</strong> </p><h4 id="z-index-auto-預設值-數字-inherit-繼承自父層順序"><a href="#z-index-auto-預設值-數字-inherit-繼承自父層順序" class="headerlink" title="z-index: auto 預設值 數字 inherit 繼承自父層順序"></a>z-index: auto 預設值 數字 inherit 繼承自父層順序</h4><blockquote><p>用來決定元素重疊的順序，當兩個元素有重疊的情況時。z-index 值比較大個元素會被放在上面。</p></blockquote><h4 id="float-left、right、none"><a href="#float-left、right、none" class="headerlink" title="float: left、right、none;"></a>float: left、right、none;</h4><blockquote><p>定義 box 的浮動，常見是將文字繞著一個圖案顯現或區塊排版。最後記得要使用清除浮動，避免跑版。</p></blockquote><h4 id="clear-left、right、both、none"><a href="#clear-left、right、both、none" class="headerlink" title="clear: left、right、both、none;"></a>clear: left、right、both、none;</h4><blockquote><p>清除用來抵銷 float 屬性的作用</p></blockquote><h4 id="某元素置中"><a href="#某元素置中" class="headerlink" title="某元素置中"></a>某元素置中</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  margin: 0 auto;  // 元素置中</span><br><span class="line">  width: 200px;</span><br><span class="line">  text-align: center;  // 內容也置中</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="overflow-auto-自動使用捲軸-visible-直接超出範圍，不使用捲軸-hidden-隱藏-scroll-捲軸-inherit-繼承自父元素"><a href="#overflow-auto-自動使用捲軸-visible-直接超出範圍，不使用捲軸-hidden-隱藏-scroll-捲軸-inherit-繼承自父元素" class="headerlink" title="overflow: auto 自動使用捲軸 visible 直接超出範圍，不使用捲軸 hidden 隱藏 scroll 捲軸 inherit 繼承自父元素"></a>overflow: auto 自動使用捲軸 visible 直接超出範圍，不使用捲軸 hidden 隱藏 scroll 捲軸 inherit 繼承自父元素</h4><blockquote><p>當 content 超出 box 時的處理。  </p></blockquote><h2 id="游標樣式"><a href="#游標樣式" class="headerlink" title="游標樣式"></a>游標樣式</h2><h4 id="cursor-auto-or-crosshair-pointer-help-wait-url-“位置”"><a href="#cursor-auto-or-crosshair-pointer-help-wait-url-“位置”" class="headerlink" title="cursor: auto or crosshair pointer help wait url(“位置”);"></a>cursor: auto or crosshair pointer help wait url(“位置”);</h4><h1 id="元素定位處理-排版-還有其他方便的作法，例如-Flex、Grid-…"><a href="#元素定位處理-排版-還有其他方便的作法，例如-Flex、Grid-…" class="headerlink" title="元素定位處理(排版)還有其他方便的作法，例如 Flex、Grid …"></a>元素定位處理(排版)還有其他方便的作法，例如 Flex、Grid …</h1><h2 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h2><h4 id="Flex-中分為外容器與內元件"><a href="#Flex-中分為外容器與內元件" class="headerlink" title="Flex 中分為外容器與內元件"></a>Flex 中分為外容器與內元件</h4><a href="/2019/12/13/2019-12-13-css-base/flexa.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/13/2019-12-13-css-base/flexa.png" title="This is an image"></a><h3 id="flex-外容器屬性"><a href="#flex-外容器屬性" class="headerlink" title="flex 外容器屬性"></a>flex 外容器屬性</h3><h4 id="display-flex-inlien-flex"><a href="#display-flex-inlien-flex" class="headerlink" title="display: flex | inlien-flex;"></a>display: flex | inlien-flex;</h4><blockquote><p>一開始就要宣告為 flex 才開始用  </p></blockquote><a href="/2019/12/13/2019-12-13-css-base/flex1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/13/2019-12-13-css-base/flex1.png" title="This is an image"></a><h4 id="flex-direction-row-row-reverse-column-column-reverse"><a href="#flex-direction-row-row-reverse-column-column-reverse" class="headerlink" title="flex-direction: row | row-reverse | column | column-reverse"></a>flex-direction: row | row-reverse | column | column-reverse</h4><blockquote><p>決定內元件排序方向，改變主軸線方向 — or |，預設狀態：</p></blockquote><a href="/2019/12/13/2019-12-13-css-base/flexb.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/13/2019-12-13-css-base/flexb.jpg" title="This is an image"></a><blockquote><blockquote><p>row; //水平由軸線左至右排<br>row-reverse  //水平由軸線右至左排<br>column  //垂直由軸線上至下排<br>column-reverse  //垂直由軸線下至上排  </p></blockquote></blockquote><a href="/2019/12/13/2019-12-13-css-base/flex2.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/13/2019-12-13-css-base/flex2.jpg" title="This is an image"></a><h4 id="flex-wrap-nowrap-wrap-wrap-reverse"><a href="#flex-wrap-nowrap-wrap-wrap-reverse" class="headerlink" title="flex-wrap: nowrap | wrap | wrap-reverse"></a>flex-wrap: nowrap | wrap | wrap-reverse</h4><blockquote><p>超出範圍時是否換行動的屬性</p><blockquote><p>nowrap;   //不換行<br>wrap;   //換行<br>wrap-reverse;   //換行時反轉</p></blockquote></blockquote><a href="/2019/12/13/2019-12-13-css-base/flex3.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/13/2019-12-13-css-base/flex3.png" title="This is an image"></a><h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow:"></a>flex-flow:</h4><blockquote><p><code>flex-direction</code> 與 <code>flex-wrap</code> 的縮寫，在其前後帶上相對應的值即可 <code>flex-flow: row nowrap</code>;</p></blockquote><h4 id="justify-content-flex-start-…"><a href="#justify-content-flex-start-…" class="headerlink" title="justify-content: flex-start; …"></a>justify-content: flex-start; …</h4><blockquote><p>內元件的元素主軸對齊(間隔)，看是 <code>flex-direction</code> 是 row or column</p><blockquote><p>flex-start;   //靠左對齊<br>flex-end;   //靠右對齊<br>center;   //水平置中對齊<br>space-between;  //平均分配內元件，分開對齊(左右不留空)<br>space-around;   //平均分配內元件，分開對齊(左右留空)  </p></blockquote></blockquote><p>以 <code>flex-direction: row</code> 為例：</p><a href="/2019/12/13/2019-12-13-css-base/flex4.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/13/2019-12-13-css-base/flex4.jpg" title="This is an image"></a><h4 id="align-items-stretch-…"><a href="#align-items-stretch-…" class="headerlink" title="align-items: stretch; …"></a>align-items: stretch; …</h4><blockquote><p>相對於上面的屬性，交錯軸對齊設定   |</p><blockquote><p>flex-start;   //靠軸線上端對齊<br>flex-end;    //靠軸線下端對齊<br>center;   //置軸線中心對齊<br>stretch;  //預設值，延伸內元件全部撐開至 Flexbox 高度<br>baseline; //以所有內元件的基線作為對齊標準(左右留空)</p></blockquote></blockquote><a href="/2019/12/13/2019-12-13-css-base/flex5.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/13/2019-12-13-css-base/flex5.jpg" title="This is an image"></a><h4 id="align-content-flex-start-…"><a href="#align-content-flex-start-…" class="headerlink" title="align-content: flex-start; …"></a>align-content: flex-start; …</h4><blockquote><p>align-items 的多行版本，排列方式多一些</p><blockquote><p>flex-start;   //靠軸線上端對齊<br>flex-end;    //靠軸線下端對齊<br>center;   //置軸線中心對齊<br>stretch;  //預設值，延伸內元件全部撐開至 Flexbox 的高度<br>space-between; //平均分配內元件，分開對齊(上下不留空)<br>space-around;  //平均分配內元件，分開對齊(上下留空)  </p></blockquote></blockquote><a href="/2019/12/13/2019-12-13-css-base/flex6.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/13/2019-12-13-css-base/flex6.jpg" title="This is an image"></a><h3 id="flex-內元件屬性"><a href="#flex-內元件屬性" class="headerlink" title="flex 內元件屬性"></a>flex 內元件屬性</h3><h4 id="flex-grow-數字"><a href="#flex-grow-數字" class="headerlink" title="flex-grow: 數字;"></a>flex-grow: 數字;</h4><blockquote><p>元件的伸展性，預設值為 0。</p></blockquote><h4 id="flex-shrink-數字"><a href="#flex-shrink-數字" class="headerlink" title="flex-shrink: 數字;"></a>flex-shrink: 數字;</h4><blockquote><p>元件的收縮性，當空間分配還不足時的當前元件的收縮性，預設值為 0。  </p></blockquote><h4 id="flex-basis-單位值-px-auto"><a href="#flex-basis-單位值-px-auto" class="headerlink" title="flex-basis: 單位值(px) | auto;"></a>flex-basis: 單位值(px) | auto;</h4><blockquote><p>元件的基準值，以自己的基本小大為單位。</p></blockquote><h4 id="align-self：center-flex-start-flex-end-stretch-baseline"><a href="#align-self：center-flex-start-flex-end-stretch-baseline" class="headerlink" title="align-self：center | flex-start | flex-end | stretch | baseline;"></a>align-self：center | flex-start | flex-end | stretch | baseline;</h4><blockquote><p>調整內元件交錯軸的對齊設定(主軸不能另外設定)，也可以個別設定單一元件。</p></blockquote><a href="/2019/12/13/2019-12-13-css-base/flex7.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/13/2019-12-13-css-base/flex7.jpg" title="This is an image"></a><h4 id="order-數字"><a href="#order-數字" class="headerlink" title="order: 數字;"></a>order: 數字;</h4><blockquote><p>重新定義元件的排列順序，依據數值的大小</p></blockquote><h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><h4 id="一樣分成內外容器。Grid-和-flex-最大不同之處，透過-grid-template-來定義版型的結構，分別由-column-及-row-定義出直排與橫列的格線，內容再依隔線作安排。"><a href="#一樣分成內外容器。Grid-和-flex-最大不同之處，透過-grid-template-來定義版型的結構，分別由-column-及-row-定義出直排與橫列的格線，內容再依隔線作安排。" class="headerlink" title="一樣分成內外容器。Grid 和 flex 最大不同之處，透過 grid template 來定義版型的結構，分別由 column 及 row 定義出直排與橫列的格線，內容再依隔線作安排。"></a>一樣分成內外容器。Grid 和 flex 最大不同之處，透過 grid template 來定義版型的結構，分別由 column 及 row 定義出直排與橫列的格線，內容再依隔線作安排。</h4><h3 id="外容器"><a href="#外容器" class="headerlink" title="外容器"></a>外容器</h3><h4 id="display-grid-inline-grid-subgrid"><a href="#display-grid-inline-grid-subgrid" class="headerlink" title="display: grid | inline-grid | subgrid;"></a>display: grid | inline-grid | subgrid;</h4><blockquote><p>定義容器的顯示類型</p></blockquote><h4 id="grid-template-columns-…-…"><a href="#grid-template-columns-…-…" class="headerlink" title="grid-template-columns:  … |   …;"></a>grid-template-columns: <track-size> … | <line-name> <track-size> …;</track-size></line-name></track-size></h4><blockquote><p>橫列</p><blockquote><p>track-size: 可使用彈性的長度、百分比或分數 (分數的部分需使用 fr 單位)<br>line-name: 可自行命名的名稱</p></blockquote></blockquote><h4 id="grid-template-rows-…-…"><a href="#grid-template-rows-…-…" class="headerlink" title="grid-template-rows:  … |   …;"></a>grid-template-rows: <track-size> … | <line-name> <track-size> …;</track-size></line-name></track-size></h4><blockquote><p>直行</p><blockquote><p>track-size: 可使用彈性的長度、百分比或分數 (分數的部分需使用 fr 單位)<br>line-name: 可自行命名的名稱</p></blockquote></blockquote><a href="/2019/12/13/2019-12-13-css-base/grid.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/13/2019-12-13-css-base/grid.png" title="This is an image"></a><p>範例</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 200px 50px auto 50px 200px;</span><br><span class="line">  grid-template-rows: 25% 100px auto;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  width: 940px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><a href="/2019/12/13/2019-12-13-css-base/grid1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/13/2019-12-13-css-base/grid1.png" title="This is an image"></a><h4 id="grid-template-columns-repeat-2-1fr-2fr-100px"><a href="#grid-template-columns-repeat-2-1fr-2fr-100px" class="headerlink" title="grid-template-columns: repeat(2, 1fr 2fr) 100px;"></a>grid-template-columns: repeat(2, 1fr 2fr) 100px;</h4><blockquote><p>repeat({次數}, {格線…} | {格線…}) | {格線…}</p><blockquote><p>fr：空間單位<br>repeat：重複隔線</p></blockquote></blockquote><h4 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas:"></a>grid-template-areas:</h4><blockquote><p>透過 area 定義區塊在 template 上的位置，配合 gird-area </p><blockquote><p>內元素 grid-area：定義空間的名稱<br>外元素 grid-template-areas：定義空間的位置</p></blockquote></blockquote><p>範例</p><a href="/2019/12/13/2019-12-13-css-base/grid2.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/13/2019-12-13-css-base/grid2.png" title="This is an image"></a><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">.wrap &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 200px 50px auto 50px 200px;</span><br><span class="line">  grid-template-rows: 25% 100px auto;</span><br><span class="line">  grid-template-areas:</span><br><span class="line">    &quot;header header header header header&quot;</span><br><span class="line">    &quot;side  main main main main&quot;</span><br><span class="line">    &quot;side footer footer footer footer&quot;;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  width: 940px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line">.item-a &#123;</span><br><span class="line">  grid-area: header;</span><br><span class="line">  background-color: purple;</span><br><span class="line">&#125;</span><br><span class="line">.item-b &#123;</span><br><span class="line">  grid-area: main;</span><br><span class="line">  background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">.item-c &#123;</span><br><span class="line">  grid-area: side;</span><br><span class="line">  background-color: green;</span><br><span class="line">&#125;</span><br><span class="line">.item-d &#123;</span><br><span class="line">  grid-area: footer;</span><br><span class="line">  background-color: gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><em>ps.空間不能分離且是唯一的，錯誤範例: “side main side”</em></p><p>其他更詳細說明，請參考以下網站。</p><h2 id="補充說明："><a href="#補充說明：" class="headerlink" title="補充說明："></a>補充說明：</h2><p>###CSS RESET<br>各瀏覽器其實都有預設一些 CSS，我們稱之為瀏覽器默認樣式(User Agent Stylesheet)，為了增進瀏覽體驗，但是各家瀏覽器的默認樣式並不相同。因此寫一個網頁的時候，我們另外寫了 CSS 檔，而網頁顯示出來的畫面，實際上是瀏覽器默認樣式加上我們的 CSS 。也因而造成同一個網頁在不同的瀏覽器看到的畫面有點不一樣。為了處理這個問題，就有了 CSS RESET，它可以幫我們清除瀏覽器默認樣式，依照我們撰寫的 CSS 檔來顯示。這樣就可以統一樣式了。</p><p>目前公認是 meyerweb 的版本。</p><pre><code>/* http://meyerweb.com/eric/tools/css/reset/    v2.0 | 20110126   License: none (public domain)*/html, body, div, span, applet, object, iframe,h1, h2, h3, h4, h5, h6, p, blockquote, pre,a, abbr, acronym, address, big, cite, code,del, dfn, em, img, ins, kbd, q, s, samp,small, strike, strong, sub, sup, tt, var,b, u, i, center,dl, dt, dd, ol, ul, li,fieldset, form, label, legend,table, caption, tbody, tfoot, thead, tr, th, td,article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary,time, mark, audio, video {    margin: 0;    padding: 0;    border: 0;    font-size: 100%;    font: inherit;    vertical-align: baseline;}/* HTML5 display-role reset for older browsers */article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {    display: block;}body {    line-height: 1;}ol, ul {    list-style: none;}blockquote, q {    quotes: none;}blockquote:before, blockquote:after,q:before, q:after {    content: &apos;&apos;;    content: none;}table {    border-collapse: collapse;    border-spacing: 0;}</code></pre><p>參考：<br><a href="https://w3bits.com/css-box-model/" target="_blank" rel="noopener">https://w3bits.com/css-box-model/</a><br><a href="https://wcc723.github.io/css/2017/07/21/css-flex/" target="_blank" rel="noopener">https://wcc723.github.io/css/2017/07/21/css-flex/</a><br><a href="https://wcc723.github.io/css/2017/03/22/css-grid-layout/" target="_blank" rel="noopener">https://wcc723.github.io/css/2017/03/22/css-grid-layout/</a><br><a href="https://pjchender.blogspot.com/2015/04/css-3vh-vw.html" target="_blank" rel="noopener">https://pjchender.blogspot.com/2015/04/css-3vh-vw.html</a><br><a href="https://blog.techbridge.cc/2017/02/03/css-grid-intro/" target="_blank" rel="noopener">https://blog.techbridge.cc/2017/02/03/css-grid-intro/</a><br><a href="https://gridbyexample.com/" target="_blank" rel="noopener">https://gridbyexample.com/</a><br><a href="https://css-tricks.com/snippets/css/complete-guide-grid/" target="_blank" rel="noopener">https://css-tricks.com/snippets/css/complete-guide-grid/</a><br><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS" target="_blank" rel="noopener">https://developer.mozilla.org/zh-TW/docs/Web/CSS</a><br><a href="https://ithelp.ithome.com.tw/articles/10214957" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10214957</a><br><a href="https://medium.com/change-or-die/css-%E5%85%A5%E9%96%80%E7%AD%86%E8%A8%98-%E4%B8%80-box-model-box-sizing-56ddc49ac89e" target="_blank" rel="noopener">https://medium.com/change-or-die/css-%E5%85%A5%E9%96%80%E7%AD%86%E8%A8%98-%E4%B8%80-box-model-box-sizing-56ddc49ac89e</a>  </p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 操作 DOM</title>
      <link href="/2019/12/12/2019-12-12-DOM/"/>
      <url>/2019/12/12/2019-12-12-DOM/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>Hypertext Markup Language），中文為「超文字標示語言」，是一種用來組織架構並呈現網頁內容的程式語言。網頁內容的組成，可能包含了段落、清單、圖片或表格…等。</p><h2 id="JavaScript-操作-DOM-的一些方法"><a href="#JavaScript-操作-DOM-的一些方法" class="headerlink" title="JavaScript 操作 DOM 的一些方法"></a>JavaScript 操作 DOM 的一些方法</h2><p>DOM：文件物件模型(Document Object Model)， 瀏覽器幫 HTML 的元素節點轉換成 JavaScript 可以操作的物件。  </p><h4 id="選取元素"><a href="#選取元素" class="headerlink" title="選取元素"></a>選取元素</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let element = document.querySelector(&apos;&lt;element-name&gt;&apos;);</span><br></pre></td></tr></table></figure></div><h4 id="新增元素節點"><a href="#新增元素節點" class="headerlink" title="新增元素節點"></a>新增元素節點</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.createElement(&quot;div&quot;);</span><br></pre></td></tr></table></figure></div><h4 id="在某元素後面加入元素"><a href="#在某元素後面加入元素" class="headerlink" title="在某元素後面加入元素"></a>在某元素後面加入元素</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.appendChild()</span><br></pre></td></tr></table></figure></div><h4 id="移除該元素"><a href="#移除該元素" class="headerlink" title="移除該元素"></a>移除該元素</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.removeChild()</span><br></pre></td></tr></table></figure></div><h4 id="改變元素裡面的文字內容"><a href="#改變元素裡面的文字內容" class="headerlink" title="改變元素裡面的文字內容"></a>改變元素裡面的文字內容</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.innerText()</span><br></pre></td></tr></table></figure></div><h4 id="改變元素文字及標籤內容"><a href="#改變元素文字及標籤內容" class="headerlink" title="改變元素文字及標籤內容"></a>改變元素文字及標籤內容</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.innerHTML()</span><br></pre></td></tr></table></figure></div><h4 id="新增元素節點樣式"><a href="#新增元素節點樣式" class="headerlink" title="新增元素節點樣式"></a>新增元素節點樣式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.classList.add(&apos;樣式&apos;);</span><br></pre></td></tr></table></figure></div><h4 id="刪除元素節點樣式"><a href="#刪除元素節點樣式" class="headerlink" title="刪除元素節點樣式"></a>刪除元素節點樣式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.classList.delete(&apos;樣式&apos;)</span><br></pre></td></tr></table></figure></div><h4 id="監聽元素事件"><a href="#監聽元素事件" class="headerlink" title="監聽元素事件"></a>監聽元素事件</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">element.addEventLister(&apos;事件名稱&apos;, function(e)&#123;</span><br><span class="line">    // do something</span><br><span class="line">&#125;,&lt;boolean&gt;)</span><br><span class="line">true =&gt; 捕獲 ; false =&gt; 冒泡，不加參數的話，預設值是 false</span><br></pre></td></tr></table></figure></div><h4 id="e-g-click-事件-e-target-點擊到的元素"><a href="#e-g-click-事件-e-target-點擊到的元素" class="headerlink" title="e.g. click 事件(e.target 點擊到的元素)"></a>e.g. click 事件(e.target 點擊到的元素)</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;  </span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;test&quot;).addEventListener(&quot;click&quot;, function( event ) &#123;</span><br><span class="line">    // 在 “clicked div”顯示點擊次數</span><br><span class="line">    event.target.innerHTML = &quot;click count: &quot; + event.detail;</span><br><span class="line">  &#125;, false);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div><h2 id="DOM-事件傳遞機制"><a href="#DOM-事件傳遞機制" class="headerlink" title="DOM 事件傳遞機制"></a>DOM 事件傳遞機制</h2><h4 id="捕獲"><a href="#捕獲" class="headerlink" title="捕獲"></a>捕獲</h4><blockquote><p>根節點開始往下傳遞子節點然後到 target </p></blockquote><h4 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h4><blockquote><p>從 target 往上到子節點一路逆向傳回去根節點</p></blockquote><p><strong>DOM 事件傳遞的順序，先捕獲 -&gt; 自身 -&gt; 冒泡。</strong></p><h4 id="取消事件傳遞"><a href="#取消事件傳遞" class="headerlink" title="取消事件傳遞 "></a>取消事件傳遞 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*加在哪邊，事件傳遞就停在那，不向上(或下)級傳遞*</span><br></pre></td></tr></table></figure></div></h4><p>el.addEventListener(‘click’, (e) =&gt; {<br>  // e.eventPhase 回傳一個整數值以代表目前事件於事件流中的傳遞階段<br>  console.log(‘el’, e.eventPhase);<br>  e.stopPropagation();<br>}, true)<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 取消預設行為 ```e.preventDefault()</span><br></pre></td></tr></table></figure></div></p><p><em>取消瀏覽器的預設行為</em></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 超連結使用(不會新開分頁或是跳轉）</span><br><span class="line">el_link.addEventListener(&apos;click&apos;, (e) =&gt; &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">&#125;, false)</span><br><span class="line">// &lt;form&gt; 的 submit - 阻止送出表單</span><br><span class="line">// &lt;input&gt; 的 keypress 事件 - 阻止輸入按鍵</span><br></pre></td></tr></table></figure></div><h2 id="事件傳遞應用"><a href="#事件傳遞應用" class="headerlink" title="事件傳遞應用"></a>事件傳遞應用</h2><p><strong>事件代理(Delegation)</strong><br>利用 DOM 事件的冒泡特性，將子層元素的監聽事件綁定在父層元素上，好處有：<br>1.如果有很多子元素，就不用一一綁定監聽事件。<br>2.動態新增進來的子元素，因為也是會冒泡到上層，就不怕沒綁定到監聽。</p><h2 id="元素操作範例"><a href="#元素操作範例" class="headerlink" title="元素操作範例"></a>元素操作範例</h2><h4 id="印出-9-9"><a href="#印出-9-9" class="headerlink" title="印出 9*9"></a>印出 9*9</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">    const chart = document.querySelector(&apos;#chart&apos;);  </span><br><span class="line">    for (let i = 2; i &lt;= 9; i++) &#123;        </span><br><span class="line">      const DIV = document.createElement(&apos;div&apos;); // 新增 DIV 節點</span><br><span class="line">      DIV.classList.add(&apos;col-md-4&apos;);   // 新增 DIV 樣式</span><br><span class="line">      chart.appendChild(DIV);   // id=chart 的元素增加子節點 DIV</span><br><span class="line">      // chart.append  將字串插入到網頁元素</span><br><span class="line">      const UL = document.createElement(&apos;ul&apos;);</span><br><span class="line">      UL.classList.add(&apos;chart-list&apos;, &apos;list-unstyled&apos;, &apos;bg-light&apos;);</span><br><span class="line">      DIV.appendChild(UL);  </span><br><span class="line">      let str = `&lt;li class=&quot;chart-num&quot;&gt;$&#123; i &#125;&lt;/li&gt;`;// 2 ~ 9 // 組開頭數字 2~9 字串</span><br><span class="line">      //console.log(&apos;外層for&apos;, str);</span><br><span class="line">      for (let j = 1; j &lt;= 9; j++) &#123;    </span><br><span class="line">        str += `&lt;li class=&quot;h4&quot;&gt;$&#123; i &#125; x $&#123; j &#125; = $&#123; i*j &#125;&lt;/li&gt;`; // 2 x 1 ~ 9 x 9</span><br><span class="line">      //console.log(&apos;內層for&apos;, str);</span><br><span class="line">      &#125;             </span><br><span class="line">      //console.log(&apos;結果&apos;, str);</span><br><span class="line">      UL.innerHTML = str;      // 將字串插入到網頁元素</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;());  //立即呼叫函式 IIFE</span><br></pre></td></tr></table></figure></div><h4 id="印出正方形"><a href="#印出正方形" class="headerlink" title="印出正方形"></a>印出正方形</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function square(size)&#123;</span><br><span class="line">    const chart = document.querySelector(&apos;#chart1&apos;);</span><br><span class="line">    for (let i = 1; i &lt;= size; i++) &#123;  // 印出第i列</span><br><span class="line">      for (let j = 1; j &lt;= size; j++) &#123;  // 第i列有size個*</span><br><span class="line">        const sp = document.createElement(&apos;span&apos;);</span><br><span class="line">        sp.classList.add(&apos;col-md-4&apos;)</span><br><span class="line">        chart.appendChild(sp);  // 增加 span 元素</span><br><span class="line">        let str = `*`;</span><br><span class="line">        sp.innerHTML = str;     // 新增元素內容</span><br><span class="line">        &#125;</span><br><span class="line">        const Br = document.createElement(&apos;br&apos;);</span><br><span class="line">        chart.appendChild(Br);   // 增加斷行元素</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h4 id="印出斜一邊的三角形"><a href="#印出斜一邊的三角形" class="headerlink" title="印出斜一邊的三角形"></a>印出斜一邊的三角形</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function sidetriangle(size) &#123;</span><br><span class="line">  const chart = document.querySelector(&apos;#chart2&apos;);</span><br><span class="line">  for (let i = 1; i &lt;= size; i++) &#123;  // 印出第i列</span><br><span class="line">    for (let j = 1; j &lt;= i; j++) &#123;   // 第i列有i個*</span><br><span class="line">      const sp = document.createElement(&apos;span&apos;);</span><br><span class="line">        sp.classList.add(&apos;col-md-4&apos;)</span><br><span class="line">        chart.appendChild(sp);  // 增加 span 元素</span><br><span class="line">        let str = `*`;</span><br><span class="line">        sp.innerHTML = str;     // 新增元素內容</span><br><span class="line">    &#125;</span><br><span class="line">      const Br = document.createElement(&apos;br&apos;);</span><br><span class="line">      chart.appendChild(Br);   // 增加斷行元素</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>參考：<br><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Document_Object_Model" target="_blank" rel="noopener">MDN</a><br><a href="https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/" target="_blank" rel="noopener">DOM 的事件傳遞機制：捕獲與冒泡</a><br><a href="https://yakimhsu.com/project/project_w10_review_DOM&amp;EventListener.html" target="_blank" rel="noopener">https://yakimhsu.com/project/project_w10_review_DOM&amp;EventListener.html</a>  </p>]]></content>
      
      
      <categories>
          
          <category> DOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 基本介紹</title>
      <link href="/2019/12/11/2019-12-12-Git/"/>
      <url>/2019/12/11/2019-12-12-Git/</url>
      
        <content type="html"><![CDATA[<p>簡單記錄一下 Git 學習過程 </p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li>Git 是一個分散式版本控制軟體，可藉由它產生一個<em>儲存庫( git Repository)</em>。</li><li>可在自己本機電腦跟遠端伺服器儲存及管理檔案，並做同步處理。</li><li>紀錄管理有使用 Git 的目錄內的檔案增刪、檔案內容的修改。</li><li>有圖形化介面可以使用，例如：SourceTree。  </li></ul><h2 id="終端機指令介紹"><a href="#終端機指令介紹" class="headerlink" title="終端機指令介紹"></a>終端機指令介紹</h2><p>在操作 Git 之前，先來介紹一下終端機的基本指令  </p><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><blockquote><p>查看目錄中的檔案列表</p></blockquote><h4 id="ls-la"><a href="#ls-la" class="headerlink" title="ls -la"></a>ls -la</h4><blockquote><p>列出隱藏文件</p></blockquote><h4 id="cd"><a href="#cd" class="headerlink" title="cd ~"></a>cd ~</h4><blockquote><p>前往主目錄</p></blockquote><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><blockquote><p>查看目前所在目錄位置</p></blockquote><h4 id="mkdir-test"><a href="#mkdir-test" class="headerlink" title="mkdir test"></a>mkdir test</h4><blockquote><p>建立 test 的子目錄</p></blockquote><h4 id="cd-test"><a href="#cd-test" class="headerlink" title="cd test"></a>cd test</h4><blockquote><p>切換到 test 目錄</p></blockquote><h4 id="cd-1"><a href="#cd-1" class="headerlink" title="cd .."></a>cd ..</h4><blockquote><p>回到上層目錄</p></blockquote><h4 id="touch-index-html"><a href="#touch-index-html" class="headerlink" title="touch index.html"></a>touch index.html</h4><blockquote><p>新增 html 檔,若目錄內已有檔案時,會修改檔案時間</p></blockquote><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><blockquote><p>複製文件</p></blockquote><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><blockquote><p>移動檔案</p></blockquote><h4 id="rm-index-html"><a href="#rm-index-html" class="headerlink" title="rm index.html"></a>rm index.html</h4><blockquote><p>刪除檔案</p></blockquote><h4 id="rm-R"><a href="#rm-R" class="headerlink" title="rm -R"></a>rm -R</h4><blockquote><p>刪除資料夾與其內所有檔案</p></blockquote><h2 id="安裝Git"><a href="#安裝Git" class="headerlink" title="安裝Git"></a>安裝Git</h2><p><strong>到官方網站根據自己的作業系統下載</strong><br><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p><strong>或是透過 Homebrew 來下載</strong><br><a href="https://brew.sh/index_zh-tw.html" target="_blank" rel="noopener">https://brew.sh/index_zh-tw.html</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></div><p>複製以上內容，到終端機視窗貼上並執行。<br>安裝完後，再複製以下內容，</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure></div><p>到終端機視窗貼上並執行。</p><h2 id="使用者設定"><a href="#使用者設定" class="headerlink" title="使用者設定"></a>使用者設定</h2><p>剛開始使用時 Git ，首先要設定名稱跟 e-mail 信箱  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;your_name&quot;</span><br><span class="line">$ git config --global user.email &quot;your_email&quot;</span><br></pre></td></tr></table></figure></div><h2 id="Git-區塊"><a href="#Git-區塊" class="headerlink" title="Git 區塊"></a>Git 區塊</h2><p>Git 有三個檔案存放區塊<br><a href="/2019/12/11/2019-12-12-Git/block.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/12/11/2019-12-12-Git/block.jpg" title="This is an image"></a></p><p>如圖所示，分為<br><strong>工作目錄</strong> (未 add )，初始狀態。<br><strong>暫存區</strong> (已 add ，未 commit )<br><strong>儲存區</strong> (已 commit )  </p><h2 id="Git-指令-終端機"><a href="#Git-指令-終端機" class="headerlink" title="Git 指令(終端機)"></a>Git 指令(終端機)</h2><h4 id="git-init-“要板控的專案目錄”"><a href="#git-init-“要板控的專案目錄”" class="headerlink" title="git init “要板控的專案目錄”"></a>git init “要板控的專案目錄”</h4><blockquote><p>初始化專案，開始版控</p></blockquote><h4 id="git-add-要放入存放區的檔案"><a href="#git-add-要放入存放區的檔案" class="headerlink" title="git add .要放入存放區的檔案"></a>git add .要放入存放區的檔案</h4><blockquote><p>(ex.  git add .gitignore )</p></blockquote><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add ."></a>git add .</h4><blockquote><p>當前目錄所新增及修改的檔案加到暫放區(若是在根目錄執行，大致上等於 git add -A)</p></blockquote><h4 id="git-add-A"><a href="#git-add-A" class="headerlink" title="git add -A"></a>git add -A</h4><blockquote><p>整個專案目錄所有的修改都加入到暫放區</p></blockquote><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><blockquote><p>看暫放區狀態</p></blockquote><h4 id="git-commit-m-“提交訊息-註解-”"><a href="#git-commit-m-“提交訊息-註解-”" class="headerlink" title="git commit -m “提交訊息(註解)”"></a>git commit -m “提交訊息(註解)”</h4><blockquote><p>加入註解後，將專案目錄儲存到儲存庫  </p></blockquote><h4 id="git-log-—oneline"><a href="#git-log-—oneline" class="headerlink" title="git log —oneline"></a>git log —oneline</h4><blockquote><p>看訊息</p></blockquote><h4 id="git-blame-index-html"><a href="#git-blame-index-html" class="headerlink" title="git blame index.html"></a>git blame index.html</h4><blockquote><p>查看檔案內容是誰修改(e.g. index.html)</p></blockquote><h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><h4 id="git-branch-‘分支名稱’"><a href="#git-branch-‘分支名稱’" class="headerlink" title="git branch ‘分支名稱’"></a>git branch ‘分支名稱’</h4><blockquote><p>新增分支 dog(分支可當成貼上標籤)</p></blockquote><h4 id="git-branch-d-‘分支名或id’"><a href="#git-branch-d-‘分支名或id’" class="headerlink" title="git branch -d ‘分支名或id’"></a>git branch -d ‘分支名或id’</h4><blockquote><p>刪除分支，若參數為 -D ，則是強制刪除</p></blockquote><h4 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h4><blockquote><p>查看分支  名稱前有 * 的是 head 所在</p></blockquote><h4 id="git-branch-f-master-版本號碼"><a href="#git-branch-f-master-版本號碼" class="headerlink" title="git branch -f master 版本號碼"></a>git branch -f master 版本號碼</h4><blockquote><p>將 master 移至該版本號碼</p></blockquote><h4 id="git-checkout-‘分支名稱或版本id’"><a href="#git-checkout-‘分支名稱或版本id’" class="headerlink" title="git checkout ‘分支名稱或版本id’"></a>git checkout ‘分支名稱或版本id’</h4><blockquote><p>切換到該分支或該版本</p></blockquote><h4 id="git-checkout-b-dog"><a href="#git-checkout-b-dog" class="headerlink" title="git checkout -b dog"></a>git checkout -b dog</h4><blockquote><p>建立 dog 分支並切換過去</p></blockquote><h4 id="git-merga-‘分支名稱’"><a href="#git-merga-‘分支名稱’" class="headerlink" title="git merga ‘分支名稱’"></a>git merga ‘分支名稱’</h4><blockquote><p>合併該分支</p></blockquote><h4 id="git-rebase-‘分支名稱’-另一種合併方式"><a href="#git-rebase-‘分支名稱’-另一種合併方式" class="headerlink" title="git rebase ‘分支名稱’(另一種合併方式 )"></a>git rebase ‘分支名稱’(另一種合併方式 )</h4><blockquote><p>改變 base (不會產生合併節點)</p></blockquote><h4 id="git-reset-commit-id-變回該版本"><a href="#git-reset-commit-id-變回該版本" class="headerlink" title="git reset commit_id(變回該版本)"></a>git reset commit_id(變回該版本)</h4><blockquote><p>回到某個版本，原本內容會回到工作目錄<br>–mixed  檔案丟回工作目錄<br>–soft   檔案丟回暫存區<br>–hard   直接刪掉</p></blockquote><h4 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h4><blockquote><p>看 log</p></blockquote><h4 id="git-reset-commit-id"><a href="#git-reset-commit-id" class="headerlink" title="git reset commit_id^"></a>git reset commit_id^</h4><blockquote><p>回到該版本的前一個狀態 幾個 <strong>^</strong> 等於回前幾個</p></blockquote><h4 id="git-reset-HEAD-2"><a href="#git-reset-HEAD-2" class="headerlink" title="git reset HEAD~2"></a>git reset HEAD~2</h4><blockquote><p>回到 HEAD 的前2個狀態</p></blockquote><h4 id="git-tag-1-0-0-commit-id"><a href="#git-tag-1-0-0-commit-id" class="headerlink" title="git tag 1.0.0 commit_id"></a>git tag 1.0.0 commit_id</h4><blockquote><p>貼上標籤</p></blockquote><h4 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h4><blockquote><p>撤消一個commit 同時建立一個新的</p></blockquote><h2 id="遠端資料庫操作-e-g-GitHub"><a href="#遠端資料庫操作-e-g-GitHub" class="headerlink" title="遠端資料庫操作(e.g. GitHub)"></a>遠端資料庫操作(e.g. GitHub)</h2><p><em>ps.先到 GitHub 新增一個儲存庫</em></p><h4 id="git-remote-add-origin-“遠端-git-網址”"><a href="#git-remote-add-origin-“遠端-git-網址”" class="headerlink" title="git remote add origin “遠端 git 網址”"></a>git remote add origin “遠端 git 網址”</h4><blockquote><p>連接遠端儲存庫。origin 代表遠端節點，名稱可修改。</p></blockquote><h4 id="git-remote-v"><a href="#git-remote-v" class="headerlink" title="git remote -v"></a>git remote -v</h4><blockquote><p>查看遠端 Git 的目的地  </p></blockquote><h4 id="git-push-origin-master"><a href="#git-push-origin-master" class="headerlink" title="git push origin master"></a>git push origin master</h4><blockquote><p>把本地的 master 分支推送到 origin 這個遠端節點並在遠端形成一個 master 分支  </p></blockquote><h4 id="git-pull-origin-master"><a href="#git-pull-origin-master" class="headerlink" title="git pull origin master"></a>git pull origin master</h4><blockquote><p>到 origin 這個遠端節點, 抓 master 分支的內容,並在本地電腦建立一個 origin/master 分支,同時與本地的 master 分支進行合併</p></blockquote><h4 id="git-fetch-origin-master"><a href="#git-fetch-origin-master" class="headerlink" title="git fetch origin master"></a>git fetch origin master</h4><blockquote><p>到 origin 這個遠端節點, 抓 master 分支的內容,並在本地電腦建立一個 origin/master 分支</p></blockquote><h4 id="git-clone-“遠端-Git-網址”"><a href="#git-clone-“遠端-Git-網址”" class="headerlink" title="git clone “遠端 Git 網址”"></a>git clone “遠端 Git 網址”</h4><blockquote><p>把遠端 Git 網址的內容複製ㄧ份到本地端電腦</p></blockquote><h2 id="Git-情況處理"><a href="#Git-情況處理" class="headerlink" title="Git 情況處理"></a>Git 情況處理</h2><h3 id="1-遠端內容比本機上的新"><a href="#1-遠端內容比本機上的新" class="headerlink" title="1.遠端內容比本機上的新"></a>1.遠端內容比本機上的新</h3><p>Git push 時發生以下錯誤：</p><blockquote><p>error: failed to push some refs to ‘<a href="https://github.com/xxxx/xxx.git&#39;" target="_blank" rel="noopener">https://github.com/xxxx/xxx.git&#39;</a><br>hint: Updates were rejected because the remote contains work that you do<br>hint: not have locally. This is usually caused by another repository pushing<br>hint: to the same ref. You may want to first integrate the remote changes<br>hint: (e.g., ‘git pull …’) before pushing again.<br>hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details.</p></blockquote><p>這段訊息的意思是線上版本的內容比你電腦裡這份還要新，所以 Git 不讓你推上去。可用  <strong>git pull origin master —rebase</strong> (內容抓下來之後請使用 Rebase 方式合併。)<br>盡量不要用 <strong>git push -f origin master</strong> 會把自己的檔推上去蓋掉他人的,並以自己的為主。<br>ps.多人的話,盡量開自己的分支來做</p><h3 id="2-不想在-Git-內放機密檔案"><a href="#2-不想在-Git-內放機密檔案" class="headerlink" title="2.不想在 Git 內放機密檔案"></a>2.不想在 Git 內放機密檔案</h3><p>$ touch .gitignore (建立Git 忽略檔案, 然後去編輯 gitignore. 已經存在的黨無效) </p><p>內容可放<br>nom-debug.log  npm除錯紀錄<br>node_modules 專案依賴關係<br>.DS_Store  OSX資料夾屬性<br><em>.tmp 暫時性檔案  </em>~</p><h2 id="不想再用版控"><a href="#不想再用版控" class="headerlink" title="不想再用版控"></a>不想再用版控</h2><p>把 <strong>.git</strong> 目錄刪除就可以</p><p>參考<br><a href="https://gitbook.tw" target="_blank" rel="noopener">為你自己學 Git</a><br><a href="https://cythilya.github.io/2019/12/03/git-detached-head-to-a-new-branch/" target="_blank" rel="noopener">Git: 如何從特定 commit 切新的分支？</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本陣列操作</title>
      <link href="/2019/12/10/2019-12-10-%E5%9F%BA%E6%9C%AC%E9%99%A3%E5%88%97%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/12/10/2019-12-10-%E5%9F%BA%E6%9C%AC%E9%99%A3%E5%88%97%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="介紹一下陣列基本操作的幾個方法"><a href="#介紹一下陣列基本操作的幾個方法" class="headerlink" title="介紹一下陣列基本操作的幾個方法"></a>介紹一下陣列基本操作的幾個方法</h2><h4 id="建立陣列"><a href="#建立陣列" class="headerlink" title="建立陣列"></a>建立陣列</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];    </span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);  </span><br><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure></div><h4 id="陣列長度"><a href="#陣列長度" class="headerlink" title="陣列長度"></a>陣列長度</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr.length);  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></div><h4 id="設定長度"><a href="#設定長度" class="headerlink" title="設定長度"></a>設定長度</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure></div><h4 id="空陣列"><a href="#空陣列" class="headerlink" title="空陣列"></a>空陣列</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [];</span><br></pre></td></tr></table></figure></div><h4 id="讀取其中一個元素，索引從零開始，對應第一個元素"><a href="#讀取其中一個元素，索引從零開始，對應第一個元素" class="headerlink" title="讀取其中一個元素，索引從零開始，對應第一個元素"></a>讀取其中一個元素，索引從零開始，對應第一個元素</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></div><h4 id="設定陣列長度可以操作陣列內元素，長度若為零。則輸入空陣列"><a href="#設定陣列長度可以操作陣列內元素，長度若為零。則輸入空陣列" class="headerlink" title="設定陣列長度可以操作陣列內元素，長度若為零。則輸入空陣列"></a>設定陣列長度可以操作陣列內元素，長度若為零。則輸入空陣列</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// []</span></span><br></pre></td></tr></table></figure></div><h4 id="Array-from-可建立一個新的-Array-實體"><a href="#Array-from-可建立一個新的-Array-實體" class="headerlink" title="Array.from() 可建立一個新的 Array 實體"></a>Array.from() 可建立一個新的 Array 實體</h4><p>1.從字串</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(<span class="string">'Hi'</span>);  <span class="comment">// ["h", "i"]</span></span><br></pre></td></tr></table></figure></div><p>2.從集合：集合會將集合內重複的元素剔除，可作分類使用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'hi'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]); </span><br><span class="line"><span class="built_in">Array</span>.from(s);</span><br><span class="line"><span class="built_in">console</span>.log(s);  <span class="comment">// &#123;"hi", 1, 2&#125;</span></span><br></pre></td></tr></table></figure></div><h3 id="迭代-讀取每一個值，然後用同樣的方式處理每一個值"><a href="#迭代-讀取每一個值，然後用同樣的方式處理每一個值" class="headerlink" title="迭代(讀取每一個值，然後用同樣的方式處理每一個值)"></a>迭代(讀取每一個值，然後用同樣的方式處理每一個值)</h3><h4 id="for-迴圈取陣列元素"><a href="#for-迴圈取陣列元素" class="headerlink" title="for 迴圈取陣列元素"></a>for 迴圈取陣列元素</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(arr[i]); <span class="comment">// 依序輸出 1 2 3 4 5 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 另一種寫法</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> arr) &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(arr[index]); 依序輸出 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="foreach：將陣列內每個元素，都傳入並執行指定函式一次。"><a href="#foreach：將陣列內每個元素，都傳入並執行指定函式一次。" class="headerlink" title="foreach：將陣列內每個元素，都傳入並執行指定函式一次。"></a>foreach：將陣列內每個元素，都傳入並執行指定函式一次。</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取陣列中大於 3 的數字</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = [];</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (value &gt; <span class="number">3</span>)&#123;</span><br><span class="line">  arr1.push(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr3);    <span class="comment">// [4,5]</span></span><br></pre></td></tr></table></figure></div><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h4 id="push-：新增元素"><a href="#push-：新增元素" class="headerlink" title="push()：新增元素"></a>push()：新增元素</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]  </span><br><span class="line">arr.push(<span class="number">6</span>); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></div><h4 id="pop-：取出陣列最後一個元素並從陣列移除"><a href="#pop-：取出陣列最後一個元素並從陣列移除" class="headerlink" title="pop()：取出陣列最後一個元素並從陣列移除"></a>pop()：取出陣列最後一個元素並從陣列移除</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> el = arr.pop(); <span class="comment">// el = 5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//  [1,2,3,4]</span></span><br></pre></td></tr></table></figure></div><h4 id="concat-：合併兩個陣列，並把新的陣列返回"><a href="#concat-：合併兩個陣列，並把新的陣列返回" class="headerlink" title="concat()：合併兩個陣列，並把新的陣列返回"></a>concat()：合併兩個陣列，並把新的陣列返回</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> a2 = a1.concat([<span class="string">'a'</span>, <span class="string">'b'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(a2); <span class="comment">// 1,2,a,b</span></span><br></pre></td></tr></table></figure></div><h4 id="join-：把所有的陣列元素合併成字串"><a href="#join-：把所有的陣列元素合併成字串" class="headerlink" title="join()：把所有的陣列元素合併成字串"></a>join()：把所有的陣列元素合併成字串</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'Hello'</span>, <span class="string">'world'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.join(<span class="string">'-'</span>)); <span class="comment">// "Hello-world"</span></span><br><span class="line"><span class="built_in">console</span>.log(a.join(<span class="string">''</span>)); <span class="comment">// "Helloworld"</span></span><br></pre></td></tr></table></figure></div><h4 id="reverse-：反轉陣列元素的順序至適當的位置"><a href="#reverse-：反轉陣列元素的順序至適當的位置" class="headerlink" title="reverse()：反轉陣列元素的順序至適當的位置"></a>reverse()：反轉陣列元素的順序至適當的位置</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure></div><h4 id="ps-反轉字串應用"><a href="#ps-反轉字串應用" class="headerlink" title="ps.反轉字串應用"></a>ps.反轉字串應用</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'Hello'</span>;</span><br><span class="line"><span class="comment">// split 將字串以指定的分隔符號來分割 </span></span><br><span class="line">str1 = str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str1);     <span class="comment">// olleH</span></span><br></pre></td></tr></table></figure></div><h4 id="shift-：取回陣列的第一個元素並移除"><a href="#shift-：取回陣列的第一個元素並移除" class="headerlink" title="shift()：取回陣列的第一個元素並移除"></a>shift()：取回陣列的第一個元素並移除</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> a = arr.shift();</span><br><span class="line"><span class="built_in">console</span>.log(a)    <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></div><h4 id="unshift-：在陣列的開頭處加入一個以上的元素"><a href="#unshift-：在陣列的開頭處加入一個以上的元素" class="headerlink" title="unshift()：在陣列的開頭處加入一個以上的元素"></a>unshift()：在陣列的開頭處加入一個以上的元素</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.unshift(<span class="number">6</span>)    </span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [6, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></div><h4 id="slice-start-index-upto-index-：回傳部分陣列"><a href="#slice-start-index-upto-index-：回傳部分陣列" class="headerlink" title="slice(start_index, upto_index)：回傳部分陣列"></a>slice(start_index, upto_index)：回傳部分陣列</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.slice(<span class="number">1</span>,<span class="number">4</span>)  <span class="comment">// arr[1] 到 arr[3] 之間的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure></div><h4 id="splice-start-deleteCount-item1-…-：刪除既有元素／或加入新元素來改變一個陣列的內容"><a href="#splice-start-deleteCount-item1-…-：刪除既有元素／或加入新元素來改變一個陣列的內容" class="headerlink" title="splice(start, deleteCount, item1, … )：刪除既有元素／或加入新元素來改變一個陣列的內容"></a>splice(start, deleteCount, item1, … )：刪除既有元素／或加入新元素來改變一個陣列的內容</h4><p>start：開始位置<br>deleteCount：刪除幾個元素(0 就是不刪除)<br>item1：要加入的元素</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> removed = arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(removed);  <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);      <span class="comment">// [1, 3, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> removed2 = arr.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(removed2); <span class="comment">// [3, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);      <span class="comment">// [1, 3, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></div><h4 id="sort-：排序陣列的元素，預設的排序順序是根據字串的-Unicode-編碼位置"><a href="#sort-：排序陣列的元素，預設的排序順序是根據字串的-Unicode-編碼位置" class="headerlink" title="sort()：排序陣列的元素，預設的排序順序是根據字串的 Unicode 編碼位置"></a>sort()：排序陣列的元素，預設的排序順序是根據字串的 Unicode 編碼位置</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'bob'</span>, <span class="string">'alice'</span>, <span class="string">'jack'</span>];</span><br><span class="line">arr.sort();  </span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["alice", "bob", "jack"]</span></span><br></pre></td></tr></table></figure></div><h4 id="ps-也可以用函式來決定如何排序-陣列數字排列要用這種方式"><a href="#ps-也可以用函式來決定如何排序-陣列數字排列要用這種方式" class="headerlink" title="ps.也可以用函式來決定如何排序(陣列數字排列要用這種方式)"></a>ps.也可以用函式來決定如何排序(陣列數字排列要用這種方式)</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arra = [<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">32</span>];</span><br><span class="line"><span class="comment">// 數字排列小到大</span></span><br><span class="line">  arra.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arra);     <span class="comment">// [1, 2, 6, 8, 10, 32]</span></span><br><span class="line"><span class="comment">// 數字排列大到小</span></span><br><span class="line">  arra.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b - a;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arra);     <span class="comment">//  [32, 10, 8, 6, 2, 1]</span></span><br></pre></td></tr></table></figure></div><h4 id="ps-陣列數字找大小：用展開運算子將陣列展開成個別值就可以用函式快速找出"><a href="#ps-陣列數字找大小：用展開運算子將陣列展開成個別值就可以用函式快速找出" class="headerlink" title="ps.陣列數字找大小：用展開運算子將陣列展開成個別值就可以用函式快速找出"></a>ps.陣列數字找大小：用展開運算子將陣列展開成個別值就可以用函式快速找出</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 陣列數字找大小</span></span><br><span class="line"><span class="keyword">const</span> arra = [<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">32</span>];</span><br><span class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max(...arra);</span><br><span class="line"><span class="keyword">let</span> min = <span class="built_in">Math</span>.min(...arra);</span><br><span class="line"><span class="built_in">console</span>.log(max, min);   <span class="comment">// 32, 1</span></span><br></pre></td></tr></table></figure></div><h4 id="indexOf-：尋找陣列中是否有符合的元素，回傳-1，表示沒有，回傳正整數表示在那個位置"><a href="#indexOf-：尋找陣列中是否有符合的元素，回傳-1，表示沒有，回傳正整數表示在那個位置" class="headerlink" title="indexOf()：尋找陣列中是否有符合的元素，回傳 -1，表示沒有，回傳正整數表示在那個位置"></a>indexOf()：尋找陣列中是否有符合的元素，回傳 -1，表示沒有，回傳正整數表示在那個位置</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">3</span>));  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></div><h4 id="ps-jQuery-用法"><a href="#ps-jQuery-用法" class="headerlink" title="ps.jQuery 用法"></a>ps.jQuery 用法</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log($.inArray(<span class="number">2</span>, arr));  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></div><h4 id="includes：陣列中尋找指定元素，回傳-true-找到-或-false-沒找到"><a href="#includes：陣列中尋找指定元素，回傳-true-找到-或-false-沒找到" class="headerlink" title="includes：陣列中尋找指定元素，回傳 true(找到)或 false(沒找到)"></a>includes：陣列中尋找指定元素，回傳 true(找到)或 false(沒找到)</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">2</span>));  <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><h4 id="filter-：回傳符合條件的元素，得到一個新陣列"><a href="#filter-：回傳符合條件的元素，得到一個新陣列" class="headerlink" title="filter()：回傳符合條件的元素，得到一個新陣列"></a>filter()：回傳符合條件的元素，得到一個新陣列</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.filter(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);   <span class="comment">// [4,5]</span></span><br></pre></td></tr></table></figure></div><h4 id="indexOf-與-map-使用，尋找是否有符合的物件"><a href="#indexOf-與-map-使用，尋找是否有符合的物件" class="headerlink" title="indexOf 與 $.map 使用，尋找是否有符合的物件"></a>indexOf 與 $.map 使用，尋找是否有符合的物件</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Peter'</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">age</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Nina'</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">//find object in list</span></span><br><span class="line"><span class="keyword">let</span> result = $.map(people, <span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.name</span><br><span class="line">&#125;).indexOf(<span class="string">'Nina'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//2</span></span><br></pre></td></tr></table></figure></div><h4 id="map-：原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合成為一個新陣列，常用對陣列元素做加工"><a href="#map-：原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合成為一個新陣列，常用對陣列元素做加工" class="headerlink" title="map()：原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合成為一個新陣列，常用對陣列元素做加工"></a>map()：原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合成為一個新陣列，常用對陣列元素做加工</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.map(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.toUpperCase() ;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);   <span class="comment">// ["A", "B", "C"]</span></span><br></pre></td></tr></table></figure></div><h4 id="every-：檢查陣列是否全部符合條件，僅會回傳一個值-true-or-false"><a href="#every-：檢查陣列是否全部符合條件，僅會回傳一個值-true-or-false" class="headerlink" title="every()：檢查陣列是否全部符合條件，僅會回傳一個值 true or false"></a>every()：檢查陣列是否全部符合條件，僅會回傳一個值 true or false</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.every(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><h4 id="some-：檢查陣列元素其中是否有符合條件，僅會回傳一個值-true-or-false"><a href="#some-：檢查陣列元素其中是否有符合條件，僅會回傳一個值-true-or-false" class="headerlink" title="some()：檢查陣列元素其中是否有符合條件，僅會回傳一個值 true or false"></a>some()：檢查陣列元素其中是否有符合條件，僅會回傳一個值 true or false</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.some(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value === <span class="number">3</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><h4 id="reduce-：陣列變成個別值，傳入函式內處理。數值加總是常見做法"><a href="#reduce-：陣列變成個別值，傳入函式內處理。數值加總是常見做法" class="headerlink" title="reduce()：陣列變成個別值，傳入函式內處理。數值加總是常見做法"></a>reduce()：陣列變成個別值，傳入函式內處理。數值加總是常見做法</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">// 處理每個元素後等待回傳結果，第一次處理時代入初始值 0</span></span><br><span class="line"><span class="keyword">let</span> result = arr.reduce(<span class="function">(<span class="params">prev, value</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 與之前的數值加總，回傳後代入下一輪的處理</span></span><br><span class="line">  <span class="keyword">return</span> prev + value;</span><br><span class="line">  &#125;, <span class="number">0</span>);  <span class="comment">// 初始值為零</span></span><br><span class="line"><span class="built_in">console</span>.log(result);   <span class="comment">// 15</span></span><br></pre></td></tr></table></figure></div><h4 id="ps-陣列扁平化，將複雜的陣列變成一維"><a href="#ps-陣列扁平化，將複雜的陣列變成一維" class="headerlink" title="ps.陣列扁平化，將複雜的陣列變成一維"></a>ps.陣列扁平化，將複雜的陣列變成一維</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myArr = [</span><br><span class="line">    [ <span class="number">1</span>, <span class="number">2</span> ],</span><br><span class="line">    [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ],</span><br><span class="line">    [ <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> ]</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 將所有元素都與之前代入的陣列相接起來，第一次處理時代入初始值空陣列</span></span><br><span class="line"><span class="keyword">let</span> newArr = myArr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">arr, element</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ex: [ 1, 2 ].concat([ 3, 4, 5 ])</span></span><br><span class="line">    <span class="keyword">return</span> arr.concat(element);</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [ 1, 2, 3, 4, 5, 6, 7, 8 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.將空陣列與 [ 1, 2 ] 相接起來後回傳</span></span><br><span class="line"><span class="comment">// 2.將被代入的 [ 1, 2 ] 與 [ 3, 4, 5 ] 相接起來後回傳</span></span><br><span class="line"><span class="comment">// 3.將被代入的 [ 1, 2, 3, 4, 5 ] 與 [ 6, 7, 8 ] 相接起來後回傳</span></span><br></pre></td></tr></table></figure></div><h4 id="ps-對陣列的內容進行統計"><a href="#ps-對陣列的內容進行統計" class="headerlink" title="ps.對陣列的內容進行統計"></a>ps.對陣列的內容進行統計</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myArr = [</span><br><span class="line">    <span class="string">'C/C++'</span>,</span><br><span class="line">    <span class="string">'JavaScript'</span>,</span><br><span class="line">    <span class="string">'Ruby'</span>,</span><br><span class="line">    <span class="string">'Java'</span>,</span><br><span class="line">    <span class="string">'Objective-C'</span>,</span><br><span class="line">    <span class="string">'JavaScript'</span>,</span><br><span class="line">    <span class="string">'PHP'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 計算出每種語言出現過幾次</span></span><br><span class="line"><span class="keyword">let</span> langStatistics = myArr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">langs, langName</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// hasOwnProperty() 回傳物件是否有該屬性的布林值。</span></span><br><span class="line">    <span class="keyword">if</span> (langs.hasOwnProperty(langName)) &#123; </span><br><span class="line">        langs[langName]++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        langs[langName] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> langs;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(langStatistics);</span><br><span class="line"><span class="comment">// &#123; 'C/C++': 1, 'JavaScript': 2, 'Ruby': 1, 'Java': 1, 'Objective-C': 1, 'PHP': 1 &#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="ps-Object-的形式的處理"><a href="#ps-Object-的形式的處理" class="headerlink" title="ps. Object 的形式的處理"></a>ps. Object 的形式的處理</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="string">'Fred'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'Leon'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'Wesley'</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">'Chuck'</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">'Denny'</span>: <span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Object.keys() 取得包含所有 key 的陣列</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="built_in">Object</span>.keys(data).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 利用 key 取得原始物件中的值，然後加總</span></span><br><span class="line">    <span class="keyword">return</span> data[name] + prev;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.keys()：回傳一個由指定物件所有可列舉之屬性(key)組成的陣列</span></span><br><span class="line"><span class="built_in">Object</span>.keys(data) <span class="comment">// ["Fred", "Leon", "Wesley", "Chuck", "Denny"]</span></span><br><span class="line">data[Fred] <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></div><h4 id="ps-map-和-reduce-結合使用"><a href="#ps-map-和-reduce-結合使用" class="headerlink" title="ps. map() 和 reduce() 結合使用"></a>ps. map() 和 reduce() 結合使用</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.map(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (value &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line"> &#125;)</span><br><span class="line">.reduce(<span class="function">(<span class="params">prev, value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> prev + value;</span><br><span class="line">  &#125;, <span class="number">0</span>);  <span class="comment">// 初始值為零</span></span><br><span class="line"><span class="built_in">console</span>.log(result);   <span class="comment">// 40</span></span><br></pre></td></tr></table></figure></div><p>參考資料<br><a href="https://www.hexschool.com/2017/09/01/2017-09-01-javascript-for/" target="_blank" rel="noopener">https://www.hexschool.com/2017/09/01/2017-09-01-javascript-for/</a><br><a href="http://fred-zone.blogspot.com/2017/01/javascript-mapreduce.html" target="_blank" rel="noopener">http://fred-zone.blogspot.com/2017/01/javascript-mapreduce.html</a><br><a href="https://cythilya.github.io/2017/05/08/javascript-find-item-in-an-array/" target="_blank" rel="noopener">https://cythilya.github.io/2017/05/08/javascript-find-item-in-an-array/</a><br><a href="https://developer.mozilla.org/zh-TW/" target="_blank" rel="noopener">https://developer.mozilla.org/zh-TW/</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS偽類與偽元素</title>
      <link href="/2019/06/05/2019-06-05-CSS/"/>
      <url>/2019/06/05/2019-06-05-CSS/</url>
      
        <content type="html"><![CDATA[<h3 id="偽元素-pseudo-element-和偽類-pseudo-class-差在哪"><a href="#偽元素-pseudo-element-和偽類-pseudo-class-差在哪" class="headerlink" title="偽元素 (pseudo element) 和偽類 (pseudo class) 差在哪"></a>偽元素 (pseudo element) 和偽類 (pseudo class) 差在哪</h3><p>有時候 CSS 裡會出現單冒號 : 跟雙冒號 :: 的符號，<br>單冒號開頭的是偽類 (pseudo class) ，<br>雙冒號開頭的是偽元素 (pseudo element) 。</p><p>一般常見的偽類有:  </p><ol><li>動態：:link、:hover、:active、:focus、:visited  </li><li>元素狀態：:disabled、:enabled、:checked  </li><li>結構：:root、:nth-child、:nth-last-child、:nth-of-type、:nth-last-of-type、:first-child、:last-child、:first-of-type、:last-of-type、:only-child、:only-of-type、:empty</li></ol><p>偽元素有:</p><ol><li>::first-line：選取第一行  </li><li>::first-letter：選取第一個字  </li><li>::before：從選取元素的前面加入元素  </li><li>::after：從選取元素的後面加入元素  </li><li>::selection：選取文字反白後  </li></ol><p>ps.現在單一冒號 <code>:</code> 也可以代表偽元素，但要注意瀏覽器是否支援。</p><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><h4 id="SCSS-的-amp-符號"><a href="#SCSS-的-amp-符號" class="headerlink" title="SCSS 的 &amp; 符號"></a>SCSS 的 &amp; 符號</h4><p>是scss的语法，代表上一層選擇器(元素)</p><p>有時會看到類似寫法 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.bordered &#123;</span><br><span class="line">  &amp;.float &#123;</span><br><span class="line">    float: left; </span><br><span class="line">  &#125;</span><br><span class="line">  .top &#123;</span><br><span class="line">    margin: 5px; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其實上面寫法等同於</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.bordered.float &#123;</span><br><span class="line">  float: left; </span><br><span class="line">&#125;</span><br><span class="line">.bordered .top &#123;</span><br><span class="line">  margin: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>.bordered.float</code> 是串聯選擇器，作用在同一標籤上<br><code>.bordered .top</code> 是後代選擇器，作用在不同標籤上</p><p>有時 CSS 中有定義一些 pseudo-classes (或稱偽類、準類別)，被使用來為元素增加一些特效，如 <code>:hover</code>, <code>:link</code>, <code>:visited</code>,  <code>:before</code>, <code>:after</code> 等這些以冒號(:)開頭的類別名稱。例如把滑鼠移到某個網頁連結時，連結會變色的 CSS 語法：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line">a :hover &#123;</span><br><span class="line">  color:#FF00FF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上述其實還是一種巢狀的結構，只是都作用到同一個元素(例如範例的 a 元素)上。這樣情況就能夠用對 <code>:hover</code> 使用 <code>＆</code> 符號來代表其作用的父選取器，所以上述的 CSS 範例的 Sass 就可以寫成：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color:#FF00FF;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>參考來源：<br><a href="https://www.oxxostudio.tw/articles/201405/css-selector.html" target="_blank" rel="noopener">oxxostudioCSS 偽類 child 和 of-type</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown語法</title>
      <link href="/2019/05/29/2019-05-29-Markdown%E8%AA%9E%E6%B3%95/"/>
      <url>/2019/05/29/2019-05-29-Markdown%E8%AA%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><em>Markdown</em></p><p>Markdown 是一種輕量級標記式語言它有純文字標記的特性，讓編寫的可讀性提升不少。目前已有不少網站都使用 Markdown 來撰寫文件或是在網站上發表文章。</p><p>現在來介紹幾個常用的語法:</p><h3 id="粗體"><a href="#粗體" class="headerlink" title="粗體"></a>粗體</h3><p>語法<br><code>***bold***</code><br>顯示畫面<br><strong><em>bold</em></strong></p><h3 id="標題字"><a href="#標題字" class="headerlink" title="標題字"></a>標題字</h3><p>語法<br><code># This is an tag</code><br>顯示畫面</p><h1 id="This-is-an-tag"><a href="#This-is-an-tag" class="headerlink" title="This is an tag"></a>This is an tag</h1><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>語法<br><a href="/2019/05/29/2019-05-29-Markdown語法/1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/05/29/2019-05-29-Markdown語法/1.png"></a><br>顯示畫面</p><ul><li>item 1</li><li>item 2<ul><li>item 2a</li><li>item 2b</li></ul></li></ul><h3 id="編號列表"><a href="#編號列表" class="headerlink" title="編號列表"></a>編號列表</h3><p>語法<br><a href="/2019/05/29/2019-05-29-Markdown語法/2.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/05/29/2019-05-29-Markdown語法/2.png"></a><br>顯示畫面</p><ol><li>Item 1</li><li>Item 2</li><li>Item 3<ol><li>Item 3a</li><li>Item 3b</li></ol></li></ol><h3 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h3><p>括號中的 x 就代表此項目是有勾選的，它並不會主動紀錄勾選過的內容，所以使用時要注意確認。</p><p><code>- [x] This is a complete item</code><br><code>- [  ] This is an incomplete item</code></p><p>顯示畫面</p><ul><li style="list-style: none"><input type="checkbox" checked> This is a complete item</li><li style="list-style: none"><input type="checkbox"> This is an incomplete item</li></ul><h3 id="區塊"><a href="#區塊" class="headerlink" title="區塊"></a>區塊</h3><p>區塊分為小區塊跟大區塊，通常用於一段相關內容的撰寫，一小段文字或是註釋可用小區塊來表示，內容較多又不想跟一般段落內容混在一起的話，則會用大區塊來表示。<br>小區塊語法：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`Format one word or one line`</span><br></pre></td></tr></table></figure></div></p><p>大區塊語法：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code (4 spaces indent)</span><br></pre></td></tr></table></figure></div></p><p>顯示畫面：</p><p><code>Format one word or one line</code></p><pre><code>code (4 spaces indent)</code></pre><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>只要使用三個反引號加上語言簡稱就可以了。<br>高亮程式碼顯示語法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="number">2</span>,c=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">'a'</span>+n+<span class="string">'=b*c'</span>);</span><br></pre></td></tr></table></figure></div><h3 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a>圖片</h3><p>插入圖片語法<br><code>![GITHUB](_圖片網址 &quot;圖片名稱&quot;_)</code><br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img Steve.jpg This is an image %&#125;</span><br></pre></td></tr></table></figure></div></p><p><a href="_圖片網址 &quot;圖片名稱&quot;_" data-fancybox="group" data-caption="GITHUB" class="fancybox"><img src="_圖片網址 &quot;圖片名稱&quot;_" alt="GITHUB" title="GITHUB"></a><br><a href="/2019/05/29/2019-05-29-Markdown語法/Steve.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/05/29/2019-05-29-Markdown語法/Steve.jpg" title="This is an image"></a></p><h3 id="階層式區塊"><a href="#階層式區塊" class="headerlink" title="階層式區塊"></a>階層式區塊</h3><h4 id="階層式區塊在表現結構或功能關係上是相當好用的呈現形式"><a href="#階層式區塊在表現結構或功能關係上是相當好用的呈現形式" class="headerlink" title="階層式區塊在表現結構或功能關係上是相當好用的呈現形式"></a>階層式區塊在表現結構或功能關係上是相當好用的呈現形式</h4><p>語法：</p><p>> Quote one sentences<br>>&gt;Quote two sentences<br>>&gt;Quote two sentences<br>>&gt;&gt;Quote three sentences</p><p>顯示結果：</p><blockquote><p>Quote one sentences</p><blockquote><p>Quote two sentences<br>Quote two sentences</p><blockquote><p>Quote three sentences</p></blockquote></blockquote></blockquote><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><p><a href="/images/logo.png" data-fancybox="group" data-caption="GitHub Logo" class="fancybox"><img src="/images/logo.png" alt="GitHub Logo" title="GitHub Logo"></a><br>Format: <a href="url" data-fancybox="group" data-caption="Alt Text" class="fancybox"><img src="url" alt="Alt Text" title="Alt Text"></a></p><h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><p>語法<br><code>http://github.com - automatic!</code><br><code>[GitHub](http://github.com)</code></p><p>顯示<br><a href="http://github.com" target="_blank" rel="noopener">http://github.com</a> - automatic!<br><a href="http://github.com" target="_blank" rel="noopener">GitHub</a></p><h3 id="Inline-code"><a href="#Inline-code" class="headerlink" title="Inline code"></a>Inline code</h3><p>I think you should use an<br><code>&lt;addr&gt;</code> element here instead.</p><h3 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h3><p>語法</p><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content from cell 1</td><td>Content from cell 2</td></tr><tr><td>Content in the first column</td><td>Content in the second column</td></tr></tbody></table><p>顯示</p><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content from cell 1</td><td>Content from cell 2</td></tr><tr><td>Content in the first column</td><td>Content in the second column</td></tr></tbody></table><p>參考來源：<br><a href="https://ithelp.ithome.com.tw/articles/10203758" target="_blank" rel="noopener">Markdown - 易編易讀，優雅的寫文吧！ - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天</a><br><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">Mastering Markdown · GitHub Guides</a><br><a href="https://markdown.tw/#autoescape" target="_blank" rel="noopener">Markdown文件</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript eval()的用法</title>
      <link href="/2019/05/29/2019-05-29-JavaScript-eval/"/>
      <url>/2019/05/29/2019-05-29-JavaScript-eval/</url>
      
        <content type="html"><![CDATA[<p>eval() 是個滿好用的函式，用途也多種，常常會使用到。</p><p>eval 是 evaluates 。例如：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="number">2</span>,c=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">'a'</span>+n+<span class="string">'=b*c'</span>);</span><br></pre></td></tr></table></figure></div></p><p>上面結果會變成 a1=b*c ，就是變數 a1 的結果為 6。</p><p>由以上可知，eval() 是把一組字串，當作指令來執行，並得出結果。<br>實作時，在訂單處理上應用較廣，例如以下是份簡單訂單：</p><table><thead><tr><th>數量</th><th>單價</th><th>小計</th></tr></thead><tbody><tr><td>Q1</td><td>P1</td><td>T1</td></tr><tr><td>Q2</td><td>P2</td><td>T2</td></tr><tr><td>Q3</td><td>P3</td><td>T3</td></tr></tbody></table><p>用編號來進行不同筆數訂單欄位命名，而不是每個欄位獨立命名，顯示，在輸入數量及單價後，小計要能自動計算。</p><p>假設這份表單名為 order，所以：</p><p>document.order.T1.value=document.order.Q1.value*document.order.P1.value;<br>document.order.T2.value=document.order.Q2.value*document.order.P2.value;<br>document.order.T3.value=document.order.Q3.value*document.order.P3.value;</p><p>你是不是會想用 for 來跑迴圈？可是，T1、;Q1 這些欄位名稱一直在變，怎麼跑迴圈呢？這時，eval() 就派上用場了，eval() 把「唸的內容」當結果執行，這個例子怎麼唸呢？</p><p>「第一個 T 的值等於第一個 Q 的值乘以第一個 P 的值」，換成 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>()：</span><br><span class="line"><span class="keyword">var</span> form=<span class="built_in">document</span>.order;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">'form.T'</span>+i+<span class="string">'value=form.Q'</span>+i+<span class="string">'value(form.P'</span>+i+<span class="string">'value'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>把 eval() 裡的字串，i 的值分別用 1,2,3 套入，結果和前面寫一大串三行的效果一模一樣。</p><p>參考來源：<br><a href="http://icodding.blogspot.com/2015/12/javascript-eval.html" target="_blank" rel="noopener">icodding愛程式: JavaScript 的 eval() 用法介紹</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/26/hello-world/"/>
      <url>/2019/05/26/hello-world/</url>
      
        <content type="html"><![CDATA[<a href="/2019/05/26/hello-world/Steve.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="/2019/05/26/hello-world/Steve.jpg" title="This is an image"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
